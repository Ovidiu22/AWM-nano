
AWM-nano-master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000108  00800100  000011be  00001252  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000011be  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000022  00800208  00800208  0000135a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000135a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000013b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000198  00000000  00000000  000013f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000295f  00000000  00000000  00001590  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e1c  00000000  00000000  00003eef  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000018f3  00000000  00000000  00004d0b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003cc  00000000  00000000  00006600  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00009099  00000000  00000000  000069cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000018b7  00000000  00000000  0000fa65  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000160  00000000  00000000  0001131c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00003689  00000000  00000000  0001147c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
       2:	00 00       	nop
       4:	4d c0       	rjmp	.+154    	; 0xa0 <__bad_interrupt>
       6:	00 00       	nop
       8:	4b c0       	rjmp	.+150    	; 0xa0 <__bad_interrupt>
       a:	00 00       	nop
       c:	49 c0       	rjmp	.+146    	; 0xa0 <__bad_interrupt>
       e:	00 00       	nop
      10:	47 c0       	rjmp	.+142    	; 0xa0 <__bad_interrupt>
      12:	00 00       	nop
      14:	45 c0       	rjmp	.+138    	; 0xa0 <__bad_interrupt>
      16:	00 00       	nop
      18:	94 c5       	rjmp	.+2856   	; 0xb42 <__vector_6>
      1a:	00 00       	nop
      1c:	41 c0       	rjmp	.+130    	; 0xa0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	3f c0       	rjmp	.+126    	; 0xa0 <__bad_interrupt>
      22:	00 00       	nop
      24:	3d c0       	rjmp	.+122    	; 0xa0 <__bad_interrupt>
      26:	00 00       	nop
      28:	3b c0       	rjmp	.+118    	; 0xa0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	39 c0       	rjmp	.+114    	; 0xa0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	37 c0       	rjmp	.+110    	; 0xa0 <__bad_interrupt>
      32:	00 00       	nop
      34:	35 c0       	rjmp	.+106    	; 0xa0 <__bad_interrupt>
      36:	00 00       	nop
      38:	33 c0       	rjmp	.+102    	; 0xa0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	31 c0       	rjmp	.+98     	; 0xa0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	2f c0       	rjmp	.+94     	; 0xa0 <__bad_interrupt>
      42:	00 00       	nop
      44:	2d c0       	rjmp	.+90     	; 0xa0 <__bad_interrupt>
      46:	00 00       	nop
      48:	2b c0       	rjmp	.+86     	; 0xa0 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	29 c0       	rjmp	.+82     	; 0xa0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	27 c0       	rjmp	.+78     	; 0xa0 <__bad_interrupt>
      52:	00 00       	nop
      54:	25 c0       	rjmp	.+74     	; 0xa0 <__bad_interrupt>
      56:	00 00       	nop
      58:	23 c0       	rjmp	.+70     	; 0xa0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	21 c0       	rjmp	.+66     	; 0xa0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	1f c0       	rjmp	.+62     	; 0xa0 <__bad_interrupt>
      62:	00 00       	nop
      64:	1d c0       	rjmp	.+58     	; 0xa0 <__bad_interrupt>
	...

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	12 e0       	ldi	r17, 0x02	; 2
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ee eb       	ldi	r30, 0xBE	; 190
      7c:	f1 e1       	ldi	r31, 0x11	; 17
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a8 30       	cpi	r26, 0x08	; 8
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	22 e0       	ldi	r18, 0x02	; 2
      8c:	a8 e0       	ldi	r26, 0x08	; 8
      8e:	b2 e0       	ldi	r27, 0x02	; 2
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	aa 32       	cpi	r26, 0x2A	; 42
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	7f d4       	rcall	.+2302   	; 0x99a <main>
      9c:	0c 94 dd 08 	jmp	0x11ba	; 0x11ba <_exit>

000000a0 <__bad_interrupt>:
      a0:	af cf       	rjmp	.-162    	; 0x0 <__vectors>

000000a2 <init_WL_mgmt>:
{
	distance = MIN(distance, WATER_LEVEL_MIN); // Limit lower level to the taps level; 
	uint8_t level_act = WATER_LEVEL_MIN - distance;
	
	return level_act;
}
      a2:	20 9a       	sbi	0x04, 0	; 4
      a4:	52 9a       	sbi	0x0a, 2	; 10
      a6:	08 95       	ret

000000a8 <displayMeasurements>:
Inputs:		current water level
Outputs:	none
Description:displays water level, evolution forecast or slave diagnostics
******************************************************************** */
void displayMeasurements( uint8_t level_act )
{
      a8:	1f 93       	push	r17
      aa:	cf 93       	push	r28
      ac:	df 93       	push	r29
      ae:	cd b7       	in	r28, 0x3d	; 61
      b0:	de b7       	in	r29, 0x3e	; 62
      b2:	28 97       	sbiw	r28, 0x08	; 8
      b4:	0f b6       	in	r0, 0x3f	; 63
      b6:	f8 94       	cli
      b8:	de bf       	out	0x3e, r29	; 62
      ba:	0f be       	out	0x3f, r0	; 63
      bc:	cd bf       	out	0x3d, r28	; 61
      be:	18 2f       	mov	r17, r24
	displayLCD_main(1, "CLEAR", NONE, "NONE");	// Clear row 1
      c0:	23 e0       	ldi	r18, 0x03	; 3
      c2:	31 e0       	ldi	r19, 0x01	; 1
      c4:	4f ef       	ldi	r20, 0xFF	; 255
      c6:	68 e0       	ldi	r22, 0x08	; 8
      c8:	71 e0       	ldi	r23, 0x01	; 1
      ca:	81 e0       	ldi	r24, 0x01	; 1
      cc:	47 d4       	rcall	.+2190   	; 0x95c <displayLCD_main>

	char full_level[] = "/160 cm";
      ce:	88 e0       	ldi	r24, 0x08	; 8
      d0:	eb e2       	ldi	r30, 0x2B	; 43
      d2:	f1 e0       	ldi	r31, 0x01	; 1
      d4:	de 01       	movw	r26, r28
      d6:	11 96       	adiw	r26, 0x01	; 1
      d8:	01 90       	ld	r0, Z+
      da:	0d 92       	st	X+, r0
      dc:	8a 95       	dec	r24
      de:	e1 f7       	brne	.-8      	; 0xd8 <displayMeasurements+0x30>
	displayLCD_main(1, "Level: ", level_act, full_level);
      e0:	9e 01       	movw	r18, r28
      e2:	2f 5f       	subi	r18, 0xFF	; 255
      e4:	3f 4f       	sbci	r19, 0xFF	; 255
      e6:	41 2f       	mov	r20, r17
      e8:	6e e0       	ldi	r22, 0x0E	; 14
      ea:	71 e0       	ldi	r23, 0x01	; 1
      ec:	81 e0       	ldi	r24, 0x01	; 1
      ee:	36 d4       	rcall	.+2156   	; 0x95c <displayLCD_main>
	displayLCD_main(2, "--------------------", NONE, "NONE");
      f0:	23 e0       	ldi	r18, 0x03	; 3
      f2:	31 e0       	ldi	r19, 0x01	; 1
      f4:	4f ef       	ldi	r20, 0xFF	; 255
      f6:	66 e1       	ldi	r22, 0x16	; 22
      f8:	71 e0       	ldi	r23, 0x01	; 1
      fa:	82 e0       	ldi	r24, 0x02	; 2
      fc:	2f d4       	rcall	.+2142   	; 0x95c <displayLCD_main>
	
}
      fe:	28 96       	adiw	r28, 0x08	; 8
     100:	0f b6       	in	r0, 0x3f	; 63
     102:	f8 94       	cli
     104:	de bf       	out	0x3e, r29	; 62
     106:	0f be       	out	0x3f, r0	; 63
     108:	cd bf       	out	0x3d, r28	; 61
     10a:	df 91       	pop	r29
     10c:	cf 91       	pop	r28
     10e:	1f 91       	pop	r17
     110:	08 95       	ret

00000112 <setPumpStatus>:
Description:Sets pump flag (switch on or off)
******************************************************************** */
void setPumpStatus( uint8_t level_act )
{
	// Pump control
	if (  level_act < THD_TANK_MIN )
     112:	89 31       	cpi	r24, 0x19	; 25
     114:	20 f4       	brcc	.+8      	; 0x11e <setPumpStatus+0xc>
	{
		pmpSt = 1;	// Set status pump can be activated
     116:	81 e0       	ldi	r24, 0x01	; 1
     118:	80 93 29 02 	sts	0x0229, r24	; 0x800229 <pmpSt>
     11c:	08 95       	ret
	}
	else if ( level_act > THD_TANK_MAX )
     11e:	82 39       	cpi	r24, 0x92	; 146
     120:	10 f0       	brcs	.+4      	; 0x126 <setPumpStatus+0x14>
	{
		pmpSt = 0;	// Set status pump has to be switched off
     122:	10 92 29 02 	sts	0x0229, r1	; 0x800229 <pmpSt>
     126:	08 95       	ret

00000128 <setLevelLEDStatus>:
Description:Sets LED flag (switch on or off)
******************************************************************** */
void setLevelLEDStatus( uint8_t level_act )
{
	// WL LED control
	if ( level_act < THD_TANK_MAX )		// Water below above min. threshold
     128:	81 39       	cpi	r24, 0x91	; 145
     12a:	20 f4       	brcc	.+8      	; 0x134 <setLevelLEDStatus+0xc>
	{
		ledSt = 1;	// Turn on LED
     12c:	81 e0       	ldi	r24, 0x01	; 1
     12e:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <ledSt>
     132:	08 95       	ret
	}
	else if ( level_act > THD_TANK_MAX )	// Water level above min. threshold
     134:	82 39       	cpi	r24, 0x92	; 146
     136:	10 f0       	brcs	.+4      	; 0x13c <setLevelLEDStatus+0x14>
	{
		ledSt = 0;	// Turn off LED
     138:	10 92 28 02 	sts	0x0228, r1	; 0x800228 <ledSt>
     13c:	08 95       	ret

0000013e <MasterCoreMain>:
Inputs:		response from Slave: Routine Control response, payload 
Outputs:	none
Description:core functionality of the Master: Slave response evaluation
******************************************************************** */
void MasterCoreMain( uint8_t RC_resp, uint8_t distance, uint8_t bat_soc )
{
     13e:	cf 93       	push	r28
     140:	c6 2f       	mov	r28, r22
	/* Select identifier default diagnostic for fatal error */
	if (RC_resp != 0x47)	// Correct answer from Slave
     142:	87 34       	cpi	r24, 0x47	; 71
     144:	91 f0       	breq	.+36     	; 0x16a <MasterCoreMain+0x2c>
	{
		clearScreen();
     146:	0c d4       	rcall	.+2072   	; 0x960 <clearScreen>
		displayLCD_main(1, "Oops, something went", NONE, "NONE");	// Something went wrong with Master-Slave communication
     148:	23 e0       	ldi	r18, 0x03	; 3
     14a:	31 e0       	ldi	r19, 0x01	; 1
     14c:	4f ef       	ldi	r20, 0xFF	; 255
     14e:	63 e3       	ldi	r22, 0x33	; 51
     150:	71 e0       	ldi	r23, 0x01	; 1
     152:	81 e0       	ldi	r24, 0x01	; 1
     154:	03 d4       	rcall	.+2054   	; 0x95c <displayLCD_main>
		displayLCD_main(2, "with the connection.", NONE, "NONE");	// Something went wrong with Master-Slave communication
     156:	23 e0       	ldi	r18, 0x03	; 3
     158:	31 e0       	ldi	r19, 0x01	; 1
     15a:	4f ef       	ldi	r20, 0xFF	; 255
     15c:	68 e4       	ldi	r22, 0x48	; 72
     15e:	71 e0       	ldi	r23, 0x01	; 1
     160:	82 e0       	ldi	r24, 0x02	; 2
     162:	fc d3       	rcall	.+2040   	; 0x95c <displayLCD_main>
		pmpSt = 0;
     164:	10 92 29 02 	sts	0x0229, r1	; 0x800229 <pmpSt>
     168:	11 c0       	rjmp	.+34     	; 0x18c <MasterCoreMain+0x4e>
	}
	else
	{
		displayLCD_main(3, "Battery Eagle: ", bat_soc, "%"); // Eagle battery
     16a:	2d e5       	ldi	r18, 0x5D	; 93
     16c:	31 e0       	ldi	r19, 0x01	; 1
     16e:	6f e5       	ldi	r22, 0x5F	; 95
     170:	71 e0       	ldi	r23, 0x01	; 1
     172:	83 e0       	ldi	r24, 0x03	; 3
     174:	f3 d3       	rcall	.+2022   	; 0x95c <displayLCD_main>
			Information is tank specific (max. depth of the tank, ...)
******************************************************************** */
uint8_t getActualLevel(uint8_t distance) 
{
	distance = MIN(distance, WATER_LEVEL_MIN); // Limit lower level to the taps level; 
	uint8_t level_act = WATER_LEVEL_MIN - distance;
     176:	c9 3b       	cpi	r28, 0xB9	; 185
     178:	08 f0       	brcs	.+2      	; 0x17c <MasterCoreMain+0x3e>
     17a:	c8 eb       	ldi	r28, 0xB8	; 184
     17c:	88 eb       	ldi	r24, 0xB8	; 184
	{
		displayLCD_main(3, "Battery Eagle: ", bat_soc, "%"); // Eagle battery
		
		/* Get water level */
		uint8_t level_act = getActualLevel(distance);		
		displayMeasurements( level_act );	// Display level, time to fill, diagnostics		
     17e:	8c 1b       	sub	r24, r28
		setPumpStatus( level_act );			// Control of water pump
     180:	c8 2f       	mov	r28, r24
     182:	92 df       	rcall	.-220    	; 0xa8 <displayMeasurements>
     184:	8c 2f       	mov	r24, r28
		setLevelLEDStatus( level_act );
     186:	c5 df       	rcall	.-118    	; 0x112 <setPumpStatus>
     188:	8c 2f       	mov	r24, r28
     18a:	ce df       	rcall	.-100    	; 0x128 <setLevelLEDStatus>
	}
}
     18c:	cf 91       	pop	r28
     18e:	08 95       	ret

00000190 <controlPump>:
Outputs:	none
Description:Switches the pump on or off
******************************************************************** */
void controlPump(void)
{
	if ( pmpSt == 1 )
     190:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <pmpSt>
     194:	81 30       	cpi	r24, 0x01	; 1
     196:	11 f4       	brne	.+4      	; 0x19c <controlPump+0xc>
	{
		PUMP_TURN_ON;	// Turn on pump
     198:	28 9a       	sbi	0x05, 0	; 5
     19a:	08 95       	ret
	}
	else if ( pmpSt == 0 )
     19c:	81 11       	cpse	r24, r1
     19e:	01 c0       	rjmp	.+2      	; 0x1a2 <controlPump+0x12>
	{
		PUMP_TURN_OFF;	// Turn off pump
     1a0:	28 98       	cbi	0x05, 0	; 5
     1a2:	08 95       	ret

000001a4 <controlLED>:
Outputs:	none
Description:Switches the LED on or off
******************************************************************** */
void controlLED(void)
{
	if ( ledSt == 1 )
     1a4:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <ledSt>
     1a8:	81 30       	cpi	r24, 0x01	; 1
     1aa:	11 f4       	brne	.+4      	; 0x1b0 <controlLED+0xc>
	{
		LED_TURN_ON;	// Turn on pump
     1ac:	5a 9a       	sbi	0x0b, 2	; 11
     1ae:	08 95       	ret
	}
	else if ( ledSt == 0 )
     1b0:	81 11       	cpse	r24, r1
     1b2:	01 c0       	rjmp	.+2      	; 0x1b6 <controlLED+0x12>
	{
		LED_TURN_OFF;	// Turn off pump
     1b4:	5a 98       	cbi	0x0b, 2	; 11
     1b6:	08 95       	ret

000001b8 <UpdateMeasurementsTime>:
Outputs:	none
Description:Displays elapsed time since last measurements
******************************************************************** */
void UpdateMeasurementsTime( uint8_t newData, uint8_t cycles )
{
	if (newData == 1)	// Display elapsed time since last measurement, but not since last connection loss
     1b8:	81 30       	cpi	r24, 0x01	; 1
     1ba:	79 f4       	brne	.+30     	; 0x1da <UpdateMeasurementsTime+0x22>
	{
		uint8_t elapsedTime = cycles / 7; // min
		displayLCD_main(4, "Updated ", elapsedTime, " min ago" ); // Updated x min ago
     1bc:	45 e2       	ldi	r20, 0x25	; 37
     1be:	64 9f       	mul	r22, r20
     1c0:	41 2d       	mov	r20, r1
     1c2:	11 24       	eor	r1, r1
     1c4:	64 1b       	sub	r22, r20
     1c6:	66 95       	lsr	r22
     1c8:	46 0f       	add	r20, r22
     1ca:	46 95       	lsr	r20
     1cc:	46 95       	lsr	r20
     1ce:	2f e6       	ldi	r18, 0x6F	; 111
     1d0:	31 e0       	ldi	r19, 0x01	; 1
     1d2:	68 e7       	ldi	r22, 0x78	; 120
     1d4:	71 e0       	ldi	r23, 0x01	; 1
     1d6:	84 e0       	ldi	r24, 0x04	; 4
     1d8:	c1 c3       	rjmp	.+1922   	; 0x95c <displayLCD_main>
     1da:	08 95       	ret

000001dc <displayConnecting>:
Description:Displays connecting attempt to Slave depending if first 
			or a subsequent measurement
******************************************************************** */
void displayConnecting( uint8_t f_meas_available )
{
	if (f_meas_available == 0)	// No previous measurements since last start
     1dc:	81 11       	cpse	r24, r1
     1de:	17 c0       	rjmp	.+46     	; 0x20e <displayConnecting+0x32>
	{
		clearScreen();
     1e0:	bf d3       	rcall	.+1918   	; 0x960 <clearScreen>
		displayLCD_main(1, "Listening to Eagle..", NONE, "NONE" );	// Listening to Eagle..
     1e2:	23 e0       	ldi	r18, 0x03	; 3
     1e4:	31 e0       	ldi	r19, 0x01	; 1
     1e6:	4f ef       	ldi	r20, 0xFF	; 255
     1e8:	61 e8       	ldi	r22, 0x81	; 129
     1ea:	71 e0       	ldi	r23, 0x01	; 1
     1ec:	81 e0       	ldi	r24, 0x01	; 1
     1ee:	b6 d3       	rcall	.+1900   	; 0x95c <displayLCD_main>
		displayLCD_main(2, "This may take a few", NONE, "NONE" );	// This may take a few
     1f0:	23 e0       	ldi	r18, 0x03	; 3
     1f2:	31 e0       	ldi	r19, 0x01	; 1
     1f4:	4f ef       	ldi	r20, 0xFF	; 255
     1f6:	66 e9       	ldi	r22, 0x96	; 150
     1f8:	71 e0       	ldi	r23, 0x01	; 1
     1fa:	82 e0       	ldi	r24, 0x02	; 2
     1fc:	af d3       	rcall	.+1886   	; 0x95c <displayLCD_main>
		displayLCD_main(3, "minutes.", NONE, "NONE" );	//  minutes.
     1fe:	23 e0       	ldi	r18, 0x03	; 3
     200:	31 e0       	ldi	r19, 0x01	; 1
     202:	4f ef       	ldi	r20, 0xFF	; 255
     204:	6a ea       	ldi	r22, 0xAA	; 170
     206:	71 e0       	ldi	r23, 0x01	; 1
     208:	83 e0       	ldi	r24, 0x03	; 3
     20a:	a8 c3       	rjmp	.+1872   	; 0x95c <displayLCD_main>
     20c:	08 95       	ret
	}
	else	// Put the "Listening to Eagle" part on 4th row after previous measurements
	{
		displayLCD_main(4, "Listening to Eagle..", NONE, "NONE" );	// Listening to Eagle..
     20e:	23 e0       	ldi	r18, 0x03	; 3
     210:	31 e0       	ldi	r19, 0x01	; 1
     212:	4f ef       	ldi	r20, 0xFF	; 255
     214:	61 e8       	ldi	r22, 0x81	; 129
     216:	71 e0       	ldi	r23, 0x01	; 1
     218:	84 e0       	ldi	r24, 0x04	; 4
     21a:	a0 c3       	rjmp	.+1856   	; 0x95c <displayLCD_main>
     21c:	08 95       	ret

0000021e <displayNoResp>:
Description:Displays "no connection" to Slave depending if first or 
			a subsequent measurement
******************************************************************** */
void displayNoResp ( uint8_t f_meas_available )
{
	if (f_meas_available == 0) // If no previous measurements available
     21e:	81 11       	cpse	r24, r1
     220:	09 c0       	rjmp	.+18     	; 0x234 <displayNoResp+0x16>
	{
		clearScreen();
     222:	9e d3       	rcall	.+1852   	; 0x960 <clearScreen>
		displayLCD_main(1, "No resp. from Eagle.", NONE, "NONE" ); // No resp. from Eagle. on line 1
     224:	23 e0       	ldi	r18, 0x03	; 3
     226:	31 e0       	ldi	r19, 0x01	; 1
     228:	4f ef       	ldi	r20, 0xFF	; 255
     22a:	63 eb       	ldi	r22, 0xB3	; 179
     22c:	71 e0       	ldi	r23, 0x01	; 1
     22e:	81 e0       	ldi	r24, 0x01	; 1
     230:	95 c3       	rjmp	.+1834   	; 0x95c <displayLCD_main>
     232:	08 95       	ret
	}
	else	// If previous measurements available
	{
		displayLCD_main(4, "No resp. from Eagle.", NONE, "NONE" ); // No resp. from Eagle. on line 4
     234:	23 e0       	ldi	r18, 0x03	; 3
     236:	31 e0       	ldi	r19, 0x01	; 1
     238:	4f ef       	ldi	r20, 0xFF	; 255
     23a:	63 eb       	ldi	r22, 0xB3	; 179
     23c:	71 e0       	ldi	r23, 0x01	; 1
     23e:	84 e0       	ldi	r24, 0x04	; 4
     240:	8d c3       	rjmp	.+1818   	; 0x95c <displayLCD_main>
     242:	08 95       	ret

00000244 <init_SPI>:
Outputs:	none
Description:Initialization of SPI pins
******************************************************************** */
void init_SPI()
{
	DDRB |= (1<<CEPin) | (1<<SSPin) | (1<<SCKPin) | (1<<MOSIPin) ;  //set MOSI, clock and SlaveSelect as output
     244:	84 b1       	in	r24, 0x04	; 4
     246:	8e 62       	ori	r24, 0x2E	; 46
     248:	84 b9       	out	0x04, r24	; 4
	DDRB &= ~(1<<MISOPin);											//Set MOSI[MISO of nRF] as Input
     24a:	24 98       	cbi	0x04, 4	; 4

	SPCR |= (1 << SPE) | (1 << MSTR); // | (1 << SPR0);					// Enable SPI as master
     24c:	8c b5       	in	r24, 0x2c	; 44
     24e:	80 65       	ori	r24, 0x50	; 80
     250:	8c bd       	out	0x2c, r24	; 44
	
	set_SS_high;							//SlaveSelect To HIGH- not sending any command
     252:	2a 9a       	sbi	0x05, 2	; 5
	set_CE_low;								//CE Pin Low
     254:	29 98       	cbi	0x05, 1	; 5
     256:	08 95       	ret

00000258 <spi_tranceiver>:
Description:Reads the SPI transceiver buffer
******************************************************************** */
uint8_t spi_tranceiver (uint8_t data)
{
	/* Load data in the buffer */
	SPDR = data;
     258:	8e bd       	out	0x2e, r24	; 46
	/* Wait for the complete transmission */
	while(!(SPSR & (1<<SPIF)));
     25a:	0d b4       	in	r0, 0x2d	; 45
     25c:	07 fe       	sbrs	r0, 7
     25e:	fd cf       	rjmp	.-6      	; 0x25a <spi_tranceiver+0x2>
	/* Return received data */
	return(SPDR);
     260:	8e b5       	in	r24, 0x2e	; 46
}
     262:	08 95       	ret

00000264 <GetReg>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     264:	95 e3       	ldi	r25, 0x35	; 53
     266:	9a 95       	dec	r25
     268:	f1 f7       	brne	.-4      	; 0x266 <GetReg+0x2>
     26a:	00 00       	nop
Description:Reads the called register
******************************************************************** */
uint8_t GetReg(uint8_t reg)
{
	_delay_us(10);						//Delay for 10us
	set_SS_low;							//Set SS Low - nRf starts listening for commands 10us after SS Low
     26c:	2a 98       	cbi	0x05, 2	; 5
     26e:	90 e4       	ldi	r25, 0x40	; 64
     270:	9a 95       	dec	r25
     272:	f1 f7       	brne	.-4      	; 0x270 <GetReg+0xc>
	_delay_us(12);						//Delay for 12us
	spi_tranceiver(R_REGISTER + reg);	//R_Register --> Set to Reading Mode, "reg" --> The registry which will be read
     274:	f1 df       	rcall	.-30     	; 0x258 <spi_tranceiver>
     276:	80 e4       	ldi	r24, 0x40	; 64
     278:	8a 95       	dec	r24
     27a:	f1 f7       	brne	.-4      	; 0x278 <GetReg+0x14>
	_delay_us(12);						//Dealy 12us
	reg = spi_tranceiver(NOP);			//Send DUMMY BYTE[NOP] to receive first byte in 'reg' register
     27c:	8f ef       	ldi	r24, 0xFF	; 255
     27e:	ec df       	rcall	.-40     	; 0x258 <spi_tranceiver>
     280:	90 e4       	ldi	r25, 0x40	; 64
     282:	9a 95       	dec	r25
     284:	f1 f7       	brne	.-4      	; 0x282 <GetReg+0x1e>
	_delay_us(12);						//Delay 12us
	set_SS_high;						//SS High
     286:	2a 9a       	sbi	0x05, 2	; 5
	return reg;							//Return the registry read
}
     288:	08 95       	ret

0000028a <reset>:
     28a:	85 e3       	ldi	r24, 0x35	; 53
     28c:	8a 95       	dec	r24
     28e:	f1 f7       	brne	.-4      	; 0x28c <reset+0x2>
     290:	00 00       	nop
Description:resets the STATUS register of interrupt flags
******************************************************************** */
void reset(void)
{
	_delay_us(10);
	set_SS_low;
     292:	2a 98       	cbi	0x05, 2	; 5
     294:	85 e3       	ldi	r24, 0x35	; 53
     296:	8a 95       	dec	r24
     298:	f1 f7       	brne	.-4      	; 0x296 <reset+0xc>
     29a:	00 00       	nop
	_delay_us(10);
	spi_tranceiver(W_REGISTER+STATUS);
     29c:	87 e2       	ldi	r24, 0x27	; 39
     29e:	dc df       	rcall	.-72     	; 0x258 <spi_tranceiver>
     2a0:	85 e3       	ldi	r24, 0x35	; 53
     2a2:	8a 95       	dec	r24
     2a4:	f1 f7       	brne	.-4      	; 0x2a2 <reset+0x18>
     2a6:	00 00       	nop
	_delay_us(10);
	spi_tranceiver(0x70);
     2a8:	80 e7       	ldi	r24, 0x70	; 112
     2aa:	d6 df       	rcall	.-84     	; 0x258 <spi_tranceiver>
     2ac:	85 e3       	ldi	r24, 0x35	; 53
     2ae:	8a 95       	dec	r24
     2b0:	f1 f7       	brne	.-4      	; 0x2ae <reset+0x24>
     2b2:	00 00       	nop
	_delay_us(10);
	set_SS_high;
     2b4:	2a 9a       	sbi	0x05, 2	; 5
     2b6:	08 95       	ret

000002b8 <WriteToNrf>:
Inputs:		Read/Write command, name of register to be read, payload to be transmitted and length of payload
Outputs:	pointer to RX buffer
Description:controls the transmission or reception of payload over radio
******************************************************************** */
uint8_t *WriteToNrf(uint8_t ReadWrite, uint8_t reg, uint8_t *val, uint8_t antVal)
{
     2b8:	bf 92       	push	r11
     2ba:	cf 92       	push	r12
     2bc:	df 92       	push	r13
     2be:	ef 92       	push	r14
     2c0:	ff 92       	push	r15
     2c2:	0f 93       	push	r16
     2c4:	1f 93       	push	r17
     2c6:	cf 93       	push	r28
     2c8:	df 93       	push	r29
     2ca:	d8 2e       	mov	r13, r24
     2cc:	c6 2e       	mov	r12, r22
     2ce:	b4 2e       	mov	r11, r20
     2d0:	f5 2e       	mov	r15, r21
     2d2:	e2 2e       	mov	r14, r18
	//ReadWrite --> "R" or "W", reg --> 'register', *val --> array with package, antVal --> number of int in array
	if(ReadWrite == W)//If it is in READMODE, then addr is already 0x00
     2d4:	81 e0       	ldi	r24, 0x01	; 1
     2d6:	d8 12       	cpse	r13, r24
     2d8:	02 c0       	rjmp	.+4      	; 0x2de <WriteToNrf+0x26>
	{
		reg = W_REGISTER + reg;
     2da:	90 e2       	ldi	r25, 0x20	; 32
     2dc:	c9 0e       	add	r12, r25
     2de:	e5 e3       	ldi	r30, 0x35	; 53
     2e0:	ea 95       	dec	r30
     2e2:	f1 f7       	brne	.-4      	; 0x2e0 <WriteToNrf+0x28>
     2e4:	00 00       	nop
	}
	static uint8_t ret[32];	//Array to be returned in the end

	_delay_us(10);						//Delay for 10us
	set_SS_low;							//Set SlaveSelect Low - nRf starts listening for commands 10us after CSN Low
     2e6:	2a 98       	cbi	0x05, 2	; 5
     2e8:	f0 e4       	ldi	r31, 0x40	; 64
     2ea:	fa 95       	dec	r31
     2ec:	f1 f7       	brne	.-4      	; 0x2ea <WriteToNrf+0x32>
	_delay_us(12);						//Delay for 12us
	spi_tranceiver(reg);				//"reg" --> Set nRf to write or read mode
     2ee:	8c 2d       	mov	r24, r12
     2f0:	b3 df       	rcall	.-154    	; 0x258 <spi_tranceiver>
     2f2:	85 e3       	ldi	r24, 0x35	; 53
     2f4:	8a 95       	dec	r24
     2f6:	f1 f7       	brne	.-4      	; 0x2f4 <WriteToNrf+0x3c>
     2f8:	00 00       	nop
	_delay_us(10);
	
	for(int i = 0; i<antVal; i++)
     2fa:	ee 20       	and	r14, r14
     2fc:	21 f1       	breq	.+72     	; 0x346 <WriteToNrf+0x8e>
     2fe:	c8 e0       	ldi	r28, 0x08	; 8
     300:	d2 e0       	ldi	r29, 0x02	; 2
     302:	0b 2d       	mov	r16, r11
     304:	1f 2d       	mov	r17, r15
     306:	2e 2d       	mov	r18, r14
     308:	30 e0       	ldi	r19, 0x00	; 0
     30a:	f9 01       	movw	r30, r18
     30c:	e8 5f       	subi	r30, 0xF8	; 248
     30e:	fd 4f       	sbci	r31, 0xFD	; 253
     310:	7f 01       	movw	r14, r30
	{
		if(ReadWrite == R && reg != W_TX_PAYLOAD)
     312:	d1 10       	cpse	r13, r1
     314:	0b c0       	rjmp	.+22     	; 0x32c <WriteToNrf+0x74>
     316:	f0 ea       	ldi	r31, 0xA0	; 160
     318:	cf 16       	cp	r12, r31
     31a:	41 f0       	breq	.+16     	; 0x32c <WriteToNrf+0x74>
		{
			//READ A REGISTRY
			ret[i] = spi_tranceiver(NOP);		//Send dummy Byte to read data
     31c:	8f ef       	ldi	r24, 0xFF	; 255
     31e:	9c df       	rcall	.-200    	; 0x258 <spi_tranceiver>
     320:	88 83       	st	Y, r24
     322:	85 e3       	ldi	r24, 0x35	; 53
     324:	8a 95       	dec	r24
     326:	f1 f7       	brne	.-4      	; 0x324 <WriteToNrf+0x6c>
     328:	00 00       	nop
     32a:	07 c0       	rjmp	.+14     	; 0x33a <WriteToNrf+0x82>
			_delay_us(10);
		}
		else
		{
			//Write to nRF
			spi_tranceiver(val[i]);			//Send command one at a time
     32c:	f8 01       	movw	r30, r16
     32e:	80 81       	ld	r24, Z
     330:	93 df       	rcall	.-218    	; 0x258 <spi_tranceiver>
     332:	f5 e3       	ldi	r31, 0x35	; 53
     334:	fa 95       	dec	r31
     336:	f1 f7       	brne	.-4      	; 0x334 <WriteToNrf+0x7c>
     338:	00 00       	nop
     33a:	21 96       	adiw	r28, 0x01	; 1
     33c:	0f 5f       	subi	r16, 0xFF	; 255
     33e:	1f 4f       	sbci	r17, 0xFF	; 255
	set_SS_low;							//Set SlaveSelect Low - nRf starts listening for commands 10us after CSN Low
	_delay_us(12);						//Delay for 12us
	spi_tranceiver(reg);				//"reg" --> Set nRf to write or read mode
	_delay_us(10);
	
	for(int i = 0; i<antVal; i++)
     340:	ce 15       	cp	r28, r14
     342:	df 05       	cpc	r29, r15
     344:	31 f7       	brne	.-52     	; 0x312 <WriteToNrf+0x5a>
			//Write to nRF
			spi_tranceiver(val[i]);			//Send command one at a time
			_delay_us(10);
		}
	}
	set_SS_high;				//nRf into IDLE with CSN HIGH
     346:	2a 9a       	sbi	0x05, 2	; 5
	return ret;					//Return the data read
}
     348:	88 e0       	ldi	r24, 0x08	; 8
     34a:	92 e0       	ldi	r25, 0x02	; 2
     34c:	df 91       	pop	r29
     34e:	cf 91       	pop	r28
     350:	1f 91       	pop	r17
     352:	0f 91       	pop	r16
     354:	ff 90       	pop	r15
     356:	ef 90       	pop	r14
     358:	df 90       	pop	r13
     35a:	cf 90       	pop	r12
     35c:	bf 90       	pop	r11
     35e:	08 95       	ret

00000360 <init_nrf24l01>:
Inputs:		none
Outputs:	none
Description:initializes the nrf module for general purpose (RX / TX)
******************************************************************** */
void init_nrf24l01(void)
{
     360:	1f 93       	push	r17
     362:	cf 93       	push	r28
     364:	df 93       	push	r29
     366:	00 d0       	rcall	.+0      	; 0x368 <init_nrf24l01+0x8>
     368:	00 d0       	rcall	.+0      	; 0x36a <init_nrf24l01+0xa>
     36a:	1f 92       	push	r1
     36c:	cd b7       	in	r28, 0x3d	; 61
     36e:	de b7       	in	r29, 0x3e	; 62
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     370:	8f e3       	ldi	r24, 0x3F	; 63
     372:	9c e9       	ldi	r25, 0x9C	; 156
     374:	01 97       	sbiw	r24, 0x01	; 1
     376:	f1 f7       	brne	.-4      	; 0x374 <init_nrf24l01+0x14>
     378:	00 c0       	rjmp	.+0      	; 0x37a <init_nrf24l01+0x1a>
     37a:	00 00       	nop
	_delay_ms(10);
	uint8_t val[5];
	val[0] = 0x70;		WriteToNrf(W,CONFIG,val,1);		//Set PRIM_RX in CONFIG reg to LOW [DONT POWER UP THE RADIO i.e keep it in power down mode]
     37c:	80 e7       	ldi	r24, 0x70	; 112
     37e:	89 83       	std	Y+1, r24	; 0x01
     380:	21 e0       	ldi	r18, 0x01	; 1
     382:	ae 01       	movw	r20, r28
     384:	4f 5f       	subi	r20, 0xFF	; 255
     386:	5f 4f       	sbci	r21, 0xFF	; 255
     388:	60 e0       	ldi	r22, 0x00	; 0
     38a:	81 e0       	ldi	r24, 0x01	; 1
     38c:	95 df       	rcall	.-214    	; 0x2b8 <WriteToNrf>
	val[0] = 0x01;		WriteToNrf(W,EN_AA,val,1);		//Enable Auto Ack on Data Pipe 0
     38e:	11 e0       	ldi	r17, 0x01	; 1
     390:	19 83       	std	Y+1, r17	; 0x01
     392:	21 e0       	ldi	r18, 0x01	; 1
     394:	ae 01       	movw	r20, r28
     396:	4f 5f       	subi	r20, 0xFF	; 255
     398:	5f 4f       	sbci	r21, 0xFF	; 255
     39a:	61 e0       	ldi	r22, 0x01	; 1
     39c:	81 e0       	ldi	r24, 0x01	; 1
     39e:	8c df       	rcall	.-232    	; 0x2b8 <WriteToNrf>
	val[0] = 0x01;		WriteToNrf(W,EN_RXADDR,val,1);	//Enable Data Pipe 0	
     3a0:	19 83       	std	Y+1, r17	; 0x01
     3a2:	21 e0       	ldi	r18, 0x01	; 1
     3a4:	ae 01       	movw	r20, r28
     3a6:	4f 5f       	subi	r20, 0xFF	; 255
     3a8:	5f 4f       	sbci	r21, 0xFF	; 255
     3aa:	62 e0       	ldi	r22, 0x02	; 2
     3ac:	81 e0       	ldi	r24, 0x01	; 1
     3ae:	84 df       	rcall	.-248    	; 0x2b8 <WriteToNrf>
	val[0] = 0x03;		WriteToNrf(W,SETUP_AW,val,1);	//Set Address Width as 5Bytes
     3b0:	83 e0       	ldi	r24, 0x03	; 3
     3b2:	89 83       	std	Y+1, r24	; 0x01
     3b4:	21 e0       	ldi	r18, 0x01	; 1
     3b6:	ae 01       	movw	r20, r28
     3b8:	4f 5f       	subi	r20, 0xFF	; 255
     3ba:	5f 4f       	sbci	r21, 0xFF	; 255
     3bc:	63 e0       	ldi	r22, 0x03	; 3
     3be:	81 e0       	ldi	r24, 0x01	; 1
     3c0:	7b df       	rcall	.-266    	; 0x2b8 <WriteToNrf>
	val[0] = 0x2F;		WriteToNrf(W,SETUP_RETR,val,1);	//Set up Retries
     3c2:	8f e2       	ldi	r24, 0x2F	; 47
     3c4:	89 83       	std	Y+1, r24	; 0x01
     3c6:	21 e0       	ldi	r18, 0x01	; 1
     3c8:	ae 01       	movw	r20, r28
     3ca:	4f 5f       	subi	r20, 0xFF	; 255
     3cc:	5f 4f       	sbci	r21, 0xFF	; 255
     3ce:	64 e0       	ldi	r22, 0x04	; 4
     3d0:	81 e0       	ldi	r24, 0x01	; 1
     3d2:	72 df       	rcall	.-284    	; 0x2b8 <WriteToNrf>
	val[0] = 0x7A;		WriteToNrf(W,RF_CH,val,1);		//Set the CH
     3d4:	8a e7       	ldi	r24, 0x7A	; 122
     3d6:	89 83       	std	Y+1, r24	; 0x01
     3d8:	21 e0       	ldi	r18, 0x01	; 1
     3da:	ae 01       	movw	r20, r28
     3dc:	4f 5f       	subi	r20, 0xFF	; 255
     3de:	5f 4f       	sbci	r21, 0xFF	; 255
     3e0:	65 e0       	ldi	r22, 0x05	; 5
     3e2:	81 e0       	ldi	r24, 0x01	; 1
     3e4:	69 df       	rcall	.-302    	; 0x2b8 <WriteToNrf>
	val[0] = 0x26;		WriteToNrf(W,RF_SETUP,val,1);	//Set transfer rate	
     3e6:	86 e2       	ldi	r24, 0x26	; 38
     3e8:	89 83       	std	Y+1, r24	; 0x01
     3ea:	21 e0       	ldi	r18, 0x01	; 1
     3ec:	ae 01       	movw	r20, r28
     3ee:	4f 5f       	subi	r20, 0xFF	; 255
     3f0:	5f 4f       	sbci	r21, 0xFF	; 255
     3f2:	66 e0       	ldi	r22, 0x06	; 6
     3f4:	81 e0       	ldi	r24, 0x01	; 1
     3f6:	60 df       	rcall	.-320    	; 0x2b8 <WriteToNrf>
	for(int i = 0;i<5;i++) { val[i] = 0x12; } 
     3f8:	82 e1       	ldi	r24, 0x12	; 18
     3fa:	89 83       	std	Y+1, r24	; 0x01
     3fc:	8a 83       	std	Y+2, r24	; 0x02
     3fe:	8b 83       	std	Y+3, r24	; 0x03
     400:	8c 83       	std	Y+4, r24	; 0x04
		WriteToNrf(W,RX_ADDR_P0,val,5);					//Set Data Pipe 1 Addr
     402:	8d 83       	std	Y+5, r24	; 0x05
     404:	25 e0       	ldi	r18, 0x05	; 5
     406:	ae 01       	movw	r20, r28
     408:	4f 5f       	subi	r20, 0xFF	; 255
     40a:	5f 4f       	sbci	r21, 0xFF	; 255
     40c:	6a e0       	ldi	r22, 0x0A	; 10
     40e:	81 e0       	ldi	r24, 0x01	; 1
		WriteToNrf(W,TX_ADDR,val,5);					//Clock the addr of the receiving node in TX_ADDR
     410:	53 df       	rcall	.-346    	; 0x2b8 <WriteToNrf>
     412:	25 e0       	ldi	r18, 0x05	; 5
     414:	ae 01       	movw	r20, r28
     416:	4f 5f       	subi	r20, 0xFF	; 255
     418:	5f 4f       	sbci	r21, 0xFF	; 255
     41a:	60 e1       	ldi	r22, 0x10	; 16
     41c:	81 e0       	ldi	r24, 0x01	; 1
	val[0] = 0x5;			WriteToNrf(W,RX_PW_P0,val,1);	//Set correct payload width[4 bytes]
     41e:	4c df       	rcall	.-360    	; 0x2b8 <WriteToNrf>
     420:	85 e0       	ldi	r24, 0x05	; 5
     422:	89 83       	std	Y+1, r24	; 0x01
     424:	21 e0       	ldi	r18, 0x01	; 1
     426:	ae 01       	movw	r20, r28
     428:	4f 5f       	subi	r20, 0xFF	; 255
     42a:	5f 4f       	sbci	r21, 0xFF	; 255
     42c:	61 e1       	ldi	r22, 0x11	; 17
     42e:	81 e0       	ldi	r24, 0x01	; 1
     430:	43 df       	rcall	.-378    	; 0x2b8 <WriteToNrf>
}
     432:	0f 90       	pop	r0
     434:	0f 90       	pop	r0
     436:	0f 90       	pop	r0
     438:	0f 90       	pop	r0
     43a:	0f 90       	pop	r0
     43c:	df 91       	pop	r29
     43e:	cf 91       	pop	r28
     440:	1f 91       	pop	r17
     442:	08 95       	ret

00000444 <init_nrf24l01_rx>:
Inputs:		none
Outputs:	none
Description:initializes the nrf module as receiver
******************************************************************** */
void init_nrf24l01_rx(void)
{
     444:	cf 93       	push	r28
     446:	df 93       	push	r29
     448:	1f 92       	push	r1
     44a:	cd b7       	in	r28, 0x3d	; 61
     44c:	de b7       	in	r29, 0x3e	; 62
     44e:	2f ef       	ldi	r18, 0xFF	; 255
     450:	83 ec       	ldi	r24, 0xC3	; 195
     452:	99 e0       	ldi	r25, 0x09	; 9
     454:	21 50       	subi	r18, 0x01	; 1
     456:	80 40       	sbci	r24, 0x00	; 0
     458:	90 40       	sbci	r25, 0x00	; 0
     45a:	e1 f7       	brne	.-8      	; 0x454 <init_nrf24l01_rx+0x10>
     45c:	00 c0       	rjmp	.+0      	; 0x45e <init_nrf24l01_rx+0x1a>
     45e:	00 00       	nop
	_delay_ms(200);
	uint8_t val[1];
	val[0] = 0x1F;		WriteToNrf(W,CONFIG,val,1);		//Power up Radio as receiver
     460:	8f e1       	ldi	r24, 0x1F	; 31
     462:	89 83       	std	Y+1, r24	; 0x01
     464:	21 e0       	ldi	r18, 0x01	; 1
     466:	ae 01       	movw	r20, r28
     468:	4f 5f       	subi	r20, 0xFF	; 255
     46a:	5f 4f       	sbci	r21, 0xFF	; 255
     46c:	60 e0       	ldi	r22, 0x00	; 0
     46e:	81 e0       	ldi	r24, 0x01	; 1
     470:	23 df       	rcall	.-442    	; 0x2b8 <WriteToNrf>
     472:	2f ef       	ldi	r18, 0xFF	; 255
     474:	83 ec       	ldi	r24, 0xC3	; 195
     476:	99 e0       	ldi	r25, 0x09	; 9
     478:	21 50       	subi	r18, 0x01	; 1
     47a:	80 40       	sbci	r24, 0x00	; 0
     47c:	90 40       	sbci	r25, 0x00	; 0
     47e:	e1 f7       	brne	.-8      	; 0x478 <init_nrf24l01_rx+0x34>
     480:	00 c0       	rjmp	.+0      	; 0x482 <init_nrf24l01_rx+0x3e>
     482:	00 00       	nop
	_delay_ms(200);
}
     484:	0f 90       	pop	r0
     486:	df 91       	pop	r29
     488:	cf 91       	pop	r28
     48a:	08 95       	ret

0000048c <turnOff_nrf24l01>:
Inputs:		none
Outputs:	none
Description:Turns off the Radio module
******************************************************************** */
void turnOff_nrf24l01(void)
{
     48c:	cf 93       	push	r28
     48e:	df 93       	push	r29
     490:	1f 92       	push	r1
     492:	cd b7       	in	r28, 0x3d	; 61
     494:	de b7       	in	r29, 0x3e	; 62
     496:	8f e3       	ldi	r24, 0x3F	; 63
     498:	9c e9       	ldi	r25, 0x9C	; 156
     49a:	01 97       	sbiw	r24, 0x01	; 1
     49c:	f1 f7       	brne	.-4      	; 0x49a <turnOff_nrf24l01+0xe>
     49e:	00 c0       	rjmp	.+0      	; 0x4a0 <turnOff_nrf24l01+0x14>
     4a0:	00 00       	nop
	_delay_ms(10);
	uint8_t val[1];
	val[0] = 0x00;		WriteToNrf(W,CONFIG,val,1);		//Power down Radio
     4a2:	19 82       	std	Y+1, r1	; 0x01
     4a4:	21 e0       	ldi	r18, 0x01	; 1
     4a6:	ae 01       	movw	r20, r28
     4a8:	4f 5f       	subi	r20, 0xFF	; 255
     4aa:	5f 4f       	sbci	r21, 0xFF	; 255
     4ac:	60 e0       	ldi	r22, 0x00	; 0
     4ae:	81 e0       	ldi	r24, 0x01	; 1
     4b0:	03 df       	rcall	.-506    	; 0x2b8 <WriteToNrf>
     4b2:	8f e3       	ldi	r24, 0x3F	; 63
     4b4:	9c e9       	ldi	r25, 0x9C	; 156
     4b6:	01 97       	sbiw	r24, 0x01	; 1
     4b8:	f1 f7       	brne	.-4      	; 0x4b6 <turnOff_nrf24l01+0x2a>
     4ba:	00 c0       	rjmp	.+0      	; 0x4bc <turnOff_nrf24l01+0x30>
     4bc:	00 00       	nop
	_delay_ms(10);
}
     4be:	0f 90       	pop	r0
     4c0:	df 91       	pop	r29
     4c2:	cf 91       	pop	r28
     4c4:	08 95       	ret

000004c6 <receive_data>:
     4c6:	8f e3       	ldi	r24, 0x3F	; 63
     4c8:	9c e9       	ldi	r25, 0x9C	; 156
     4ca:	01 97       	sbiw	r24, 0x01	; 1
     4cc:	f1 f7       	brne	.-4      	; 0x4ca <receive_data+0x4>
     4ce:	00 c0       	rjmp	.+0      	; 0x4d0 <receive_data+0xa>
     4d0:	00 00       	nop
Description:Scans the air channel for possible signals
******************************************************************** */
void receive_data(void)
{
	_delay_ms(10);
	set_CE_high;
     4d2:	29 9a       	sbi	0x05, 1	; 5
     4d4:	9f ef       	ldi	r25, 0xFF	; 255
     4d6:	27 ea       	ldi	r18, 0xA7	; 167
     4d8:	81 e6       	ldi	r24, 0x61	; 97
     4da:	91 50       	subi	r25, 0x01	; 1
     4dc:	20 40       	sbci	r18, 0x00	; 0
     4de:	80 40       	sbci	r24, 0x00	; 0
     4e0:	e1 f7       	brne	.-8      	; 0x4da <receive_data+0x14>
     4e2:	00 c0       	rjmp	.+0      	; 0x4e4 <receive_data+0x1e>
     4e4:	00 00       	nop
	_delay_ms(2000);
	set_CE_low;
     4e6:	29 98       	cbi	0x05, 1	; 5
     4e8:	8f e3       	ldi	r24, 0x3F	; 63
     4ea:	9c e9       	ldi	r25, 0x9C	; 156
     4ec:	01 97       	sbiw	r24, 0x01	; 1
     4ee:	f1 f7       	brne	.-4      	; 0x4ec <receive_data+0x26>
     4f0:	00 c0       	rjmp	.+0      	; 0x4f2 <receive_data+0x2c>
     4f2:	00 00       	nop
     4f4:	08 95       	ret

000004f6 <PwrMngmnt_init>:
Description:initialization of power management / watchdog
******************************************************************** */
void PwrMngmnt_init(void)
{
	/* Disable global interrupts */
	cli(); 
     4f6:	f8 94       	cli
	
	/* Clear the reset flag. */
	MCUSR &= ~(1<<WDRF); // WDRF is set if a WDG system reset occurs
     4f8:	84 b7       	in	r24, 0x34	; 52
     4fa:	87 7f       	andi	r24, 0xF7	; 247
     4fc:	84 bf       	out	0x34, r24	; 52
  
	/* In order to change WDE or the prescaler, we need to
	* set WDCE (This will allow updates for 4 clock cycles).
	*/
	WDTCSR |= (1<<WDCE) | (1<<WDE);
     4fe:	e0 e6       	ldi	r30, 0x60	; 96
     500:	f0 e0       	ldi	r31, 0x00	; 0
     502:	80 81       	ld	r24, Z
     504:	88 61       	ori	r24, 0x18	; 24
     506:	80 83       	st	Z, r24

	/* set new watchdog timeout prescaler value */
	WDTCSR = 1<<WDP0 | 1<<WDP3; /* 8.0 seconds */
     508:	81 e2       	ldi	r24, 0x21	; 33
     50a:	80 83       	st	Z, r24
  
	/* Enable global interrupts */
	sei();
     50c:	78 94       	sei
	
	/* Enable watchdog interrupt */
	WDTCSR |= (1 << WDIE);
     50e:	80 81       	ld	r24, Z
     510:	80 64       	ori	r24, 0x40	; 64
     512:	80 83       	st	Z, r24
     514:	08 95       	ret

00000516 <enterSleep>:
Description:configures the sleep mode
******************************************************************** */
void enterSleep(void)
{
	/* Set sleep mode */
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
     516:	83 b7       	in	r24, 0x33	; 51
     518:	81 7f       	andi	r24, 0xF1	; 241
     51a:	84 60       	ori	r24, 0x04	; 4
     51c:	83 bf       	out	0x33, r24	; 51

	/* Enable sleep */
	sleep_enable();
     51e:	83 b7       	in	r24, 0x33	; 51
     520:	81 60       	ori	r24, 0x01	; 1
     522:	83 bf       	out	0x33, r24	; 51
  
	/* Now enter sleep mode. */
	sleep_mode();
     524:	83 b7       	in	r24, 0x33	; 51
     526:	81 60       	ori	r24, 0x01	; 1
     528:	83 bf       	out	0x33, r24	; 51
     52a:	88 95       	sleep
     52c:	83 b7       	in	r24, 0x33	; 51
     52e:	8e 7f       	andi	r24, 0xFE	; 254
     530:	83 bf       	out	0x33, r24	; 51

	/* The program will continue from here after the WDT timeout*/
	sleep_disable(); /* First thing to do is disable sleep. */
     532:	83 b7       	in	r24, 0x33	; 51
     534:	8e 7f       	andi	r24, 0xFE	; 254
     536:	83 bf       	out	0x33, r24	; 51
static __inline void
__attribute__ ((__always_inline__))
__power_all_enable()
{
#ifdef __AVR_HAVE_PRR
    PRR &= (uint8_t)~(__AVR_HAVE_PRR);
     538:	e4 e6       	ldi	r30, 0x64	; 100
     53a:	f0 e0       	ldi	r31, 0x00	; 0
     53c:	80 81       	ld	r24, Z
     53e:	80 71       	andi	r24, 0x10	; 16
     540:	80 83       	st	Z, r24
     542:	08 95       	ret

00000544 <PwrMngmnt_main>:
Description:main function of power management
******************************************************************** */
void PwrMngmnt_main(void)
{
	/* Initialize watchdog */
	PwrMngmnt_init();
     544:	d8 df       	rcall	.-80     	; 0x4f6 <PwrMngmnt_init>

	/* Re-enter sleep mode. */
	enterSleep();
     546:	e7 cf       	rjmp	.-50     	; 0x516 <enterSleep>
     548:	08 95       	ret

0000054a <configLCDPorts>:
     54a:	8a b1       	in	r24, 0x0a	; 10
Description:maps the data and control pins to the uC i/o ports
******************************************************************** */
void configLCDPorts(void)
{
	/* configure the microprocessor pins for the data lines */
	lcd_Data_DDR |= (1<<lcd_D7_bit) | (1<<lcd_D6_bit) | (1<<lcd_D5_bit) | (1<<lcd_D4_bit);
     54c:	80 6f       	ori	r24, 0xF0	; 240
     54e:	8a b9       	out	0x0a, r24	; 10
	
	/* configure the microprocessor pins for the control lines */
	lcd_Ctlr_DDR |= (1<<lcd_RW_bit) | (1<<lcd_RS_bit) | (1<<lcd_E_bit);
     550:	8a b1       	in	r24, 0x0a	; 10
     552:	8b 60       	ori	r24, 0x0B	; 11
     554:	8a b9       	out	0x0a, r24	; 10
	
	/* Turn on LCD */
	DDRB |= (1<<lcd_ONOFF_bit);
     556:	20 9a       	sbi	0x04, 0	; 4
     558:	08 95       	ret

0000055a <lcd_write_4>:
			RS is configured for the expected register
			E is low, RW is low
			uses either time delays or the busy flag
******************************************************************** */
void lcd_write_4(uint8_t theNibble)
{
     55a:	cf 93       	push	r28
     55c:	df 93       	push	r29
     55e:	00 d0       	rcall	.+0      	; 0x560 <lcd_write_4+0x6>
     560:	00 d0       	rcall	.+0      	; 0x562 <lcd_write_4+0x8>
     562:	cd b7       	in	r28, 0x3d	; 61
     564:	de b7       	in	r29, 0x3e	; 62
	uint8_t mask[4] = {0};
     566:	19 82       	std	Y+1, r1	; 0x01
     568:	1a 82       	std	Y+2, r1	; 0x02
     56a:	1b 82       	std	Y+3, r1	; 0x03
     56c:	1c 82       	std	Y+4, r1	; 0x04
     56e:	fe 01       	movw	r30, r28
     570:	31 96       	adiw	r30, 0x01	; 1
     572:	27 e0       	ldi	r18, 0x07	; 7
     574:	30 e0       	ldi	r19, 0x00	; 0
	for (uint8_t i = 0; i < 4; i++)
	{
		if (theNibble & 1 << (7 - i))
     576:	90 e0       	ldi	r25, 0x00	; 0
		{
			mask[i] = 1;
     578:	61 e0       	ldi	r22, 0x01	; 1
void lcd_write_4(uint8_t theNibble)
{
	uint8_t mask[4] = {0};
	for (uint8_t i = 0; i < 4; i++)
	{
		if (theNibble & 1 << (7 - i))
     57a:	ac 01       	movw	r20, r24
     57c:	02 2e       	mov	r0, r18
     57e:	02 c0       	rjmp	.+4      	; 0x584 <lcd_write_4+0x2a>
     580:	55 95       	asr	r21
     582:	47 95       	ror	r20
     584:	0a 94       	dec	r0
     586:	e2 f7       	brpl	.-8      	; 0x580 <lcd_write_4+0x26>
     588:	40 fd       	sbrc	r20, 0
		{
			mask[i] = 1;
     58a:	60 83       	st	Z, r22
     58c:	21 50       	subi	r18, 0x01	; 1
     58e:	31 09       	sbc	r19, r1
     590:	31 96       	adiw	r30, 0x01	; 1
			uses either time delays or the busy flag
******************************************************************** */
void lcd_write_4(uint8_t theNibble)
{
	uint8_t mask[4] = {0};
	for (uint8_t i = 0; i < 4; i++)
     592:	23 30       	cpi	r18, 0x03	; 3
     594:	31 05       	cpc	r19, r1
     596:	89 f7       	brne	.-30     	; 0x57a <lcd_write_4+0x20>
			mask[i] = 1;
		}
	}
	
	/* Clear bits in first step */
	lcd_Data_Port &= ~((1 << lcd_D7_bit) | (1 << lcd_D6_bit) | (1 << lcd_D5_bit) | (1 << lcd_D4_bit));
     598:	8b b1       	in	r24, 0x0b	; 11
     59a:	8f 70       	andi	r24, 0x0F	; 15
     59c:	8b b9       	out	0x0b, r24	; 11

	/* Set bits where necessary */
	lcd_Data_Port |= ((mask[0]) << lcd_D7_bit | (mask[1]) << lcd_D6_bit | (mask[2]) << lcd_D5_bit | (mask[3]) << lcd_D4_bit);
     59e:	2b b1       	in	r18, 0x0b	; 11
     5a0:	49 81       	ldd	r20, Y+1	; 0x01
     5a2:	30 e8       	ldi	r19, 0x80	; 128
     5a4:	43 9f       	mul	r20, r19
     5a6:	c0 01       	movw	r24, r0
     5a8:	11 24       	eor	r1, r1
     5aa:	9a 81       	ldd	r25, Y+2	; 0x02
     5ac:	30 e4       	ldi	r19, 0x40	; 64
     5ae:	93 9f       	mul	r25, r19
     5b0:	a0 01       	movw	r20, r0
     5b2:	11 24       	eor	r1, r1
     5b4:	48 2b       	or	r20, r24
     5b6:	42 2b       	or	r20, r18
     5b8:	9b 81       	ldd	r25, Y+3	; 0x03
     5ba:	80 e2       	ldi	r24, 0x20	; 32
     5bc:	98 9f       	mul	r25, r24
     5be:	90 01       	movw	r18, r0
     5c0:	11 24       	eor	r1, r1
     5c2:	24 2b       	or	r18, r20
     5c4:	9c 81       	ldd	r25, Y+4	; 0x04
     5c6:	30 e1       	ldi	r19, 0x10	; 16
     5c8:	93 9f       	mul	r25, r19
     5ca:	c0 01       	movw	r24, r0
     5cc:	11 24       	eor	r1, r1
     5ce:	82 2b       	or	r24, r18
     5d0:	8b b9       	out	0x0b, r24	; 11

    /* Write the data */
    enable_E_Pin;                   // Enable pin high
     5d2:	5b 9a       	sbi	0x0b, 3	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5d4:	85 e0       	ldi	r24, 0x05	; 5
     5d6:	8a 95       	dec	r24
     5d8:	f1 f7       	brne	.-4      	; 0x5d6 <lcd_write_4+0x7c>
     5da:	00 00       	nop
    _delay_us(1);                   // implement 'Data set-up time' (80 nS) and 'Enable pulse width' (230 nS)
    disable_E_Pin;                  // Enable pin low
     5dc:	5b 98       	cbi	0x0b, 3	; 11
     5de:	35 e0       	ldi	r19, 0x05	; 5
     5e0:	3a 95       	dec	r19
     5e2:	f1 f7       	brne	.-4      	; 0x5e0 <lcd_write_4+0x86>
     5e4:	00 00       	nop
    _delay_us(1);                   // implement 'Data hold time' (10 nS) and 'Enable cycle time' (500 nS)
}
     5e6:	0f 90       	pop	r0
     5e8:	0f 90       	pop	r0
     5ea:	0f 90       	pop	r0
     5ec:	0f 90       	pop	r0
     5ee:	df 91       	pop	r29
     5f0:	cf 91       	pop	r28
     5f2:	08 95       	ret

000005f4 <lcd_write_character_4f>:
Outputs:	none
Description:sends a byte to the LCD data register, configures RW 
			(busy flag is implemented)
******************************************************************** */
void lcd_write_character_4f(uint8_t theChar)
{
     5f4:	cf 93       	push	r28
     5f6:	c8 2f       	mov	r28, r24
    set_RW_LOW_write;					// Write to LCD module (RW low)
     5f8:	58 98       	cbi	0x0b, 0	; 11
    set_RS_HIGH_Data;					// Select the Data Register (RS high)
     5fa:	59 9a       	sbi	0x0b, 1	; 11
    disable_E_Pin;						// Make sure E is initially low
     5fc:	5b 98       	cbi	0x0b, 3	; 11
    lcd_write_4(theChar);				// Write the upper 4-bits of the data
     5fe:	ad df       	rcall	.-166    	; 0x55a <lcd_write_4>
    lcd_write_4(theChar << 4);			// Write the lower 4-bits of the data
     600:	8c 2f       	mov	r24, r28
     602:	82 95       	swap	r24
     604:	80 7f       	andi	r24, 0xF0	; 240
     606:	a9 df       	rcall	.-174    	; 0x55a <lcd_write_4>
}
     608:	cf 91       	pop	r28
     60a:	08 95       	ret

0000060c <lcd_write_instruction_4f>:
Outputs:	none
Description:sends a byte to the LCD instruction register, configures RW 
			(busy flag is implemented)
******************************************************************** */
void lcd_write_instruction_4f(uint8_t theInstruction)
{
     60c:	cf 93       	push	r28
     60e:	c8 2f       	mov	r28, r24
    set_RW_LOW_write;					// Write to LCD module (RW low)
     610:	58 98       	cbi	0x0b, 0	; 11
    set_RS_LOW_Instr;					// Select the Data Register (RS high)
     612:	59 98       	cbi	0x0b, 1	; 11
    disable_E_Pin;						// Make sure E is initially low
     614:	5b 98       	cbi	0x0b, 3	; 11
    lcd_write_4(theInstruction);		// Write the upper 4-bits of the data
     616:	a1 df       	rcall	.-190    	; 0x55a <lcd_write_4>
    lcd_write_4(theInstruction << 4);	// Write the lower 4-bits of the data
     618:	8c 2f       	mov	r24, r28
     61a:	82 95       	swap	r24
     61c:	80 7f       	andi	r24, 0xF0	; 240
     61e:	9d df       	rcall	.-198    	; 0x55a <lcd_write_4>
}
     620:	cf 91       	pop	r28
     622:	08 95       	ret

00000624 <lcd_check_BF_4>:
void lcd_check_BF_4(void)
{
	
    uint8_t busy_flag_copy;             // busy flag 'mirror'

    set_D7_input;						// set D7 data direction to input
     624:	57 98       	cbi	0x0a, 7	; 10
    set_RS_LOW_Instr;					// select the Instruction Register (RS low)
     626:	59 98       	cbi	0x0b, 1	; 11
    set_RW_HIGH_read;					// read from LCD module (RW high)
     628:	58 9a       	sbi	0x0b, 0	; 11

    do
    {
        busy_flag_copy = 0;                         // initialize busy flag 'mirror'
        lcd_Ctlr_Port |= (1<<lcd_E_bit);            // Enable pin high
     62a:	5b 9a       	sbi	0x0b, 3	; 11
     62c:	85 e0       	ldi	r24, 0x05	; 5
     62e:	8a 95       	dec	r24
     630:	f1 f7       	brne	.-4      	; 0x62e <lcd_check_BF_4+0xa>
     632:	00 00       	nop
        _delay_us(1);                               // implement 'Delay data time' (160 nS) and 'Enable pulse width' (230 nS)

        busy_flag_copy |= (lcd_D7_pin & (1<<lcd_D7_bit));  // get actual busy flag status
     634:	89 b1       	in	r24, 0x09	; 9

        lcd_Ctlr_Port &= ~(1<<lcd_E_bit);           // Enable pin low
     636:	5b 98       	cbi	0x0b, 3	; 11
     638:	95 e0       	ldi	r25, 0x05	; 5
     63a:	9a 95       	dec	r25
     63c:	f1 f7       	brne	.-4      	; 0x63a <lcd_check_BF_4+0x16>
     63e:	00 00       	nop
        _delay_us(1);                               // implement 'Address hold time' (10 nS), 'Data hold time' (10 nS), and 'Enable cycle time' (500 nS )
        
// read and discard alternate nibbles (D3 information)
        lcd_Ctlr_Port |= (1<<lcd_E_bit);            // Enable pin high
     640:	5b 9a       	sbi	0x0b, 3	; 11
     642:	95 e0       	ldi	r25, 0x05	; 5
     644:	9a 95       	dec	r25
     646:	f1 f7       	brne	.-4      	; 0x644 <lcd_check_BF_4+0x20>
     648:	00 00       	nop
        _delay_us(1);                               // implement 'Delay data time' (160 nS) and 'Enable pulse width' (230 nS)
        lcd_Ctlr_Port &= ~(1<<lcd_E_bit);           // Enable pin low
     64a:	5b 98       	cbi	0x0b, 3	; 11
     64c:	95 e0       	ldi	r25, 0x05	; 5
     64e:	9a 95       	dec	r25
     650:	f1 f7       	brne	.-4      	; 0x64e <lcd_check_BF_4+0x2a>
     652:	00 00       	nop
        _delay_us(1);                               // implement 'Address hold time (10 nS), 'Data hold time' (10 nS), and 'Enable cycle time' (500 nS )

    } while (busy_flag_copy);                       // check again if busy flag was high
     654:	88 23       	and	r24, r24
     656:	4c f3       	brlt	.-46     	; 0x62a <lcd_check_BF_4+0x6>

// arrive here if busy flag is clear -  clean up and return 
    set_RW_LOW_write;               // write to LCD module (RW low)
     658:	58 98       	cbi	0x0b, 0	; 11
    set_D7_output;                  // reset D7 data direction to output	
     65a:	57 9a       	sbi	0x0a, 7	; 10
     65c:	08 95       	ret

0000065e <lcd_init_4f>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     65e:	2f ef       	ldi	r18, 0xFF	; 255
     660:	81 ee       	ldi	r24, 0xE1	; 225
     662:	94 e0       	ldi	r25, 0x04	; 4
     664:	21 50       	subi	r18, 0x01	; 1
     666:	80 40       	sbci	r24, 0x00	; 0
     668:	90 40       	sbci	r25, 0x00	; 0
     66a:	e1 f7       	brne	.-8      	; 0x664 <lcd_init_4f+0x6>
     66c:	00 c0       	rjmp	.+0      	; 0x66e <lcd_init_4f+0x10>
     66e:	00 00       	nop
	 this instruction can be sent on just the four available data lines and it will be interpreted
	 properly by the LCD controller.  The 'lcd_write_4' subroutine will accomplish this if the
	 control lines have previously been configured properly. */

	/* Set up the RS, E, and RW lines for the 'lcd_write_4' function. */
	set_RS_LOW_Instr;	// Select the Instruction Register (RS low)
     670:	59 98       	cbi	0x0b, 1	; 11
	disable_E_Pin;		// Make sure E is initially low
     672:	5b 98       	cbi	0x0b, 3	; 11
	set_RW_LOW_write;	// write to LCD module (RW low)
     674:	58 98       	cbi	0x0b, 0	; 11

	/* Reset the LCD controller */
	lcd_write_4(lcd_FunctionReset);		// First part of reset sequence
     676:	80 e3       	ldi	r24, 0x30	; 48
     678:	70 df       	rcall	.-288    	; 0x55a <lcd_write_4>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     67a:	25 e3       	ldi	r18, 0x35	; 53
     67c:	2a 95       	dec	r18
     67e:	f1 f7       	brne	.-4      	; 0x67c <lcd_init_4f+0x1e>
     680:	00 00       	nop
	_delay_us(10);                      // Delay of 10 us
	
	lcd_write_4(lcd_FunctionReset);		// Second part of reset sequence
     682:	80 e3       	ldi	r24, 0x30	; 48
     684:	6a df       	rcall	.-300    	; 0x55a <lcd_write_4>
     686:	8f e1       	ldi	r24, 0x1F	; 31
     688:	93 e0       	ldi	r25, 0x03	; 3
     68a:	01 97       	sbiw	r24, 0x01	; 1
     68c:	f1 f7       	brne	.-4      	; 0x68a <lcd_init_4f+0x2c>
     68e:	00 c0       	rjmp	.+0      	; 0x690 <lcd_init_4f+0x32>
	_delay_us(200);						// Delay of 200 us

	lcd_write_4(lcd_FunctionReset);		// Third part of reset sequence
     690:	00 00       	nop
     692:	80 e3       	ldi	r24, 0x30	; 48
     694:	62 df       	rcall	.-316    	; 0x55a <lcd_write_4>
     696:	8f e3       	ldi	r24, 0x3F	; 63
     698:	91 e0       	ldi	r25, 0x01	; 1
     69a:	01 97       	sbiw	r24, 0x01	; 1
     69c:	f1 f7       	brne	.-4      	; 0x69a <lcd_init_4f+0x3c>
     69e:	00 c0       	rjmp	.+0      	; 0x6a0 <lcd_init_4f+0x42>
	/* Preliminary Function Set instruction - used only to set the 4-bit mode.
	 The number of lines or the font cannot be set at this time since the controller is still in the
	 8-bit mode, but the data transfer mode can be changed since this parameter is determined by one
	 of the upper four bits of the instruction. */
	
	lcd_write_4(lcd_FunctionSet4bit);	// Set 4-bit mode
     6a0:	00 00       	nop
     6a2:	88 e2       	ldi	r24, 0x28	; 40
	// From this point on the busy flag is available

	// Function Set instruction
	lcd_check_BF_4();    // Makes sure LCD controller is ready
     6a4:	5a df       	rcall	.-332    	; 0x55a <lcd_write_4>
                         
	lcd_write_instruction_4f(lcd_FunctionSet4bit);  // Set mode, lines, and font
     6a6:	be df       	rcall	.-132    	; 0x624 <lcd_check_BF_4>
     6a8:	88 e2       	ldi	r24, 0x28	; 40
	/*The next three instructions are specified in the data sheet as part of the initialization routine,
	  so it is a good idea (but probably not necessary) to do them just as specified and then redo them
	  later if the application requires a different configuration.*/

	/* Display On/Off Control instruction */
	lcd_check_BF_4();
     6aa:	b0 df       	rcall	.-160    	; 0x60c <lcd_write_instruction_4f>
	lcd_write_instruction_4f(lcd_DisplayOff);       // Turn display OFF
     6ac:	bb df       	rcall	.-138    	; 0x624 <lcd_check_BF_4>

	/* Clear Display instruction */
	lcd_check_BF_4();
     6ae:	88 e0       	ldi	r24, 0x08	; 8
	lcd_write_instruction_4f(lcd_Clear);            // Clear display RAM
     6b0:	ad df       	rcall	.-166    	; 0x60c <lcd_write_instruction_4f>
     6b2:	b8 df       	rcall	.-144    	; 0x624 <lcd_check_BF_4>
     6b4:	81 e0       	ldi	r24, 0x01	; 1
	
	/* Entry Mode Set instruction */
	lcd_check_BF_4();
     6b6:	aa df       	rcall	.-172    	; 0x60c <lcd_write_instruction_4f>
     6b8:	b5 df       	rcall	.-150    	; 0x624 <lcd_check_BF_4>
	lcd_write_instruction_4f(lcd_EntryMode);        // Set desired shift characteristics
     6ba:	86 e0       	ldi	r24, 0x06	; 6
     6bc:	a7 df       	rcall	.-178    	; 0x60c <lcd_write_instruction_4f>
     6be:	b2 df       	rcall	.-156    	; 0x624 <lcd_check_BF_4>
	/*This is the end of the LCD controller initialization as specified in the data sheet, but the display
	  has been left in the OFF condition.  This is a good time to turn the display back ON. */

	/* Display On/Off Control instruction */
	lcd_check_BF_4();
     6c0:	8c e0       	ldi	r24, 0x0C	; 12
     6c2:	a4 cf       	rjmp	.-184    	; 0x60c <lcd_write_instruction_4f>
	lcd_write_instruction_4f(lcd_DisplayOn);        // turn the display ON
     6c4:	08 95       	ret

000006c6 <initLCD>:
     6c6:	41 df       	rcall	.-382    	; 0x54a <configLCDPorts>
     6c8:	ca df       	rcall	.-108    	; 0x65e <lcd_init_4f>
     6ca:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6cc:	81 ee       	ldi	r24, 0xE1	; 225
     6ce:	94 e0       	ldi	r25, 0x04	; 4
     6d0:	21 50       	subi	r18, 0x01	; 1
     6d2:	80 40       	sbci	r24, 0x00	; 0
     6d4:	90 40       	sbci	r25, 0x00	; 0
     6d6:	e1 f7       	brne	.-8      	; 0x6d0 <initLCD+0xa>
     6d8:	00 c0       	rjmp	.+0      	; 0x6da <initLCD+0x14>
     6da:	00 00       	nop
     6dc:	08 95       	ret

000006de <lcd_write_string_4f>:
     6de:	0f 93       	push	r16
Inputs:		string to be displayed (stringData)
Outputs:	none
Description:writes a string of characters on LCD; uses the busy flag
******************************************************************** */
void lcd_write_string_4f(uint8_t stringData[])
{
     6e0:	1f 93       	push	r17
     6e2:	cf 93       	push	r28
     6e4:	df 93       	push	r29
     6e6:	00 d0       	rcall	.+0      	; 0x6e8 <lcd_write_string_4f+0xa>
     6e8:	cd b7       	in	r28, 0x3d	; 61
     6ea:	de b7       	in	r29, 0x3e	; 62
     6ec:	8c 01       	movw	r16, r24
    volatile int i = 0;                             // Character counter
     6ee:	1a 82       	std	Y+2, r1	; 0x02
     6f0:	19 82       	std	Y+1, r1	; 0x01
    while (stringData[i] != 0)
     6f2:	e9 81       	ldd	r30, Y+1	; 0x01
     6f4:	fa 81       	ldd	r31, Y+2	; 0x02
     6f6:	e8 0f       	add	r30, r24
     6f8:	f9 1f       	adc	r31, r25
     6fa:	80 81       	ld	r24, Z
     6fc:	88 23       	and	r24, r24
     6fe:	99 f0       	breq	.+38     	; 0x726 <lcd_write_string_4f+0x48>
    {
        lcd_check_BF_4();                           // Make sure LCD controller is ready    
     700:	91 df       	rcall	.-222    	; 0x624 <lcd_check_BF_4>
        lcd_write_character_4f(stringData[i]);
     702:	e9 81       	ldd	r30, Y+1	; 0x01
     704:	fa 81       	ldd	r31, Y+2	; 0x02
     706:	e0 0f       	add	r30, r16
     708:	f1 1f       	adc	r31, r17
     70a:	80 81       	ld	r24, Z
     70c:	73 df       	rcall	.-282    	; 0x5f4 <lcd_write_character_4f>
        i++;
     70e:	89 81       	ldd	r24, Y+1	; 0x01
     710:	9a 81       	ldd	r25, Y+2	; 0x02
     712:	01 96       	adiw	r24, 0x01	; 1
     714:	9a 83       	std	Y+2, r25	; 0x02
     716:	89 83       	std	Y+1, r24	; 0x01
Description:writes a string of characters on LCD; uses the busy flag
******************************************************************** */
void lcd_write_string_4f(uint8_t stringData[])
{
    volatile int i = 0;                             // Character counter
    while (stringData[i] != 0)
     718:	e9 81       	ldd	r30, Y+1	; 0x01
     71a:	fa 81       	ldd	r31, Y+2	; 0x02
     71c:	e0 0f       	add	r30, r16
     71e:	f1 1f       	adc	r31, r17
     720:	80 81       	ld	r24, Z
     722:	81 11       	cpse	r24, r1
     724:	ed cf       	rjmp	.-38     	; 0x700 <lcd_write_string_4f+0x22>
    {
        lcd_check_BF_4();                           // Make sure LCD controller is ready    
        lcd_write_character_4f(stringData[i]);
        i++;
    }
}
     726:	0f 90       	pop	r0
     728:	0f 90       	pop	r0
     72a:	df 91       	pop	r29
     72c:	cf 91       	pop	r28
     72e:	1f 91       	pop	r17
     730:	0f 91       	pop	r16
     732:	08 95       	ret

00000734 <updateLCDScreen>:
Inputs:		two pointers to a uint8 type data and 2 values, one for each row
Outputs:	none
Description:commands writing on LCD line by line 
******************************************************************** */
void updateLCDScreen(uint8_t row, char * s1, uint8_t data, char * s2)
{
     734:	df 92       	push	r13
     736:	ef 92       	push	r14
     738:	ff 92       	push	r15
     73a:	0f 93       	push	r16
     73c:	1f 93       	push	r17
     73e:	cf 93       	push	r28
     740:	df 93       	push	r29
     742:	cd b7       	in	r28, 0x3d	; 61
     744:	de b7       	in	r29, 0x3e	; 62
     746:	af 97       	sbiw	r28, 0x2f	; 47
     748:	0f b6       	in	r0, 0x3f	; 63
     74a:	f8 94       	cli
     74c:	de bf       	out	0x3e, r29	; 62
     74e:	0f be       	out	0x3f, r0	; 63
     750:	cd bf       	out	0x3d, r28	; 61
     752:	18 2f       	mov	r17, r24
     754:	d6 2e       	mov	r13, r22
     756:	07 2f       	mov	r16, r23
     758:	84 2f       	mov	r24, r20
     75a:	79 01       	movw	r14, r18
	/* convert data to string [buf] */
	char data2char[4] = "   ";
     75c:	20 e2       	ldi	r18, 0x20	; 32
     75e:	30 e2       	ldi	r19, 0x20	; 32
     760:	3a 83       	std	Y+2, r19	; 0x02
     762:	29 83       	std	Y+1, r18	; 0x01
     764:	20 e2       	ldi	r18, 0x20	; 32
     766:	30 e0       	ldi	r19, 0x00	; 0
     768:	3c 83       	std	Y+4, r19	; 0x04
     76a:	2b 83       	std	Y+3, r18	; 0x03
	char charRow[21];
	char emptyString[] = "                     ";	//21 empty spaces
     76c:	96 e1       	ldi	r25, 0x16	; 22
     76e:	e1 ed       	ldi	r30, 0xD1	; 209
     770:	f1 e0       	ldi	r31, 0x01	; 1
     772:	de 01       	movw	r26, r28
     774:	5a 96       	adiw	r26, 0x1a	; 26
     776:	01 90       	ld	r0, Z+
     778:	0d 92       	st	X+, r0
     77a:	9a 95       	dec	r25
     77c:	e1 f7       	brne	.-8      	; 0x776 <updateLCDScreen+0x42>
	
	if (data != NONE)	{ itoa(data, data2char, 10);}
     77e:	4f 3f       	cpi	r20, 0xFF	; 255
     780:	31 f0       	breq	.+12     	; 0x78e <updateLCDScreen+0x5a>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     782:	4a e0       	ldi	r20, 0x0A	; 10
     784:	be 01       	movw	r22, r28
     786:	6f 5f       	subi	r22, 0xFF	; 255
     788:	7f 4f       	sbci	r23, 0xFF	; 255
     78a:	90 e0       	ldi	r25, 0x00	; 0
     78c:	fd d1       	rcall	.+1018   	; 0xb88 <__itoa_ncheck>
	if (strcmp(s1, "NONE") == 0 ) { s1 = ""; }
     78e:	63 e0       	ldi	r22, 0x03	; 3
     790:	71 e0       	ldi	r23, 0x01	; 1
     792:	8d 2d       	mov	r24, r13
     794:	90 2f       	mov	r25, r16
     796:	ef d1       	rcall	.+990    	; 0xb76 <strcmp>
     798:	89 2b       	or	r24, r25
     79a:	09 f4       	brne	.+2      	; 0x79e <updateLCDScreen+0x6a>
     79c:	ac c0       	rjmp	.+344    	; 0x8f6 <updateLCDScreen+0x1c2>
	if (strcmp(s2, "NONE") == 0 ) { s2 = ""; }
     79e:	63 e0       	ldi	r22, 0x03	; 3
     7a0:	71 e0       	ldi	r23, 0x01	; 1
     7a2:	c7 01       	movw	r24, r14
     7a4:	e8 d1       	rcall	.+976    	; 0xb76 <strcmp>
     7a6:	89 2b       	or	r24, r25
     7a8:	31 f4       	brne	.+12     	; 0x7b6 <updateLCDScreen+0x82>
     7aa:	0f 2e       	mov	r0, r31
     7ac:	f6 ee       	ldi	r31, 0xE6	; 230
     7ae:	ef 2e       	mov	r14, r31
     7b0:	f1 e0       	ldi	r31, 0x01	; 1
     7b2:	ff 2e       	mov	r15, r31
     7b4:	f0 2d       	mov	r31, r0
	
	/* Create the strings to be displayed */
	snprintf( charRow, sizeof charRow, "%s%s%s%s", s1, data2char, s2, emptyString );
     7b6:	ce 01       	movw	r24, r28
     7b8:	4a 96       	adiw	r24, 0x1a	; 26
     7ba:	9f 93       	push	r25
     7bc:	8f 93       	push	r24
     7be:	ff 92       	push	r15
     7c0:	ef 92       	push	r14
     7c2:	49 97       	sbiw	r24, 0x19	; 25
     7c4:	9f 93       	push	r25
     7c6:	8f 93       	push	r24
     7c8:	0f 93       	push	r16
     7ca:	df 92       	push	r13
     7cc:	88 ec       	ldi	r24, 0xC8	; 200
     7ce:	91 e0       	ldi	r25, 0x01	; 1
     7d0:	9f 93       	push	r25
     7d2:	8f 93       	push	r24
     7d4:	1f 92       	push	r1
     7d6:	85 e1       	ldi	r24, 0x15	; 21
     7d8:	8f 93       	push	r24
     7da:	ce 01       	movw	r24, r28
     7dc:	05 96       	adiw	r24, 0x05	; 5
     7de:	9f 93       	push	r25
     7e0:	8f 93       	push	r24
     7e2:	f5 d1       	rcall	.+1002   	; 0xbce <snprintf>
	if (strcmp(s1, "CLEAR") == 0 ) { snprintf( charRow, sizeof charRow, "%s", emptyString ); };
     7e4:	68 e0       	ldi	r22, 0x08	; 8
     7e6:	71 e0       	ldi	r23, 0x01	; 1
     7e8:	8d 2d       	mov	r24, r13
     7ea:	90 2f       	mov	r25, r16
     7ec:	c4 d1       	rcall	.+904    	; 0xb76 <strcmp>
     7ee:	0f b6       	in	r0, 0x3f	; 63
     7f0:	f8 94       	cli
     7f2:	de bf       	out	0x3e, r29	; 62
     7f4:	0f be       	out	0x3f, r0	; 63
     7f6:	cd bf       	out	0x3d, r28	; 61
     7f8:	89 2b       	or	r24, r25
     7fa:	a9 f4       	brne	.+42     	; 0x826 <updateLCDScreen+0xf2>
     7fc:	ce 01       	movw	r24, r28
     7fe:	4a 96       	adiw	r24, 0x1a	; 26
     800:	9f 93       	push	r25
     802:	8f 93       	push	r24
     804:	8e ec       	ldi	r24, 0xCE	; 206
     806:	91 e0       	ldi	r25, 0x01	; 1
     808:	9f 93       	push	r25
     80a:	8f 93       	push	r24
     80c:	1f 92       	push	r1
     80e:	85 e1       	ldi	r24, 0x15	; 21
     810:	8f 93       	push	r24
     812:	ce 01       	movw	r24, r28
     814:	05 96       	adiw	r24, 0x05	; 5
     816:	9f 93       	push	r25
     818:	8f 93       	push	r24
     81a:	d9 d1       	rcall	.+946    	; 0xbce <snprintf>
     81c:	0f b6       	in	r0, 0x3f	; 63
     81e:	f8 94       	cli
     820:	de bf       	out	0x3e, r29	; 62
     822:	0f be       	out	0x3f, r0	; 63
     824:	cd bf       	out	0x3d, r28	; 61
		
	switch(row) {
     826:	12 30       	cpi	r17, 0x02	; 2
     828:	a9 f0       	breq	.+42     	; 0x854 <updateLCDScreen+0x120>
     82a:	18 f4       	brcc	.+6      	; 0x832 <updateLCDScreen+0xfe>
     82c:	11 30       	cpi	r17, 0x01	; 1
     82e:	31 f0       	breq	.+12     	; 0x83c <updateLCDScreen+0x108>
     830:	34 c0       	rjmp	.+104    	; 0x89a <updateLCDScreen+0x166>
     832:	13 30       	cpi	r17, 0x03	; 3
     834:	d9 f0       	breq	.+54     	; 0x86c <updateLCDScreen+0x138>
     836:	14 30       	cpi	r17, 0x04	; 4
     838:	29 f1       	breq	.+74     	; 0x884 <updateLCDScreen+0x150>
		case 1: /* ======= Line 1 ======= */
			lcd_write_instruction_4f(lcd_SetCursor | lcd_LineOne); _delay_ms(50);
     83a:	2f c0       	rjmp	.+94     	; 0x89a <updateLCDScreen+0x166>
     83c:	80 e8       	ldi	r24, 0x80	; 128
     83e:	e6 de       	rcall	.-564    	; 0x60c <lcd_write_instruction_4f>
     840:	9f ef       	ldi	r25, 0xFF	; 255
     842:	20 e7       	ldi	r18, 0x70	; 112
     844:	32 e0       	ldi	r19, 0x02	; 2
     846:	91 50       	subi	r25, 0x01	; 1
     848:	20 40       	sbci	r18, 0x00	; 0
     84a:	30 40       	sbci	r19, 0x00	; 0
     84c:	e1 f7       	brne	.-8      	; 0x846 <updateLCDScreen+0x112>
     84e:	00 c0       	rjmp	.+0      	; 0x850 <updateLCDScreen+0x11c>
     850:	00 00       	nop
			break;
		case 2: /* ======= Line 2 ======= */
			lcd_write_instruction_4f(lcd_SetCursor | lcd_LineTwo); _delay_ms(50);
     852:	23 c0       	rjmp	.+70     	; 0x89a <updateLCDScreen+0x166>
     854:	80 ec       	ldi	r24, 0xC0	; 192
     856:	da de       	rcall	.-588    	; 0x60c <lcd_write_instruction_4f>
     858:	8f ef       	ldi	r24, 0xFF	; 255
     85a:	90 e7       	ldi	r25, 0x70	; 112
     85c:	22 e0       	ldi	r18, 0x02	; 2
     85e:	81 50       	subi	r24, 0x01	; 1
     860:	90 40       	sbci	r25, 0x00	; 0
     862:	20 40       	sbci	r18, 0x00	; 0
     864:	e1 f7       	brne	.-8      	; 0x85e <updateLCDScreen+0x12a>
     866:	00 c0       	rjmp	.+0      	; 0x868 <updateLCDScreen+0x134>
     868:	00 00       	nop
			break;
		case 3: /* ======= Line 3 ======= */
			lcd_write_instruction_4f(lcd_SetCursor | lcd_LineThree); _delay_ms(50);
     86a:	17 c0       	rjmp	.+46     	; 0x89a <updateLCDScreen+0x166>
     86c:	84 e9       	ldi	r24, 0x94	; 148
     86e:	ce de       	rcall	.-612    	; 0x60c <lcd_write_instruction_4f>
     870:	3f ef       	ldi	r19, 0xFF	; 255
     872:	80 e7       	ldi	r24, 0x70	; 112
     874:	92 e0       	ldi	r25, 0x02	; 2
     876:	31 50       	subi	r19, 0x01	; 1
     878:	80 40       	sbci	r24, 0x00	; 0
     87a:	90 40       	sbci	r25, 0x00	; 0
     87c:	e1 f7       	brne	.-8      	; 0x876 <updateLCDScreen+0x142>
     87e:	00 c0       	rjmp	.+0      	; 0x880 <updateLCDScreen+0x14c>
     880:	00 00       	nop
			break;
		case 4: /* ======= Line 4 ======= */
			lcd_write_instruction_4f(lcd_SetCursor | lcd_lineFour); _delay_ms(50);
     882:	0b c0       	rjmp	.+22     	; 0x89a <updateLCDScreen+0x166>
     884:	84 ed       	ldi	r24, 0xD4	; 212
     886:	c2 de       	rcall	.-636    	; 0x60c <lcd_write_instruction_4f>
     888:	2f ef       	ldi	r18, 0xFF	; 255
     88a:	30 e7       	ldi	r19, 0x70	; 112
     88c:	82 e0       	ldi	r24, 0x02	; 2
     88e:	21 50       	subi	r18, 0x01	; 1
     890:	30 40       	sbci	r19, 0x00	; 0
     892:	80 40       	sbci	r24, 0x00	; 0
     894:	e1 f7       	brne	.-8      	; 0x88e <updateLCDScreen+0x15a>
     896:	00 c0       	rjmp	.+0      	; 0x898 <updateLCDScreen+0x164>
			break;
	}
	lcd_write_string_4f((unsigned char*) charRow); _delay_ms(50);
     898:	00 00       	nop
     89a:	ce 01       	movw	r24, r28
     89c:	05 96       	adiw	r24, 0x05	; 5
     89e:	1f df       	rcall	.-450    	; 0x6de <lcd_write_string_4f>
     8a0:	9f ef       	ldi	r25, 0xFF	; 255
     8a2:	20 e7       	ldi	r18, 0x70	; 112
     8a4:	32 e0       	ldi	r19, 0x02	; 2
     8a6:	91 50       	subi	r25, 0x01	; 1
     8a8:	20 40       	sbci	r18, 0x00	; 0
     8aa:	30 40       	sbci	r19, 0x00	; 0
     8ac:	e1 f7       	brne	.-8      	; 0x8a6 <updateLCDScreen+0x172>
     8ae:	00 c0       	rjmp	.+0      	; 0x8b0 <updateLCDScreen+0x17c>
     8b0:	00 00       	nop
}
     8b2:	46 c0       	rjmp	.+140    	; 0x940 <__stack+0x41>
	if (data != NONE)	{ itoa(data, data2char, 10);}
	if (strcmp(s1, "NONE") == 0 ) { s1 = ""; }
	if (strcmp(s2, "NONE") == 0 ) { s2 = ""; }
	
	/* Create the strings to be displayed */
	snprintf( charRow, sizeof charRow, "%s%s%s%s", s1, data2char, s2, emptyString );
     8b4:	ce 01       	movw	r24, r28
     8b6:	4a 96       	adiw	r24, 0x1a	; 26
     8b8:	9f 93       	push	r25
     8ba:	8f 93       	push	r24
     8bc:	86 ee       	ldi	r24, 0xE6	; 230
     8be:	91 e0       	ldi	r25, 0x01	; 1
     8c0:	9f 93       	push	r25
     8c2:	8f 93       	push	r24
     8c4:	9e 01       	movw	r18, r28
     8c6:	2f 5f       	subi	r18, 0xFF	; 255
     8c8:	3f 4f       	sbci	r19, 0xFF	; 255
     8ca:	3f 93       	push	r19
     8cc:	2f 93       	push	r18
     8ce:	9f 93       	push	r25
     8d0:	8f 93       	push	r24
     8d2:	88 ec       	ldi	r24, 0xC8	; 200
     8d4:	91 e0       	ldi	r25, 0x01	; 1
     8d6:	9f 93       	push	r25
     8d8:	8f 93       	push	r24
     8da:	1f 92       	push	r1
     8dc:	85 e1       	ldi	r24, 0x15	; 21
     8de:	8f 93       	push	r24
     8e0:	ce 01       	movw	r24, r28
     8e2:	05 96       	adiw	r24, 0x05	; 5
     8e4:	9f 93       	push	r25
     8e6:	8f 93       	push	r24
     8e8:	72 d1       	rcall	.+740    	; 0xbce <snprintf>
     8ea:	0f b6       	in	r0, 0x3f	; 63
     8ec:	f8 94       	cli
     8ee:	de bf       	out	0x3e, r29	; 62
     8f0:	0f be       	out	0x3f, r0	; 63
     8f2:	cd bf       	out	0x3d, r28	; 61
	char charRow[21];
	char emptyString[] = "                     ";	//21 empty spaces
	
	if (data != NONE)	{ itoa(data, data2char, 10);}
	if (strcmp(s1, "NONE") == 0 ) { s1 = ""; }
	if (strcmp(s2, "NONE") == 0 ) { s2 = ""; }
     8f4:	98 cf       	rjmp	.-208    	; 0x826 <updateLCDScreen+0xf2>
     8f6:	63 e0       	ldi	r22, 0x03	; 3
     8f8:	71 e0       	ldi	r23, 0x01	; 1
     8fa:	c7 01       	movw	r24, r14
     8fc:	3c d1       	rcall	.+632    	; 0xb76 <strcmp>
     8fe:	89 2b       	or	r24, r25
     900:	c9 f2       	breq	.-78     	; 0x8b4 <updateLCDScreen+0x180>
	
	/* Create the strings to be displayed */
	snprintf( charRow, sizeof charRow, "%s%s%s%s", s1, data2char, s2, emptyString );
     902:	ce 01       	movw	r24, r28
     904:	4a 96       	adiw	r24, 0x1a	; 26
     906:	9f 93       	push	r25
     908:	8f 93       	push	r24
     90a:	ff 92       	push	r15
     90c:	ef 92       	push	r14
     90e:	49 97       	sbiw	r24, 0x19	; 25
     910:	9f 93       	push	r25
     912:	8f 93       	push	r24
     914:	86 ee       	ldi	r24, 0xE6	; 230
     916:	91 e0       	ldi	r25, 0x01	; 1
     918:	9f 93       	push	r25
     91a:	8f 93       	push	r24
     91c:	88 ec       	ldi	r24, 0xC8	; 200
     91e:	91 e0       	ldi	r25, 0x01	; 1
     920:	9f 93       	push	r25
     922:	8f 93       	push	r24
     924:	1f 92       	push	r1
     926:	85 e1       	ldi	r24, 0x15	; 21
     928:	8f 93       	push	r24
     92a:	ce 01       	movw	r24, r28
     92c:	05 96       	adiw	r24, 0x05	; 5
     92e:	9f 93       	push	r25
     930:	8f 93       	push	r24
     932:	4d d1       	rcall	.+666    	; 0xbce <snprintf>
     934:	0f b6       	in	r0, 0x3f	; 63
     936:	f8 94       	cli
     938:	de bf       	out	0x3e, r29	; 62
     93a:	0f be       	out	0x3f, r0	; 63
     93c:	cd bf       	out	0x3d, r28	; 61
     93e:	73 cf       	rjmp	.-282    	; 0x826 <updateLCDScreen+0xf2>
		case 4: /* ======= Line 4 ======= */
			lcd_write_instruction_4f(lcd_SetCursor | lcd_lineFour); _delay_ms(50);
			break;
	}
	lcd_write_string_4f((unsigned char*) charRow); _delay_ms(50);
}
     940:	af 96       	adiw	r28, 0x2f	; 47
     942:	0f b6       	in	r0, 0x3f	; 63
     944:	f8 94       	cli
     946:	de bf       	out	0x3e, r29	; 62
     948:	0f be       	out	0x3f, r0	; 63
     94a:	cd bf       	out	0x3d, r28	; 61
     94c:	df 91       	pop	r29
     94e:	cf 91       	pop	r28
     950:	1f 91       	pop	r17
     952:	0f 91       	pop	r16
     954:	ff 90       	pop	r15
     956:	ef 90       	pop	r14
     958:	df 90       	pop	r13
     95a:	08 95       	ret

0000095c <displayLCD_main>:
Description:displays on the screen the data passed to the input
******************************************************************** */
void displayLCD_main(uint8_t drow, char * s1, uint8_t d1, char * s2)
{
	/* Write text on the LCD */
	updateLCDScreen(drow, s1, d1, s2);
     95c:	eb ce       	rjmp	.-554    	; 0x734 <updateLCDScreen>
     95e:	08 95       	ret

00000960 <clearScreen>:
     960:	23 e0       	ldi	r18, 0x03	; 3
     962:	31 e0       	ldi	r19, 0x01	; 1
     964:	4f ef       	ldi	r20, 0xFF	; 255
     966:	68 e0       	ldi	r22, 0x08	; 8
     968:	71 e0       	ldi	r23, 0x01	; 1
     96a:	81 e0       	ldi	r24, 0x01	; 1
     96c:	e3 de       	rcall	.-570    	; 0x734 <updateLCDScreen>
     96e:	23 e0       	ldi	r18, 0x03	; 3
     970:	31 e0       	ldi	r19, 0x01	; 1
     972:	4f ef       	ldi	r20, 0xFF	; 255
     974:	68 e0       	ldi	r22, 0x08	; 8
     976:	71 e0       	ldi	r23, 0x01	; 1
     978:	82 e0       	ldi	r24, 0x02	; 2
     97a:	dc de       	rcall	.-584    	; 0x734 <updateLCDScreen>
     97c:	23 e0       	ldi	r18, 0x03	; 3
     97e:	31 e0       	ldi	r19, 0x01	; 1
     980:	4f ef       	ldi	r20, 0xFF	; 255
     982:	68 e0       	ldi	r22, 0x08	; 8
     984:	71 e0       	ldi	r23, 0x01	; 1
     986:	83 e0       	ldi	r24, 0x03	; 3
     988:	d5 de       	rcall	.-598    	; 0x734 <updateLCDScreen>
     98a:	23 e0       	ldi	r18, 0x03	; 3
     98c:	31 e0       	ldi	r19, 0x01	; 1
     98e:	4f ef       	ldi	r20, 0xFF	; 255
     990:	68 e0       	ldi	r22, 0x08	; 8
     992:	71 e0       	ldi	r23, 0x01	; 1
     994:	84 e0       	ldi	r24, 0x04	; 4
     996:	ce ce       	rjmp	.-612    	; 0x734 <updateLCDScreen>
     998:	08 95       	ret

0000099a <main>:
uint8_t ledSt = 0;	// Status LED water level 
uint8_t pwrMngmntCycle = 200;

/*----------------- Main function -------------------*/
int main(void)
{
     99a:	df 92       	push	r13
     99c:	ef 92       	push	r14
     99e:	ff 92       	push	r15
     9a0:	0f 93       	push	r16
     9a2:	1f 93       	push	r17
     9a4:	cf 93       	push	r28
     9a6:	df 93       	push	r29
	uint8_t newData = 1; 
	uint8_t display_cycles = 0;	// Used for time display
	uint8_t f_meas_available = 0;	// Flag for the presence of a previous measurement

/*---------- Initialization -----------*/
	initLCD();			displayLCD_main(1, "Initializing: ", 0, "%");	//Initializing...
     9a8:	8e de       	rcall	.-740    	; 0x6c6 <initLCD>
     9aa:	2d e5       	ldi	r18, 0x5D	; 93
     9ac:	31 e0       	ldi	r19, 0x01	; 1
     9ae:	40 e0       	ldi	r20, 0x00	; 0
     9b0:	67 ee       	ldi	r22, 0xE7	; 231
     9b2:	71 e0       	ldi	r23, 0x01	; 1
     9b4:	81 e0       	ldi	r24, 0x01	; 1
     9b6:	d2 df       	rcall	.-92     	; 0x95c <displayLCD_main>
						displayLCD_main(2, "--------------------", 0, "%");	_delay_ms(250);	//------
     9b8:	2d e5       	ldi	r18, 0x5D	; 93
     9ba:	31 e0       	ldi	r19, 0x01	; 1
     9bc:	40 e0       	ldi	r20, 0x00	; 0
     9be:	66 e1       	ldi	r22, 0x16	; 22
     9c0:	71 e0       	ldi	r23, 0x01	; 1
     9c2:	82 e0       	ldi	r24, 0x02	; 2
     9c4:	cb df       	rcall	.-106    	; 0x95c <displayLCD_main>
     9c6:	2f ef       	ldi	r18, 0xFF	; 255
     9c8:	84 e3       	ldi	r24, 0x34	; 52
     9ca:	9c e0       	ldi	r25, 0x0C	; 12
     9cc:	21 50       	subi	r18, 0x01	; 1
     9ce:	80 40       	sbci	r24, 0x00	; 0
     9d0:	90 40       	sbci	r25, 0x00	; 0
     9d2:	e1 f7       	brne	.-8      	; 0x9cc <main+0x32>
     9d4:	00 c0       	rjmp	.+0      	; 0x9d6 <main+0x3c>
     9d6:	00 00       	nop
						displayLCD_main(3, "    Hello folks!", NONE, "NONE");	_delay_ms(250);	//personal message
     9d8:	23 e0       	ldi	r18, 0x03	; 3
     9da:	31 e0       	ldi	r19, 0x01	; 1
     9dc:	4f ef       	ldi	r20, 0xFF	; 255
     9de:	66 ef       	ldi	r22, 0xF6	; 246
     9e0:	71 e0       	ldi	r23, 0x01	; 1
     9e2:	83 e0       	ldi	r24, 0x03	; 3
     9e4:	bb df       	rcall	.-138    	; 0x95c <displayLCD_main>
     9e6:	ef ef       	ldi	r30, 0xFF	; 255
     9e8:	f4 e3       	ldi	r31, 0x34	; 52
     9ea:	2c e0       	ldi	r18, 0x0C	; 12
     9ec:	e1 50       	subi	r30, 0x01	; 1
     9ee:	f0 40       	sbci	r31, 0x00	; 0
     9f0:	20 40       	sbci	r18, 0x00	; 0
     9f2:	e1 f7       	brne	.-8      	; 0x9ec <main+0x52>
     9f4:	00 c0       	rjmp	.+0      	; 0x9f6 <main+0x5c>
	init_SPI(); 		displayLCD_main(1, "Initializing: ", 33, "%");	_delay_ms(250);
     9f6:	00 00       	nop
     9f8:	25 dc       	rcall	.-1974   	; 0x244 <init_SPI>
     9fa:	2d e5       	ldi	r18, 0x5D	; 93
     9fc:	31 e0       	ldi	r19, 0x01	; 1
     9fe:	41 e2       	ldi	r20, 0x21	; 33
     a00:	67 ee       	ldi	r22, 0xE7	; 231
     a02:	71 e0       	ldi	r23, 0x01	; 1
     a04:	81 e0       	ldi	r24, 0x01	; 1
     a06:	aa df       	rcall	.-172    	; 0x95c <displayLCD_main>
     a08:	8f ef       	ldi	r24, 0xFF	; 255
     a0a:	94 e3       	ldi	r25, 0x34	; 52
     a0c:	ec e0       	ldi	r30, 0x0C	; 12
     a0e:	81 50       	subi	r24, 0x01	; 1
     a10:	90 40       	sbci	r25, 0x00	; 0
     a12:	e0 40       	sbci	r30, 0x00	; 0
     a14:	e1 f7       	brne	.-8      	; 0xa0e <main+0x74>
     a16:	00 c0       	rjmp	.+0      	; 0xa18 <main+0x7e>
	init_nrf24l01();	displayLCD_main(1, "Initializing: ", 67, "%");	_delay_ms(250);
     a18:	00 00       	nop
     a1a:	a2 dc       	rcall	.-1724   	; 0x360 <init_nrf24l01>
     a1c:	2d e5       	ldi	r18, 0x5D	; 93
     a1e:	31 e0       	ldi	r19, 0x01	; 1
     a20:	43 e4       	ldi	r20, 0x43	; 67
     a22:	67 ee       	ldi	r22, 0xE7	; 231
     a24:	71 e0       	ldi	r23, 0x01	; 1
     a26:	81 e0       	ldi	r24, 0x01	; 1
     a28:	99 df       	rcall	.-206    	; 0x95c <displayLCD_main>
     a2a:	ff ef       	ldi	r31, 0xFF	; 255
     a2c:	24 e3       	ldi	r18, 0x34	; 52
     a2e:	8c e0       	ldi	r24, 0x0C	; 12
     a30:	f1 50       	subi	r31, 0x01	; 1
     a32:	20 40       	sbci	r18, 0x00	; 0
     a34:	80 40       	sbci	r24, 0x00	; 0
     a36:	e1 f7       	brne	.-8      	; 0xa30 <main+0x96>
     a38:	00 c0       	rjmp	.+0      	; 0xa3a <main+0xa0>
	init_WL_mgmt();		displayLCD_main(1, "Initializing: ", 100, "%");	_delay_ms(500);
     a3a:	00 00       	nop
     a3c:	32 db       	rcall	.-2460   	; 0xa2 <init_WL_mgmt>
     a3e:	2d e5       	ldi	r18, 0x5D	; 93
     a40:	31 e0       	ldi	r19, 0x01	; 1
     a42:	44 e6       	ldi	r20, 0x64	; 100
     a44:	67 ee       	ldi	r22, 0xE7	; 231
     a46:	71 e0       	ldi	r23, 0x01	; 1
     a48:	81 e0       	ldi	r24, 0x01	; 1
     a4a:	88 df       	rcall	.-240    	; 0x95c <displayLCD_main>
     a4c:	9f ef       	ldi	r25, 0xFF	; 255
     a4e:	e9 e6       	ldi	r30, 0x69	; 105
     a50:	f8 e1       	ldi	r31, 0x18	; 24
     a52:	91 50       	subi	r25, 0x01	; 1
     a54:	e0 40       	sbci	r30, 0x00	; 0
     a56:	f0 40       	sbci	r31, 0x00	; 0
     a58:	e1 f7       	brne	.-8      	; 0xa52 <main+0xb8>
     a5a:	00 c0       	rjmp	.+0      	; 0xa5c <main+0xc2>
     a5c:	00 00       	nop
     a5e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <f_wdt>
	
/*-------------- Cycle loop -----------*/
	while(f_wdt == 1)
     a62:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <f_wdt+0x1>
     a66:	01 97       	sbiw	r24, 0x01	; 1
     a68:	09 f0       	breq	.+2      	; 0xa6c <main+0xd2>
     a6a:	61 c0       	rjmp	.+194    	; 0xb2e <main+0x194>
     a6c:	f1 2c       	mov	r15, r1
     a6e:	c0 e0       	ldi	r28, 0x00	; 0
     a70:	d1 e0       	ldi	r29, 0x01	; 1
     a72:	0f 2e       	mov	r0, r31
				}
			} while ((GetReg(STATUS) & (1<<RX_DR)) <= 0 );		// Bit 6 set on CONFIG Register -> RX successful
			turnOff_nrf24l01(); 	// TUrn off radio
			
			/* Set power management cycle for the case connection is lost -> waiting for less time than between measurements */
			pwrMngmntCycle = 24;	// Save 3.2 min waiting time
     a74:	f8 e1       	ldi	r31, 0x18	; 24
     a76:	df 2e       	mov	r13, r31
     a78:	f0 2d       	mov	r31, r0
     a7a:	ee 24       	eor	r14, r14
			RX_iter = 0;	
			displayConnecting( f_meas_available );
			do
			{
				_delay_ms(1000); // 1 sec
				newData = 1;
     a7c:	e3 94       	inc	r14
	init_WL_mgmt();		displayLCD_main(1, "Initializing: ", 100, "%");	_delay_ms(500);
	
/*-------------- Cycle loop -----------*/
	while(f_wdt == 1)
	{
		pwrMngmntCycle += 1;
     a7e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     a82:	8f 5f       	subi	r24, 0xFF	; 255
     a84:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		display_cycles += 1;	// Used for counting passed cycles since last display update (measurement or error)
		if (pwrMngmntCycle >= PWR_MNGMNT_CYCLE)
     a88:	8e 31       	cpi	r24, 0x1E	; 30
	
/*-------------- Cycle loop -----------*/
	while(f_wdt == 1)
	{
		pwrMngmntCycle += 1;
		display_cycles += 1;	// Used for counting passed cycles since last display update (measurement or error)
     a8a:	10 f4       	brcc	.+4      	; 0xa90 <main+0xf6>
     a8c:	cf 5f       	subi	r28, 0xFF	; 255
		if (pwrMngmntCycle >= PWR_MNGMNT_CYCLE)
		{
			init_nrf24l01_rx();
     a8e:	30 c0       	rjmp	.+96     	; 0xaf0 <main+0x156>
     a90:	d9 dc       	rcall	.-1614   	; 0x444 <init_nrf24l01_rx>
			RX_iter = 0;	
			displayConnecting( f_meas_available );
     a92:	8f 2d       	mov	r24, r15
     a94:	a3 db       	rcall	.-2234   	; 0x1dc <displayConnecting>
     a96:	2f ef       	ldi	r18, 0xFF	; 255
     a98:	83 ed       	ldi	r24, 0xD3	; 211
     a9a:	90 e3       	ldi	r25, 0x30	; 48
     a9c:	21 50       	subi	r18, 0x01	; 1
     a9e:	80 40       	sbci	r24, 0x00	; 0
     aa0:	90 40       	sbci	r25, 0x00	; 0
     aa2:	e1 f7       	brne	.-8      	; 0xa9c <main+0x102>
     aa4:	00 c0       	rjmp	.+0      	; 0xaa6 <main+0x10c>
			do
			{
				_delay_ms(1000); // 1 sec
				newData = 1;
				RX_iter += 1;
				reset();
     aa6:	00 00       	nop
				receive_data();	// 2 sec waiting -> 3 sec a complete waiting cycle
     aa8:	f0 db       	rcall	.-2080   	; 0x28a <reset>
     aaa:	0d dd       	rcall	.-1510   	; 0x4c6 <receive_data>
     aac:	c4 e6       	ldi	r28, 0x64	; 100
     aae:	18 c0       	rjmp	.+48     	; 0xae0 <main+0x146>
     ab0:	ef ef       	ldi	r30, 0xFF	; 255
     ab2:	f3 ed       	ldi	r31, 0xD3	; 211
     ab4:	20 e3       	ldi	r18, 0x30	; 48
     ab6:	e1 50       	subi	r30, 0x01	; 1
     ab8:	f0 40       	sbci	r31, 0x00	; 0
     aba:	20 40       	sbci	r18, 0x00	; 0
			do
			{
				_delay_ms(1000); // 1 sec
				newData = 1;
				RX_iter += 1;
				reset();
     abc:	e1 f7       	brne	.-8      	; 0xab6 <main+0x11c>
     abe:	00 c0       	rjmp	.+0      	; 0xac0 <main+0x126>
				receive_data();	// 2 sec waiting -> 3 sec a complete waiting cycle
     ac0:	00 00       	nop
     ac2:	e3 db       	rcall	.-2106   	; 0x28a <reset>
				if (RX_iter > RX_MAX_ITER)	// 
     ac4:	00 dd       	rcall	.-1536   	; 0x4c6 <receive_data>
				{
					displayNoResp(f_meas_available);
     ac6:	c1 50       	subi	r28, 0x01	; 1
					newData = 0;
					pmpSt = 0;	// No connection with slave -> turn off pump
     ac8:	59 f4       	brne	.+22     	; 0xae0 <main+0x146>
     aca:	8f 2d       	mov	r24, r15
					ledSt = 0;	// No connection with slave -> turn off LED
     acc:	a8 db       	rcall	.-2224   	; 0x21e <displayNoResp>
					display_cycles = 0;	// Reset display update after running a cycle
					break;
				}
			} while ((GetReg(STATUS) & (1<<RX_DR)) <= 0 );		// Bit 6 set on CONFIG Register -> RX successful
			turnOff_nrf24l01(); 	// TUrn off radio
     ace:	10 92 29 02 	sts	0x0229, r1	; 0x800229 <pmpSt>
			
			/* Set power management cycle for the case connection is lost -> waiting for less time than between measurements */
			pwrMngmntCycle = 24;	// Save 3.2 min waiting time
     ad2:	10 92 28 02 	sts	0x0228, r1	; 0x800228 <ledSt>
				reset();
				receive_data();	// 2 sec waiting -> 3 sec a complete waiting cycle
				if (RX_iter > RX_MAX_ITER)	// 
				{
					displayNoResp(f_meas_available);
					newData = 0;
     ad6:	da dc       	rcall	.-1612   	; 0x48c <turnOff_nrf24l01>
     ad8:	d0 92 00 01 	sts	0x0100, r13	; 0x800100 <__data_start>
					pmpSt = 0;	// No connection with slave -> turn off pump
					ledSt = 0;	// No connection with slave -> turn off LED
					display_cycles = 0;	// Reset display update after running a cycle
					break;
				}
			} while ((GetReg(STATUS) & (1<<RX_DR)) <= 0 );		// Bit 6 set on CONFIG Register -> RX successful
     adc:	d0 e0       	ldi	r29, 0x00	; 0
     ade:	05 c0       	rjmp	.+10     	; 0xaea <main+0x150>
     ae0:	87 e0       	ldi	r24, 0x07	; 7
     ae2:	c0 db       	rcall	.-2176   	; 0x264 <GetReg>
				pwrMngmntCycle = 0;
			}
			display_cycles = 0;	// Reset display update after running a cycle
			
			/* Pump and LED control */
			controlPump();			// Control of water pump
     ae4:	86 ff       	sbrs	r24, 6
     ae6:	e4 cf       	rjmp	.-56     	; 0xab0 <main+0x116>
			controlLED();			// Control of LED
     ae8:	0f c0       	rjmp	.+30     	; 0xb08 <main+0x16e>
				val = WriteToNrf(R,R_RX_PAYLOAD,val,5);
				MasterCoreMain( val[0], val[1], val[2] ); // (Slave-respose, measurement value, battery SOC)
				/* Reset Power_management cycle number */
				pwrMngmntCycle = 0;
			}
			display_cycles = 0;	// Reset display update after running a cycle
     aea:	52 db       	rcall	.-2396   	; 0x190 <controlPump>
			/* Pump and LED control */
			controlPump();			// Control of water pump
			controlLED();			// Control of LED
			
		}		// end if (pwrMngmntCycle >= PWR_MNGMNT_CYCLE)
		UpdateMeasurementsTime(newData, display_cycles);
     aec:	5b db       	rcall	.-2378   	; 0x1a4 <controlLED>
     aee:	c0 e0       	ldi	r28, 0x00	; 0
     af0:	6c 2f       	mov	r22, r28
     af2:	8d 2f       	mov	r24, r29
		PwrMngmnt_main();	
     af4:	61 db       	rcall	.-2366   	; 0x1b8 <UpdateMeasurementsTime>
	init_SPI(); 		displayLCD_main(1, "Initializing: ", 33, "%");	_delay_ms(250);
	init_nrf24l01();	displayLCD_main(1, "Initializing: ", 67, "%");	_delay_ms(250);
	init_WL_mgmt();		displayLCD_main(1, "Initializing: ", 100, "%");	_delay_ms(500);
	
/*-------------- Cycle loop -----------*/
	while(f_wdt == 1)
     af6:	26 dd       	rcall	.-1460   	; 0x544 <PwrMngmnt_main>
     af8:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <f_wdt>
     afc:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <f_wdt+0x1>
     b00:	01 97       	sbiw	r24, 0x01	; 1
     b02:	09 f4       	brne	.+2      	; 0xb06 <main+0x16c>
     b04:	bc cf       	rjmp	.-136    	; 0xa7e <main+0xe4>
					ledSt = 0;	// No connection with slave -> turn off LED
					display_cycles = 0;	// Reset display update after running a cycle
					break;
				}
			} while ((GetReg(STATUS) & (1<<RX_DR)) <= 0 );		// Bit 6 set on CONFIG Register -> RX successful
			turnOff_nrf24l01(); 	// TUrn off radio
     b06:	13 c0       	rjmp	.+38     	; 0xb2e <main+0x194>
     b08:	c1 dc       	rcall	.-1662   	; 0x48c <turnOff_nrf24l01>
			
			/* Set power management cycle for the case connection is lost -> waiting for less time than between measurements */
			pwrMngmntCycle = 24;	// Save 3.2 min waiting time
     b0a:	d0 92 00 01 	sts	0x0100, r13	; 0x800100 <__data_start>
			/* New measurements are available */
			if ( newData == 1 )
			{
				/* Evaluate the response from Slave */
				f_meas_available = 1;	// At least one measurement available since last start
				val = WriteToNrf(R,R_RX_PAYLOAD,val,5);
     b0e:	25 e0       	ldi	r18, 0x05	; 5
     b10:	a8 01       	movw	r20, r16
     b12:	61 e6       	ldi	r22, 0x61	; 97
     b14:	80 e0       	ldi	r24, 0x00	; 0
     b16:	d0 db       	rcall	.-2144   	; 0x2b8 <WriteToNrf>
     b18:	8c 01       	movw	r16, r24
     b1a:	fc 01       	movw	r30, r24
				MasterCoreMain( val[0], val[1], val[2] ); // (Slave-respose, measurement value, battery SOC)
     b1c:	42 81       	ldd	r20, Z+2	; 0x02
     b1e:	61 81       	ldd	r22, Z+1	; 0x01
     b20:	80 81       	ld	r24, Z
     b22:	0d db       	rcall	.-2534   	; 0x13e <MasterCoreMain>
     b24:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
				/* Reset Power_management cycle number */
				pwrMngmntCycle = 0;
     b28:	de 2d       	mov	r29, r14
     b2a:	fe 2c       	mov	r15, r14
			RX_iter = 0;	
			displayConnecting( f_meas_available );
			do
			{
				_delay_ms(1000); // 1 sec
				newData = 1;
     b2c:	de cf       	rjmp	.-68     	; 0xaea <main+0x150>
			
			/* New measurements are available */
			if ( newData == 1 )
			{
				/* Evaluate the response from Slave */
				f_meas_available = 1;	// At least one measurement available since last start
     b2e:	80 e0       	ldi	r24, 0x00	; 0
     b30:	90 e0       	ldi	r25, 0x00	; 0
		}		// end if (pwrMngmntCycle >= PWR_MNGMNT_CYCLE)
		UpdateMeasurementsTime(newData, display_cycles);
		PwrMngmnt_main();	
	}		// end while(f_wdt == 1)
	return 0;
}
     b32:	df 91       	pop	r29
     b34:	cf 91       	pop	r28
     b36:	1f 91       	pop	r17
     b38:	0f 91       	pop	r16
     b3a:	ff 90       	pop	r15
     b3c:	ef 90       	pop	r14
     b3e:	df 90       	pop	r13
     b40:	08 95       	ret

00000b42 <__vector_6>:
     b42:	1f 92       	push	r1
     b44:	0f 92       	push	r0


/* Watchdog interrupt */
ISR(WDT_vect)
{
     b46:	0f b6       	in	r0, 0x3f	; 63
     b48:	0f 92       	push	r0
     b4a:	11 24       	eor	r1, r1
     b4c:	8f 93       	push	r24
     b4e:	9f 93       	push	r25
	/* set the flag. */
	if(f_wdt == 0)
     b50:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <f_wdt>
     b54:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <f_wdt+0x1>
     b58:	89 2b       	or	r24, r25
     b5a:	31 f4       	brne	.+12     	; 0xb68 <__vector_6+0x26>
	{
		f_wdt = 1;
     b5c:	81 e0       	ldi	r24, 0x01	; 1
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <f_wdt+0x1>
     b64:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <f_wdt>
	}
	//else there is an error -> flag was not cleared
}
     b68:	9f 91       	pop	r25
     b6a:	8f 91       	pop	r24
     b6c:	0f 90       	pop	r0
     b6e:	0f be       	out	0x3f, r0	; 63
     b70:	0f 90       	pop	r0
     b72:	1f 90       	pop	r1
     b74:	18 95       	reti

00000b76 <strcmp>:
     b76:	fb 01       	movw	r30, r22
     b78:	dc 01       	movw	r26, r24
     b7a:	8d 91       	ld	r24, X+
     b7c:	01 90       	ld	r0, Z+
     b7e:	80 19       	sub	r24, r0
     b80:	01 10       	cpse	r0, r1
     b82:	d9 f3       	breq	.-10     	; 0xb7a <strcmp+0x4>
     b84:	99 0b       	sbc	r25, r25
     b86:	08 95       	ret

00000b88 <__itoa_ncheck>:
     b88:	bb 27       	eor	r27, r27
     b8a:	4a 30       	cpi	r20, 0x0A	; 10
     b8c:	31 f4       	brne	.+12     	; 0xb9a <__itoa_ncheck+0x12>
     b8e:	99 23       	and	r25, r25
     b90:	22 f4       	brpl	.+8      	; 0xb9a <__itoa_ncheck+0x12>
     b92:	bd e2       	ldi	r27, 0x2D	; 45
     b94:	90 95       	com	r25
     b96:	81 95       	neg	r24
     b98:	9f 4f       	sbci	r25, 0xFF	; 255
     b9a:	01 c0       	rjmp	.+2      	; 0xb9e <__utoa_common>

00000b9c <__utoa_ncheck>:
     b9c:	bb 27       	eor	r27, r27

00000b9e <__utoa_common>:
     b9e:	fb 01       	movw	r30, r22
     ba0:	55 27       	eor	r21, r21
     ba2:	aa 27       	eor	r26, r26
     ba4:	88 0f       	add	r24, r24
     ba6:	99 1f       	adc	r25, r25
     ba8:	aa 1f       	adc	r26, r26
     baa:	a4 17       	cp	r26, r20
     bac:	10 f0       	brcs	.+4      	; 0xbb2 <__utoa_common+0x14>
     bae:	a4 1b       	sub	r26, r20
     bb0:	83 95       	inc	r24
     bb2:	50 51       	subi	r21, 0x10	; 16
     bb4:	b9 f7       	brne	.-18     	; 0xba4 <__utoa_common+0x6>
     bb6:	a0 5d       	subi	r26, 0xD0	; 208
     bb8:	aa 33       	cpi	r26, 0x3A	; 58
     bba:	08 f0       	brcs	.+2      	; 0xbbe <__utoa_common+0x20>
     bbc:	a9 5d       	subi	r26, 0xD9	; 217
     bbe:	a1 93       	st	Z+, r26
     bc0:	00 97       	sbiw	r24, 0x00	; 0
     bc2:	79 f7       	brne	.-34     	; 0xba2 <__utoa_common+0x4>
     bc4:	b1 11       	cpse	r27, r1
     bc6:	b1 93       	st	Z+, r27
     bc8:	11 92       	st	Z+, r1
     bca:	cb 01       	movw	r24, r22
     bcc:	15 c2       	rjmp	.+1066   	; 0xff8 <strrev>

00000bce <snprintf>:
     bce:	ae e0       	ldi	r26, 0x0E	; 14
     bd0:	b0 e0       	ldi	r27, 0x00	; 0
     bd2:	ec ee       	ldi	r30, 0xEC	; 236
     bd4:	f5 e0       	ldi	r31, 0x05	; 5
     bd6:	c8 c2       	rjmp	.+1424   	; 0x1168 <__prologue_saves__+0x1c>
     bd8:	0d 89       	ldd	r16, Y+21	; 0x15
     bda:	1e 89       	ldd	r17, Y+22	; 0x16
     bdc:	8f 89       	ldd	r24, Y+23	; 0x17
     bde:	98 8d       	ldd	r25, Y+24	; 0x18
     be0:	26 e0       	ldi	r18, 0x06	; 6
     be2:	2c 83       	std	Y+4, r18	; 0x04
     be4:	1a 83       	std	Y+2, r17	; 0x02
     be6:	09 83       	std	Y+1, r16	; 0x01
     be8:	97 ff       	sbrs	r25, 7
     bea:	02 c0       	rjmp	.+4      	; 0xbf0 <snprintf+0x22>
     bec:	80 e0       	ldi	r24, 0x00	; 0
     bee:	90 e8       	ldi	r25, 0x80	; 128
     bf0:	01 97       	sbiw	r24, 0x01	; 1
     bf2:	9e 83       	std	Y+6, r25	; 0x06
     bf4:	8d 83       	std	Y+5, r24	; 0x05
     bf6:	ae 01       	movw	r20, r28
     bf8:	45 5e       	subi	r20, 0xE5	; 229
     bfa:	5f 4f       	sbci	r21, 0xFF	; 255
     bfc:	69 8d       	ldd	r22, Y+25	; 0x19
     bfe:	7a 8d       	ldd	r23, Y+26	; 0x1a
     c00:	ce 01       	movw	r24, r28
     c02:	01 96       	adiw	r24, 0x01	; 1
     c04:	11 d0       	rcall	.+34     	; 0xc28 <vfprintf>
     c06:	4d 81       	ldd	r20, Y+5	; 0x05
     c08:	5e 81       	ldd	r21, Y+6	; 0x06
     c0a:	57 fd       	sbrc	r21, 7
     c0c:	0a c0       	rjmp	.+20     	; 0xc22 <snprintf+0x54>
     c0e:	2f 81       	ldd	r18, Y+7	; 0x07
     c10:	38 85       	ldd	r19, Y+8	; 0x08
     c12:	42 17       	cp	r20, r18
     c14:	53 07       	cpc	r21, r19
     c16:	0c f4       	brge	.+2      	; 0xc1a <snprintf+0x4c>
     c18:	9a 01       	movw	r18, r20
     c1a:	f8 01       	movw	r30, r16
     c1c:	e2 0f       	add	r30, r18
     c1e:	f3 1f       	adc	r31, r19
     c20:	10 82       	st	Z, r1
     c22:	2e 96       	adiw	r28, 0x0e	; 14
     c24:	e4 e0       	ldi	r30, 0x04	; 4
     c26:	bc c2       	rjmp	.+1400   	; 0x11a0 <__epilogue_restores__+0x1c>

00000c28 <vfprintf>:
     c28:	ab e0       	ldi	r26, 0x0B	; 11
     c2a:	b0 e0       	ldi	r27, 0x00	; 0
     c2c:	e9 e1       	ldi	r30, 0x19	; 25
     c2e:	f6 e0       	ldi	r31, 0x06	; 6
     c30:	8d c2       	rjmp	.+1306   	; 0x114c <__prologue_saves__>
     c32:	6c 01       	movw	r12, r24
     c34:	7b 01       	movw	r14, r22
     c36:	8a 01       	movw	r16, r20
     c38:	fc 01       	movw	r30, r24
     c3a:	17 82       	std	Z+7, r1	; 0x07
     c3c:	16 82       	std	Z+6, r1	; 0x06
     c3e:	83 81       	ldd	r24, Z+3	; 0x03
     c40:	81 ff       	sbrs	r24, 1
     c42:	bf c1       	rjmp	.+894    	; 0xfc2 <vfprintf+0x39a>
     c44:	ce 01       	movw	r24, r28
     c46:	01 96       	adiw	r24, 0x01	; 1
     c48:	3c 01       	movw	r6, r24
     c4a:	f6 01       	movw	r30, r12
     c4c:	93 81       	ldd	r25, Z+3	; 0x03
     c4e:	f7 01       	movw	r30, r14
     c50:	93 fd       	sbrc	r25, 3
     c52:	85 91       	lpm	r24, Z+
     c54:	93 ff       	sbrs	r25, 3
     c56:	81 91       	ld	r24, Z+
     c58:	7f 01       	movw	r14, r30
     c5a:	88 23       	and	r24, r24
     c5c:	09 f4       	brne	.+2      	; 0xc60 <vfprintf+0x38>
     c5e:	ad c1       	rjmp	.+858    	; 0xfba <vfprintf+0x392>
     c60:	85 32       	cpi	r24, 0x25	; 37
     c62:	39 f4       	brne	.+14     	; 0xc72 <vfprintf+0x4a>
     c64:	93 fd       	sbrc	r25, 3
     c66:	85 91       	lpm	r24, Z+
     c68:	93 ff       	sbrs	r25, 3
     c6a:	81 91       	ld	r24, Z+
     c6c:	7f 01       	movw	r14, r30
     c6e:	85 32       	cpi	r24, 0x25	; 37
     c70:	21 f4       	brne	.+8      	; 0xc7a <vfprintf+0x52>
     c72:	b6 01       	movw	r22, r12
     c74:	90 e0       	ldi	r25, 0x00	; 0
     c76:	d0 d1       	rcall	.+928    	; 0x1018 <fputc>
     c78:	e8 cf       	rjmp	.-48     	; 0xc4a <vfprintf+0x22>
     c7a:	91 2c       	mov	r9, r1
     c7c:	21 2c       	mov	r2, r1
     c7e:	31 2c       	mov	r3, r1
     c80:	ff e1       	ldi	r31, 0x1F	; 31
     c82:	f3 15       	cp	r31, r3
     c84:	d8 f0       	brcs	.+54     	; 0xcbc <vfprintf+0x94>
     c86:	8b 32       	cpi	r24, 0x2B	; 43
     c88:	79 f0       	breq	.+30     	; 0xca8 <vfprintf+0x80>
     c8a:	38 f4       	brcc	.+14     	; 0xc9a <vfprintf+0x72>
     c8c:	80 32       	cpi	r24, 0x20	; 32
     c8e:	79 f0       	breq	.+30     	; 0xcae <vfprintf+0x86>
     c90:	83 32       	cpi	r24, 0x23	; 35
     c92:	a1 f4       	brne	.+40     	; 0xcbc <vfprintf+0x94>
     c94:	23 2d       	mov	r18, r3
     c96:	20 61       	ori	r18, 0x10	; 16
     c98:	1d c0       	rjmp	.+58     	; 0xcd4 <vfprintf+0xac>
     c9a:	8d 32       	cpi	r24, 0x2D	; 45
     c9c:	61 f0       	breq	.+24     	; 0xcb6 <vfprintf+0x8e>
     c9e:	80 33       	cpi	r24, 0x30	; 48
     ca0:	69 f4       	brne	.+26     	; 0xcbc <vfprintf+0x94>
     ca2:	23 2d       	mov	r18, r3
     ca4:	21 60       	ori	r18, 0x01	; 1
     ca6:	16 c0       	rjmp	.+44     	; 0xcd4 <vfprintf+0xac>
     ca8:	83 2d       	mov	r24, r3
     caa:	82 60       	ori	r24, 0x02	; 2
     cac:	38 2e       	mov	r3, r24
     cae:	e3 2d       	mov	r30, r3
     cb0:	e4 60       	ori	r30, 0x04	; 4
     cb2:	3e 2e       	mov	r3, r30
     cb4:	2a c0       	rjmp	.+84     	; 0xd0a <vfprintf+0xe2>
     cb6:	f3 2d       	mov	r31, r3
     cb8:	f8 60       	ori	r31, 0x08	; 8
     cba:	1d c0       	rjmp	.+58     	; 0xcf6 <vfprintf+0xce>
     cbc:	37 fc       	sbrc	r3, 7
     cbe:	2d c0       	rjmp	.+90     	; 0xd1a <vfprintf+0xf2>
     cc0:	20 ed       	ldi	r18, 0xD0	; 208
     cc2:	28 0f       	add	r18, r24
     cc4:	2a 30       	cpi	r18, 0x0A	; 10
     cc6:	40 f0       	brcs	.+16     	; 0xcd8 <vfprintf+0xb0>
     cc8:	8e 32       	cpi	r24, 0x2E	; 46
     cca:	b9 f4       	brne	.+46     	; 0xcfa <vfprintf+0xd2>
     ccc:	36 fc       	sbrc	r3, 6
     cce:	75 c1       	rjmp	.+746    	; 0xfba <vfprintf+0x392>
     cd0:	23 2d       	mov	r18, r3
     cd2:	20 64       	ori	r18, 0x40	; 64
     cd4:	32 2e       	mov	r3, r18
     cd6:	19 c0       	rjmp	.+50     	; 0xd0a <vfprintf+0xe2>
     cd8:	36 fe       	sbrs	r3, 6
     cda:	06 c0       	rjmp	.+12     	; 0xce8 <vfprintf+0xc0>
     cdc:	8a e0       	ldi	r24, 0x0A	; 10
     cde:	98 9e       	mul	r9, r24
     ce0:	20 0d       	add	r18, r0
     ce2:	11 24       	eor	r1, r1
     ce4:	92 2e       	mov	r9, r18
     ce6:	11 c0       	rjmp	.+34     	; 0xd0a <vfprintf+0xe2>
     ce8:	ea e0       	ldi	r30, 0x0A	; 10
     cea:	2e 9e       	mul	r2, r30
     cec:	20 0d       	add	r18, r0
     cee:	11 24       	eor	r1, r1
     cf0:	22 2e       	mov	r2, r18
     cf2:	f3 2d       	mov	r31, r3
     cf4:	f0 62       	ori	r31, 0x20	; 32
     cf6:	3f 2e       	mov	r3, r31
     cf8:	08 c0       	rjmp	.+16     	; 0xd0a <vfprintf+0xe2>
     cfa:	8c 36       	cpi	r24, 0x6C	; 108
     cfc:	21 f4       	brne	.+8      	; 0xd06 <vfprintf+0xde>
     cfe:	83 2d       	mov	r24, r3
     d00:	80 68       	ori	r24, 0x80	; 128
     d02:	38 2e       	mov	r3, r24
     d04:	02 c0       	rjmp	.+4      	; 0xd0a <vfprintf+0xe2>
     d06:	88 36       	cpi	r24, 0x68	; 104
     d08:	41 f4       	brne	.+16     	; 0xd1a <vfprintf+0xf2>
     d0a:	f7 01       	movw	r30, r14
     d0c:	93 fd       	sbrc	r25, 3
     d0e:	85 91       	lpm	r24, Z+
     d10:	93 ff       	sbrs	r25, 3
     d12:	81 91       	ld	r24, Z+
     d14:	7f 01       	movw	r14, r30
     d16:	81 11       	cpse	r24, r1
     d18:	b3 cf       	rjmp	.-154    	; 0xc80 <vfprintf+0x58>
     d1a:	98 2f       	mov	r25, r24
     d1c:	9f 7d       	andi	r25, 0xDF	; 223
     d1e:	95 54       	subi	r25, 0x45	; 69
     d20:	93 30       	cpi	r25, 0x03	; 3
     d22:	28 f4       	brcc	.+10     	; 0xd2e <vfprintf+0x106>
     d24:	0c 5f       	subi	r16, 0xFC	; 252
     d26:	1f 4f       	sbci	r17, 0xFF	; 255
     d28:	9f e3       	ldi	r25, 0x3F	; 63
     d2a:	99 83       	std	Y+1, r25	; 0x01
     d2c:	0d c0       	rjmp	.+26     	; 0xd48 <vfprintf+0x120>
     d2e:	83 36       	cpi	r24, 0x63	; 99
     d30:	31 f0       	breq	.+12     	; 0xd3e <vfprintf+0x116>
     d32:	83 37       	cpi	r24, 0x73	; 115
     d34:	71 f0       	breq	.+28     	; 0xd52 <vfprintf+0x12a>
     d36:	83 35       	cpi	r24, 0x53	; 83
     d38:	09 f0       	breq	.+2      	; 0xd3c <vfprintf+0x114>
     d3a:	55 c0       	rjmp	.+170    	; 0xde6 <vfprintf+0x1be>
     d3c:	20 c0       	rjmp	.+64     	; 0xd7e <vfprintf+0x156>
     d3e:	f8 01       	movw	r30, r16
     d40:	80 81       	ld	r24, Z
     d42:	89 83       	std	Y+1, r24	; 0x01
     d44:	0e 5f       	subi	r16, 0xFE	; 254
     d46:	1f 4f       	sbci	r17, 0xFF	; 255
     d48:	88 24       	eor	r8, r8
     d4a:	83 94       	inc	r8
     d4c:	91 2c       	mov	r9, r1
     d4e:	53 01       	movw	r10, r6
     d50:	12 c0       	rjmp	.+36     	; 0xd76 <vfprintf+0x14e>
     d52:	28 01       	movw	r4, r16
     d54:	f2 e0       	ldi	r31, 0x02	; 2
     d56:	4f 0e       	add	r4, r31
     d58:	51 1c       	adc	r5, r1
     d5a:	f8 01       	movw	r30, r16
     d5c:	a0 80       	ld	r10, Z
     d5e:	b1 80       	ldd	r11, Z+1	; 0x01
     d60:	36 fe       	sbrs	r3, 6
     d62:	03 c0       	rjmp	.+6      	; 0xd6a <vfprintf+0x142>
     d64:	69 2d       	mov	r22, r9
     d66:	70 e0       	ldi	r23, 0x00	; 0
     d68:	02 c0       	rjmp	.+4      	; 0xd6e <vfprintf+0x146>
     d6a:	6f ef       	ldi	r22, 0xFF	; 255
     d6c:	7f ef       	ldi	r23, 0xFF	; 255
     d6e:	c5 01       	movw	r24, r10
     d70:	38 d1       	rcall	.+624    	; 0xfe2 <strnlen>
     d72:	4c 01       	movw	r8, r24
     d74:	82 01       	movw	r16, r4
     d76:	f3 2d       	mov	r31, r3
     d78:	ff 77       	andi	r31, 0x7F	; 127
     d7a:	3f 2e       	mov	r3, r31
     d7c:	15 c0       	rjmp	.+42     	; 0xda8 <vfprintf+0x180>
     d7e:	28 01       	movw	r4, r16
     d80:	22 e0       	ldi	r18, 0x02	; 2
     d82:	42 0e       	add	r4, r18
     d84:	51 1c       	adc	r5, r1
     d86:	f8 01       	movw	r30, r16
     d88:	a0 80       	ld	r10, Z
     d8a:	b1 80       	ldd	r11, Z+1	; 0x01
     d8c:	36 fe       	sbrs	r3, 6
     d8e:	03 c0       	rjmp	.+6      	; 0xd96 <vfprintf+0x16e>
     d90:	69 2d       	mov	r22, r9
     d92:	70 e0       	ldi	r23, 0x00	; 0
     d94:	02 c0       	rjmp	.+4      	; 0xd9a <vfprintf+0x172>
     d96:	6f ef       	ldi	r22, 0xFF	; 255
     d98:	7f ef       	ldi	r23, 0xFF	; 255
     d9a:	c5 01       	movw	r24, r10
     d9c:	17 d1       	rcall	.+558    	; 0xfcc <strnlen_P>
     d9e:	4c 01       	movw	r8, r24
     da0:	f3 2d       	mov	r31, r3
     da2:	f0 68       	ori	r31, 0x80	; 128
     da4:	3f 2e       	mov	r3, r31
     da6:	82 01       	movw	r16, r4
     da8:	33 fc       	sbrc	r3, 3
     daa:	19 c0       	rjmp	.+50     	; 0xdde <vfprintf+0x1b6>
     dac:	82 2d       	mov	r24, r2
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	88 16       	cp	r8, r24
     db2:	99 06       	cpc	r9, r25
     db4:	a0 f4       	brcc	.+40     	; 0xdde <vfprintf+0x1b6>
     db6:	b6 01       	movw	r22, r12
     db8:	80 e2       	ldi	r24, 0x20	; 32
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	2d d1       	rcall	.+602    	; 0x1018 <fputc>
     dbe:	2a 94       	dec	r2
     dc0:	f5 cf       	rjmp	.-22     	; 0xdac <vfprintf+0x184>
     dc2:	f5 01       	movw	r30, r10
     dc4:	37 fc       	sbrc	r3, 7
     dc6:	85 91       	lpm	r24, Z+
     dc8:	37 fe       	sbrs	r3, 7
     dca:	81 91       	ld	r24, Z+
     dcc:	5f 01       	movw	r10, r30
     dce:	b6 01       	movw	r22, r12
     dd0:	90 e0       	ldi	r25, 0x00	; 0
     dd2:	22 d1       	rcall	.+580    	; 0x1018 <fputc>
     dd4:	21 10       	cpse	r2, r1
     dd6:	2a 94       	dec	r2
     dd8:	21 e0       	ldi	r18, 0x01	; 1
     dda:	82 1a       	sub	r8, r18
     ddc:	91 08       	sbc	r9, r1
     dde:	81 14       	cp	r8, r1
     de0:	91 04       	cpc	r9, r1
     de2:	79 f7       	brne	.-34     	; 0xdc2 <vfprintf+0x19a>
     de4:	e1 c0       	rjmp	.+450    	; 0xfa8 <vfprintf+0x380>
     de6:	84 36       	cpi	r24, 0x64	; 100
     de8:	11 f0       	breq	.+4      	; 0xdee <vfprintf+0x1c6>
     dea:	89 36       	cpi	r24, 0x69	; 105
     dec:	39 f5       	brne	.+78     	; 0xe3c <vfprintf+0x214>
     dee:	f8 01       	movw	r30, r16
     df0:	37 fe       	sbrs	r3, 7
     df2:	07 c0       	rjmp	.+14     	; 0xe02 <vfprintf+0x1da>
     df4:	60 81       	ld	r22, Z
     df6:	71 81       	ldd	r23, Z+1	; 0x01
     df8:	82 81       	ldd	r24, Z+2	; 0x02
     dfa:	93 81       	ldd	r25, Z+3	; 0x03
     dfc:	0c 5f       	subi	r16, 0xFC	; 252
     dfe:	1f 4f       	sbci	r17, 0xFF	; 255
     e00:	08 c0       	rjmp	.+16     	; 0xe12 <vfprintf+0x1ea>
     e02:	60 81       	ld	r22, Z
     e04:	71 81       	ldd	r23, Z+1	; 0x01
     e06:	07 2e       	mov	r0, r23
     e08:	00 0c       	add	r0, r0
     e0a:	88 0b       	sbc	r24, r24
     e0c:	99 0b       	sbc	r25, r25
     e0e:	0e 5f       	subi	r16, 0xFE	; 254
     e10:	1f 4f       	sbci	r17, 0xFF	; 255
     e12:	f3 2d       	mov	r31, r3
     e14:	ff 76       	andi	r31, 0x6F	; 111
     e16:	3f 2e       	mov	r3, r31
     e18:	97 ff       	sbrs	r25, 7
     e1a:	09 c0       	rjmp	.+18     	; 0xe2e <vfprintf+0x206>
     e1c:	90 95       	com	r25
     e1e:	80 95       	com	r24
     e20:	70 95       	com	r23
     e22:	61 95       	neg	r22
     e24:	7f 4f       	sbci	r23, 0xFF	; 255
     e26:	8f 4f       	sbci	r24, 0xFF	; 255
     e28:	9f 4f       	sbci	r25, 0xFF	; 255
     e2a:	f0 68       	ori	r31, 0x80	; 128
     e2c:	3f 2e       	mov	r3, r31
     e2e:	2a e0       	ldi	r18, 0x0A	; 10
     e30:	30 e0       	ldi	r19, 0x00	; 0
     e32:	a3 01       	movw	r20, r6
     e34:	2d d1       	rcall	.+602    	; 0x1090 <__ultoa_invert>
     e36:	88 2e       	mov	r8, r24
     e38:	86 18       	sub	r8, r6
     e3a:	44 c0       	rjmp	.+136    	; 0xec4 <vfprintf+0x29c>
     e3c:	85 37       	cpi	r24, 0x75	; 117
     e3e:	31 f4       	brne	.+12     	; 0xe4c <vfprintf+0x224>
     e40:	23 2d       	mov	r18, r3
     e42:	2f 7e       	andi	r18, 0xEF	; 239
     e44:	b2 2e       	mov	r11, r18
     e46:	2a e0       	ldi	r18, 0x0A	; 10
     e48:	30 e0       	ldi	r19, 0x00	; 0
     e4a:	25 c0       	rjmp	.+74     	; 0xe96 <vfprintf+0x26e>
     e4c:	93 2d       	mov	r25, r3
     e4e:	99 7f       	andi	r25, 0xF9	; 249
     e50:	b9 2e       	mov	r11, r25
     e52:	8f 36       	cpi	r24, 0x6F	; 111
     e54:	c1 f0       	breq	.+48     	; 0xe86 <vfprintf+0x25e>
     e56:	18 f4       	brcc	.+6      	; 0xe5e <vfprintf+0x236>
     e58:	88 35       	cpi	r24, 0x58	; 88
     e5a:	79 f0       	breq	.+30     	; 0xe7a <vfprintf+0x252>
     e5c:	ae c0       	rjmp	.+348    	; 0xfba <vfprintf+0x392>
     e5e:	80 37       	cpi	r24, 0x70	; 112
     e60:	19 f0       	breq	.+6      	; 0xe68 <vfprintf+0x240>
     e62:	88 37       	cpi	r24, 0x78	; 120
     e64:	21 f0       	breq	.+8      	; 0xe6e <vfprintf+0x246>
     e66:	a9 c0       	rjmp	.+338    	; 0xfba <vfprintf+0x392>
     e68:	e9 2f       	mov	r30, r25
     e6a:	e0 61       	ori	r30, 0x10	; 16
     e6c:	be 2e       	mov	r11, r30
     e6e:	b4 fe       	sbrs	r11, 4
     e70:	0d c0       	rjmp	.+26     	; 0xe8c <vfprintf+0x264>
     e72:	fb 2d       	mov	r31, r11
     e74:	f4 60       	ori	r31, 0x04	; 4
     e76:	bf 2e       	mov	r11, r31
     e78:	09 c0       	rjmp	.+18     	; 0xe8c <vfprintf+0x264>
     e7a:	34 fe       	sbrs	r3, 4
     e7c:	0a c0       	rjmp	.+20     	; 0xe92 <vfprintf+0x26a>
     e7e:	29 2f       	mov	r18, r25
     e80:	26 60       	ori	r18, 0x06	; 6
     e82:	b2 2e       	mov	r11, r18
     e84:	06 c0       	rjmp	.+12     	; 0xe92 <vfprintf+0x26a>
     e86:	28 e0       	ldi	r18, 0x08	; 8
     e88:	30 e0       	ldi	r19, 0x00	; 0
     e8a:	05 c0       	rjmp	.+10     	; 0xe96 <vfprintf+0x26e>
     e8c:	20 e1       	ldi	r18, 0x10	; 16
     e8e:	30 e0       	ldi	r19, 0x00	; 0
     e90:	02 c0       	rjmp	.+4      	; 0xe96 <vfprintf+0x26e>
     e92:	20 e1       	ldi	r18, 0x10	; 16
     e94:	32 e0       	ldi	r19, 0x02	; 2
     e96:	f8 01       	movw	r30, r16
     e98:	b7 fe       	sbrs	r11, 7
     e9a:	07 c0       	rjmp	.+14     	; 0xeaa <vfprintf+0x282>
     e9c:	60 81       	ld	r22, Z
     e9e:	71 81       	ldd	r23, Z+1	; 0x01
     ea0:	82 81       	ldd	r24, Z+2	; 0x02
     ea2:	93 81       	ldd	r25, Z+3	; 0x03
     ea4:	0c 5f       	subi	r16, 0xFC	; 252
     ea6:	1f 4f       	sbci	r17, 0xFF	; 255
     ea8:	06 c0       	rjmp	.+12     	; 0xeb6 <vfprintf+0x28e>
     eaa:	60 81       	ld	r22, Z
     eac:	71 81       	ldd	r23, Z+1	; 0x01
     eae:	80 e0       	ldi	r24, 0x00	; 0
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	0e 5f       	subi	r16, 0xFE	; 254
     eb4:	1f 4f       	sbci	r17, 0xFF	; 255
     eb6:	a3 01       	movw	r20, r6
     eb8:	eb d0       	rcall	.+470    	; 0x1090 <__ultoa_invert>
     eba:	88 2e       	mov	r8, r24
     ebc:	86 18       	sub	r8, r6
     ebe:	fb 2d       	mov	r31, r11
     ec0:	ff 77       	andi	r31, 0x7F	; 127
     ec2:	3f 2e       	mov	r3, r31
     ec4:	36 fe       	sbrs	r3, 6
     ec6:	0d c0       	rjmp	.+26     	; 0xee2 <vfprintf+0x2ba>
     ec8:	23 2d       	mov	r18, r3
     eca:	2e 7f       	andi	r18, 0xFE	; 254
     ecc:	a2 2e       	mov	r10, r18
     ece:	89 14       	cp	r8, r9
     ed0:	58 f4       	brcc	.+22     	; 0xee8 <vfprintf+0x2c0>
     ed2:	34 fe       	sbrs	r3, 4
     ed4:	0b c0       	rjmp	.+22     	; 0xeec <vfprintf+0x2c4>
     ed6:	32 fc       	sbrc	r3, 2
     ed8:	09 c0       	rjmp	.+18     	; 0xeec <vfprintf+0x2c4>
     eda:	83 2d       	mov	r24, r3
     edc:	8e 7e       	andi	r24, 0xEE	; 238
     ede:	a8 2e       	mov	r10, r24
     ee0:	05 c0       	rjmp	.+10     	; 0xeec <vfprintf+0x2c4>
     ee2:	b8 2c       	mov	r11, r8
     ee4:	a3 2c       	mov	r10, r3
     ee6:	03 c0       	rjmp	.+6      	; 0xeee <vfprintf+0x2c6>
     ee8:	b8 2c       	mov	r11, r8
     eea:	01 c0       	rjmp	.+2      	; 0xeee <vfprintf+0x2c6>
     eec:	b9 2c       	mov	r11, r9
     eee:	a4 fe       	sbrs	r10, 4
     ef0:	0f c0       	rjmp	.+30     	; 0xf10 <vfprintf+0x2e8>
     ef2:	fe 01       	movw	r30, r28
     ef4:	e8 0d       	add	r30, r8
     ef6:	f1 1d       	adc	r31, r1
     ef8:	80 81       	ld	r24, Z
     efa:	80 33       	cpi	r24, 0x30	; 48
     efc:	21 f4       	brne	.+8      	; 0xf06 <vfprintf+0x2de>
     efe:	9a 2d       	mov	r25, r10
     f00:	99 7e       	andi	r25, 0xE9	; 233
     f02:	a9 2e       	mov	r10, r25
     f04:	09 c0       	rjmp	.+18     	; 0xf18 <vfprintf+0x2f0>
     f06:	a2 fe       	sbrs	r10, 2
     f08:	06 c0       	rjmp	.+12     	; 0xf16 <vfprintf+0x2ee>
     f0a:	b3 94       	inc	r11
     f0c:	b3 94       	inc	r11
     f0e:	04 c0       	rjmp	.+8      	; 0xf18 <vfprintf+0x2f0>
     f10:	8a 2d       	mov	r24, r10
     f12:	86 78       	andi	r24, 0x86	; 134
     f14:	09 f0       	breq	.+2      	; 0xf18 <vfprintf+0x2f0>
     f16:	b3 94       	inc	r11
     f18:	a3 fc       	sbrc	r10, 3
     f1a:	10 c0       	rjmp	.+32     	; 0xf3c <vfprintf+0x314>
     f1c:	a0 fe       	sbrs	r10, 0
     f1e:	06 c0       	rjmp	.+12     	; 0xf2c <vfprintf+0x304>
     f20:	b2 14       	cp	r11, r2
     f22:	80 f4       	brcc	.+32     	; 0xf44 <vfprintf+0x31c>
     f24:	28 0c       	add	r2, r8
     f26:	92 2c       	mov	r9, r2
     f28:	9b 18       	sub	r9, r11
     f2a:	0d c0       	rjmp	.+26     	; 0xf46 <vfprintf+0x31e>
     f2c:	b2 14       	cp	r11, r2
     f2e:	58 f4       	brcc	.+22     	; 0xf46 <vfprintf+0x31e>
     f30:	b6 01       	movw	r22, r12
     f32:	80 e2       	ldi	r24, 0x20	; 32
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	70 d0       	rcall	.+224    	; 0x1018 <fputc>
     f38:	b3 94       	inc	r11
     f3a:	f8 cf       	rjmp	.-16     	; 0xf2c <vfprintf+0x304>
     f3c:	b2 14       	cp	r11, r2
     f3e:	18 f4       	brcc	.+6      	; 0xf46 <vfprintf+0x31e>
     f40:	2b 18       	sub	r2, r11
     f42:	02 c0       	rjmp	.+4      	; 0xf48 <vfprintf+0x320>
     f44:	98 2c       	mov	r9, r8
     f46:	21 2c       	mov	r2, r1
     f48:	a4 fe       	sbrs	r10, 4
     f4a:	0f c0       	rjmp	.+30     	; 0xf6a <vfprintf+0x342>
     f4c:	b6 01       	movw	r22, r12
     f4e:	80 e3       	ldi	r24, 0x30	; 48
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	62 d0       	rcall	.+196    	; 0x1018 <fputc>
     f54:	a2 fe       	sbrs	r10, 2
     f56:	16 c0       	rjmp	.+44     	; 0xf84 <vfprintf+0x35c>
     f58:	a1 fc       	sbrc	r10, 1
     f5a:	03 c0       	rjmp	.+6      	; 0xf62 <vfprintf+0x33a>
     f5c:	88 e7       	ldi	r24, 0x78	; 120
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	02 c0       	rjmp	.+4      	; 0xf66 <vfprintf+0x33e>
     f62:	88 e5       	ldi	r24, 0x58	; 88
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	b6 01       	movw	r22, r12
     f68:	0c c0       	rjmp	.+24     	; 0xf82 <vfprintf+0x35a>
     f6a:	8a 2d       	mov	r24, r10
     f6c:	86 78       	andi	r24, 0x86	; 134
     f6e:	51 f0       	breq	.+20     	; 0xf84 <vfprintf+0x35c>
     f70:	a1 fe       	sbrs	r10, 1
     f72:	02 c0       	rjmp	.+4      	; 0xf78 <vfprintf+0x350>
     f74:	8b e2       	ldi	r24, 0x2B	; 43
     f76:	01 c0       	rjmp	.+2      	; 0xf7a <vfprintf+0x352>
     f78:	80 e2       	ldi	r24, 0x20	; 32
     f7a:	a7 fc       	sbrc	r10, 7
     f7c:	8d e2       	ldi	r24, 0x2D	; 45
     f7e:	b6 01       	movw	r22, r12
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	4a d0       	rcall	.+148    	; 0x1018 <fputc>
     f84:	89 14       	cp	r8, r9
     f86:	30 f4       	brcc	.+12     	; 0xf94 <vfprintf+0x36c>
     f88:	b6 01       	movw	r22, r12
     f8a:	80 e3       	ldi	r24, 0x30	; 48
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	44 d0       	rcall	.+136    	; 0x1018 <fputc>
     f90:	9a 94       	dec	r9
     f92:	f8 cf       	rjmp	.-16     	; 0xf84 <vfprintf+0x35c>
     f94:	8a 94       	dec	r8
     f96:	f3 01       	movw	r30, r6
     f98:	e8 0d       	add	r30, r8
     f9a:	f1 1d       	adc	r31, r1
     f9c:	80 81       	ld	r24, Z
     f9e:	b6 01       	movw	r22, r12
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	3a d0       	rcall	.+116    	; 0x1018 <fputc>
     fa4:	81 10       	cpse	r8, r1
     fa6:	f6 cf       	rjmp	.-20     	; 0xf94 <vfprintf+0x36c>
     fa8:	22 20       	and	r2, r2
     faa:	09 f4       	brne	.+2      	; 0xfae <vfprintf+0x386>
     fac:	4e ce       	rjmp	.-868    	; 0xc4a <vfprintf+0x22>
     fae:	b6 01       	movw	r22, r12
     fb0:	80 e2       	ldi	r24, 0x20	; 32
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	31 d0       	rcall	.+98     	; 0x1018 <fputc>
     fb6:	2a 94       	dec	r2
     fb8:	f7 cf       	rjmp	.-18     	; 0xfa8 <vfprintf+0x380>
     fba:	f6 01       	movw	r30, r12
     fbc:	86 81       	ldd	r24, Z+6	; 0x06
     fbe:	97 81       	ldd	r25, Z+7	; 0x07
     fc0:	02 c0       	rjmp	.+4      	; 0xfc6 <vfprintf+0x39e>
     fc2:	8f ef       	ldi	r24, 0xFF	; 255
     fc4:	9f ef       	ldi	r25, 0xFF	; 255
     fc6:	2b 96       	adiw	r28, 0x0b	; 11
     fc8:	e2 e1       	ldi	r30, 0x12	; 18
     fca:	dc c0       	rjmp	.+440    	; 0x1184 <__epilogue_restores__>

00000fcc <strnlen_P>:
     fcc:	fc 01       	movw	r30, r24
     fce:	05 90       	lpm	r0, Z+
     fd0:	61 50       	subi	r22, 0x01	; 1
     fd2:	70 40       	sbci	r23, 0x00	; 0
     fd4:	01 10       	cpse	r0, r1
     fd6:	d8 f7       	brcc	.-10     	; 0xfce <strnlen_P+0x2>
     fd8:	80 95       	com	r24
     fda:	90 95       	com	r25
     fdc:	8e 0f       	add	r24, r30
     fde:	9f 1f       	adc	r25, r31
     fe0:	08 95       	ret

00000fe2 <strnlen>:
     fe2:	fc 01       	movw	r30, r24
     fe4:	61 50       	subi	r22, 0x01	; 1
     fe6:	70 40       	sbci	r23, 0x00	; 0
     fe8:	01 90       	ld	r0, Z+
     fea:	01 10       	cpse	r0, r1
     fec:	d8 f7       	brcc	.-10     	; 0xfe4 <strnlen+0x2>
     fee:	80 95       	com	r24
     ff0:	90 95       	com	r25
     ff2:	8e 0f       	add	r24, r30
     ff4:	9f 1f       	adc	r25, r31
     ff6:	08 95       	ret

00000ff8 <strrev>:
     ff8:	dc 01       	movw	r26, r24
     ffa:	fc 01       	movw	r30, r24
     ffc:	67 2f       	mov	r22, r23
     ffe:	71 91       	ld	r23, Z+
    1000:	77 23       	and	r23, r23
    1002:	e1 f7       	brne	.-8      	; 0xffc <strrev+0x4>
    1004:	32 97       	sbiw	r30, 0x02	; 2
    1006:	04 c0       	rjmp	.+8      	; 0x1010 <strrev+0x18>
    1008:	7c 91       	ld	r23, X
    100a:	6d 93       	st	X+, r22
    100c:	70 83       	st	Z, r23
    100e:	62 91       	ld	r22, -Z
    1010:	ae 17       	cp	r26, r30
    1012:	bf 07       	cpc	r27, r31
    1014:	c8 f3       	brcs	.-14     	; 0x1008 <strrev+0x10>
    1016:	08 95       	ret

00001018 <fputc>:
    1018:	0f 93       	push	r16
    101a:	1f 93       	push	r17
    101c:	cf 93       	push	r28
    101e:	df 93       	push	r29
    1020:	fb 01       	movw	r30, r22
    1022:	23 81       	ldd	r18, Z+3	; 0x03
    1024:	21 fd       	sbrc	r18, 1
    1026:	03 c0       	rjmp	.+6      	; 0x102e <fputc+0x16>
    1028:	8f ef       	ldi	r24, 0xFF	; 255
    102a:	9f ef       	ldi	r25, 0xFF	; 255
    102c:	2c c0       	rjmp	.+88     	; 0x1086 <fputc+0x6e>
    102e:	22 ff       	sbrs	r18, 2
    1030:	16 c0       	rjmp	.+44     	; 0x105e <fputc+0x46>
    1032:	46 81       	ldd	r20, Z+6	; 0x06
    1034:	57 81       	ldd	r21, Z+7	; 0x07
    1036:	24 81       	ldd	r18, Z+4	; 0x04
    1038:	35 81       	ldd	r19, Z+5	; 0x05
    103a:	42 17       	cp	r20, r18
    103c:	53 07       	cpc	r21, r19
    103e:	44 f4       	brge	.+16     	; 0x1050 <fputc+0x38>
    1040:	a0 81       	ld	r26, Z
    1042:	b1 81       	ldd	r27, Z+1	; 0x01
    1044:	9d 01       	movw	r18, r26
    1046:	2f 5f       	subi	r18, 0xFF	; 255
    1048:	3f 4f       	sbci	r19, 0xFF	; 255
    104a:	31 83       	std	Z+1, r19	; 0x01
    104c:	20 83       	st	Z, r18
    104e:	8c 93       	st	X, r24
    1050:	26 81       	ldd	r18, Z+6	; 0x06
    1052:	37 81       	ldd	r19, Z+7	; 0x07
    1054:	2f 5f       	subi	r18, 0xFF	; 255
    1056:	3f 4f       	sbci	r19, 0xFF	; 255
    1058:	37 83       	std	Z+7, r19	; 0x07
    105a:	26 83       	std	Z+6, r18	; 0x06
    105c:	14 c0       	rjmp	.+40     	; 0x1086 <fputc+0x6e>
    105e:	8b 01       	movw	r16, r22
    1060:	ec 01       	movw	r28, r24
    1062:	fb 01       	movw	r30, r22
    1064:	00 84       	ldd	r0, Z+8	; 0x08
    1066:	f1 85       	ldd	r31, Z+9	; 0x09
    1068:	e0 2d       	mov	r30, r0
    106a:	09 95       	icall
    106c:	89 2b       	or	r24, r25
    106e:	e1 f6       	brne	.-72     	; 0x1028 <fputc+0x10>
    1070:	d8 01       	movw	r26, r16
    1072:	16 96       	adiw	r26, 0x06	; 6
    1074:	8d 91       	ld	r24, X+
    1076:	9c 91       	ld	r25, X
    1078:	17 97       	sbiw	r26, 0x07	; 7
    107a:	01 96       	adiw	r24, 0x01	; 1
    107c:	17 96       	adiw	r26, 0x07	; 7
    107e:	9c 93       	st	X, r25
    1080:	8e 93       	st	-X, r24
    1082:	16 97       	sbiw	r26, 0x06	; 6
    1084:	ce 01       	movw	r24, r28
    1086:	df 91       	pop	r29
    1088:	cf 91       	pop	r28
    108a:	1f 91       	pop	r17
    108c:	0f 91       	pop	r16
    108e:	08 95       	ret

00001090 <__ultoa_invert>:
    1090:	fa 01       	movw	r30, r20
    1092:	aa 27       	eor	r26, r26
    1094:	28 30       	cpi	r18, 0x08	; 8
    1096:	51 f1       	breq	.+84     	; 0x10ec <__ultoa_invert+0x5c>
    1098:	20 31       	cpi	r18, 0x10	; 16
    109a:	81 f1       	breq	.+96     	; 0x10fc <__ultoa_invert+0x6c>
    109c:	e8 94       	clt
    109e:	6f 93       	push	r22
    10a0:	6e 7f       	andi	r22, 0xFE	; 254
    10a2:	6e 5f       	subi	r22, 0xFE	; 254
    10a4:	7f 4f       	sbci	r23, 0xFF	; 255
    10a6:	8f 4f       	sbci	r24, 0xFF	; 255
    10a8:	9f 4f       	sbci	r25, 0xFF	; 255
    10aa:	af 4f       	sbci	r26, 0xFF	; 255
    10ac:	b1 e0       	ldi	r27, 0x01	; 1
    10ae:	3e d0       	rcall	.+124    	; 0x112c <__ultoa_invert+0x9c>
    10b0:	b4 e0       	ldi	r27, 0x04	; 4
    10b2:	3c d0       	rcall	.+120    	; 0x112c <__ultoa_invert+0x9c>
    10b4:	67 0f       	add	r22, r23
    10b6:	78 1f       	adc	r23, r24
    10b8:	89 1f       	adc	r24, r25
    10ba:	9a 1f       	adc	r25, r26
    10bc:	a1 1d       	adc	r26, r1
    10be:	68 0f       	add	r22, r24
    10c0:	79 1f       	adc	r23, r25
    10c2:	8a 1f       	adc	r24, r26
    10c4:	91 1d       	adc	r25, r1
    10c6:	a1 1d       	adc	r26, r1
    10c8:	6a 0f       	add	r22, r26
    10ca:	71 1d       	adc	r23, r1
    10cc:	81 1d       	adc	r24, r1
    10ce:	91 1d       	adc	r25, r1
    10d0:	a1 1d       	adc	r26, r1
    10d2:	20 d0       	rcall	.+64     	; 0x1114 <__ultoa_invert+0x84>
    10d4:	09 f4       	brne	.+2      	; 0x10d8 <__ultoa_invert+0x48>
    10d6:	68 94       	set
    10d8:	3f 91       	pop	r19
    10da:	2a e0       	ldi	r18, 0x0A	; 10
    10dc:	26 9f       	mul	r18, r22
    10de:	11 24       	eor	r1, r1
    10e0:	30 19       	sub	r19, r0
    10e2:	30 5d       	subi	r19, 0xD0	; 208
    10e4:	31 93       	st	Z+, r19
    10e6:	de f6       	brtc	.-74     	; 0x109e <__ultoa_invert+0xe>
    10e8:	cf 01       	movw	r24, r30
    10ea:	08 95       	ret
    10ec:	46 2f       	mov	r20, r22
    10ee:	47 70       	andi	r20, 0x07	; 7
    10f0:	40 5d       	subi	r20, 0xD0	; 208
    10f2:	41 93       	st	Z+, r20
    10f4:	b3 e0       	ldi	r27, 0x03	; 3
    10f6:	0f d0       	rcall	.+30     	; 0x1116 <__ultoa_invert+0x86>
    10f8:	c9 f7       	brne	.-14     	; 0x10ec <__ultoa_invert+0x5c>
    10fa:	f6 cf       	rjmp	.-20     	; 0x10e8 <__ultoa_invert+0x58>
    10fc:	46 2f       	mov	r20, r22
    10fe:	4f 70       	andi	r20, 0x0F	; 15
    1100:	40 5d       	subi	r20, 0xD0	; 208
    1102:	4a 33       	cpi	r20, 0x3A	; 58
    1104:	18 f0       	brcs	.+6      	; 0x110c <__ultoa_invert+0x7c>
    1106:	49 5d       	subi	r20, 0xD9	; 217
    1108:	31 fd       	sbrc	r19, 1
    110a:	40 52       	subi	r20, 0x20	; 32
    110c:	41 93       	st	Z+, r20
    110e:	02 d0       	rcall	.+4      	; 0x1114 <__ultoa_invert+0x84>
    1110:	a9 f7       	brne	.-22     	; 0x10fc <__ultoa_invert+0x6c>
    1112:	ea cf       	rjmp	.-44     	; 0x10e8 <__ultoa_invert+0x58>
    1114:	b4 e0       	ldi	r27, 0x04	; 4
    1116:	a6 95       	lsr	r26
    1118:	97 95       	ror	r25
    111a:	87 95       	ror	r24
    111c:	77 95       	ror	r23
    111e:	67 95       	ror	r22
    1120:	ba 95       	dec	r27
    1122:	c9 f7       	brne	.-14     	; 0x1116 <__ultoa_invert+0x86>
    1124:	00 97       	sbiw	r24, 0x00	; 0
    1126:	61 05       	cpc	r22, r1
    1128:	71 05       	cpc	r23, r1
    112a:	08 95       	ret
    112c:	9b 01       	movw	r18, r22
    112e:	ac 01       	movw	r20, r24
    1130:	0a 2e       	mov	r0, r26
    1132:	06 94       	lsr	r0
    1134:	57 95       	ror	r21
    1136:	47 95       	ror	r20
    1138:	37 95       	ror	r19
    113a:	27 95       	ror	r18
    113c:	ba 95       	dec	r27
    113e:	c9 f7       	brne	.-14     	; 0x1132 <__ultoa_invert+0xa2>
    1140:	62 0f       	add	r22, r18
    1142:	73 1f       	adc	r23, r19
    1144:	84 1f       	adc	r24, r20
    1146:	95 1f       	adc	r25, r21
    1148:	a0 1d       	adc	r26, r0
    114a:	08 95       	ret

0000114c <__prologue_saves__>:
    114c:	2f 92       	push	r2
    114e:	3f 92       	push	r3
    1150:	4f 92       	push	r4
    1152:	5f 92       	push	r5
    1154:	6f 92       	push	r6
    1156:	7f 92       	push	r7
    1158:	8f 92       	push	r8
    115a:	9f 92       	push	r9
    115c:	af 92       	push	r10
    115e:	bf 92       	push	r11
    1160:	cf 92       	push	r12
    1162:	df 92       	push	r13
    1164:	ef 92       	push	r14
    1166:	ff 92       	push	r15
    1168:	0f 93       	push	r16
    116a:	1f 93       	push	r17
    116c:	cf 93       	push	r28
    116e:	df 93       	push	r29
    1170:	cd b7       	in	r28, 0x3d	; 61
    1172:	de b7       	in	r29, 0x3e	; 62
    1174:	ca 1b       	sub	r28, r26
    1176:	db 0b       	sbc	r29, r27
    1178:	0f b6       	in	r0, 0x3f	; 63
    117a:	f8 94       	cli
    117c:	de bf       	out	0x3e, r29	; 62
    117e:	0f be       	out	0x3f, r0	; 63
    1180:	cd bf       	out	0x3d, r28	; 61
    1182:	09 94       	ijmp

00001184 <__epilogue_restores__>:
    1184:	2a 88       	ldd	r2, Y+18	; 0x12
    1186:	39 88       	ldd	r3, Y+17	; 0x11
    1188:	48 88       	ldd	r4, Y+16	; 0x10
    118a:	5f 84       	ldd	r5, Y+15	; 0x0f
    118c:	6e 84       	ldd	r6, Y+14	; 0x0e
    118e:	7d 84       	ldd	r7, Y+13	; 0x0d
    1190:	8c 84       	ldd	r8, Y+12	; 0x0c
    1192:	9b 84       	ldd	r9, Y+11	; 0x0b
    1194:	aa 84       	ldd	r10, Y+10	; 0x0a
    1196:	b9 84       	ldd	r11, Y+9	; 0x09
    1198:	c8 84       	ldd	r12, Y+8	; 0x08
    119a:	df 80       	ldd	r13, Y+7	; 0x07
    119c:	ee 80       	ldd	r14, Y+6	; 0x06
    119e:	fd 80       	ldd	r15, Y+5	; 0x05
    11a0:	0c 81       	ldd	r16, Y+4	; 0x04
    11a2:	1b 81       	ldd	r17, Y+3	; 0x03
    11a4:	aa 81       	ldd	r26, Y+2	; 0x02
    11a6:	b9 81       	ldd	r27, Y+1	; 0x01
    11a8:	ce 0f       	add	r28, r30
    11aa:	d1 1d       	adc	r29, r1
    11ac:	0f b6       	in	r0, 0x3f	; 63
    11ae:	f8 94       	cli
    11b0:	de bf       	out	0x3e, r29	; 62
    11b2:	0f be       	out	0x3f, r0	; 63
    11b4:	cd bf       	out	0x3d, r28	; 61
    11b6:	ed 01       	movw	r28, r26
    11b8:	08 95       	ret

000011ba <_exit>:
    11ba:	f8 94       	cli

000011bc <__stop_program>:
    11bc:	ff cf       	rjmp	.-2      	; 0x11bc <__stop_program>
