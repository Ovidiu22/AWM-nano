
AWM-nano-slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  0000016a  000001fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000016a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800102  00800102  00000200  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000230  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  00000270  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b14  00000000  00000000  000002f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000872  00000000  00000000  00000e0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008cb  00000000  00000000  0000167e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000120  00000000  00000000  00001f4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00007c2f  00000000  00000000  0000206c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000030e  00000000  00000000  00009c9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00009fa9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00000871  00000000  00000000  0000a029  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	63 c0       	rjmp	.+198    	; 0xcc <__vector_1>
   6:	00 00       	nop
   8:	4a c0       	rjmp	.+148    	; 0x9e <__bad_interrupt>
   a:	00 00       	nop
   c:	48 c0       	rjmp	.+144    	; 0x9e <__bad_interrupt>
   e:	00 00       	nop
  10:	46 c0       	rjmp	.+140    	; 0x9e <__bad_interrupt>
  12:	00 00       	nop
  14:	44 c0       	rjmp	.+136    	; 0x9e <__bad_interrupt>
  16:	00 00       	nop
  18:	8c c0       	rjmp	.+280    	; 0x132 <__vector_6>
  1a:	00 00       	nop
  1c:	40 c0       	rjmp	.+128    	; 0x9e <__bad_interrupt>
  1e:	00 00       	nop
  20:	3e c0       	rjmp	.+124    	; 0x9e <__bad_interrupt>
  22:	00 00       	nop
  24:	3c c0       	rjmp	.+120    	; 0x9e <__bad_interrupt>
  26:	00 00       	nop
  28:	3a c0       	rjmp	.+116    	; 0x9e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	38 c0       	rjmp	.+112    	; 0x9e <__bad_interrupt>
  2e:	00 00       	nop
  30:	36 c0       	rjmp	.+108    	; 0x9e <__bad_interrupt>
  32:	00 00       	nop
  34:	34 c0       	rjmp	.+104    	; 0x9e <__bad_interrupt>
  36:	00 00       	nop
  38:	32 c0       	rjmp	.+100    	; 0x9e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	30 c0       	rjmp	.+96     	; 0x9e <__bad_interrupt>
  3e:	00 00       	nop
  40:	2e c0       	rjmp	.+92     	; 0x9e <__bad_interrupt>
  42:	00 00       	nop
  44:	2c c0       	rjmp	.+88     	; 0x9e <__bad_interrupt>
  46:	00 00       	nop
  48:	2a c0       	rjmp	.+84     	; 0x9e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	28 c0       	rjmp	.+80     	; 0x9e <__bad_interrupt>
  4e:	00 00       	nop
  50:	26 c0       	rjmp	.+76     	; 0x9e <__bad_interrupt>
  52:	00 00       	nop
  54:	24 c0       	rjmp	.+72     	; 0x9e <__bad_interrupt>
  56:	00 00       	nop
  58:	22 c0       	rjmp	.+68     	; 0x9e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	20 c0       	rjmp	.+64     	; 0x9e <__bad_interrupt>
  5e:	00 00       	nop
  60:	1e c0       	rjmp	.+60     	; 0x9e <__bad_interrupt>
  62:	00 00       	nop
  64:	1c c0       	rjmp	.+56     	; 0x9e <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e6       	ldi	r30, 0x6A	; 106
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a5 30       	cpi	r26, 0x05	; 5
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	14 d0       	rcall	.+40     	; 0xc4 <main>
  9c:	64 c0       	rjmp	.+200    	; 0x166 <_exit>

0000009e <__bad_interrupt>:
  9e:	b0 cf       	rjmp	.-160    	; 0x0 <__vectors>

000000a0 <configUltrasonicPorts>:
Description:configures the pins  ultrasonic sensor
******************************************************************** */
void configUltrasonicPorts()
{
	/* ECHO - input - port ECHO_pin */
	U_DDR_echo &= ~(1<<U_ECHO_pin);
  a0:	52 98       	cbi	0x0a, 2	; 10
	U_Port_echo &= ~(1<<U_ECHO_pin);
  a2:	5a 98       	cbi	0x0b, 2	; 11
	
	/* TRIG - output - port TRIG_pin */
	U_DDR_trig |= (1<<U_TRIG_pin);
  a4:	53 9a       	sbi	0x0a, 3	; 10
	U_Port_trig &= ~(1<<U_TRIG_pin);
  a6:	5b 98       	cbi	0x0b, 3	; 11
	
	/* Power - output - port */
	U_DDR_pwr |= (1<<U_PWR_pin);
  a8:	57 9a       	sbi	0x0a, 7	; 10
	U_Port_pwr &= ~(1<<U_PWR_pin);
  aa:	5f 98       	cbi	0x0b, 7	; 11
  ac:	08 95       	ret

000000ae <enable_interrupts>:
Outputs:	none
Description:configures the interrupts and enables the global interrupts
******************************************************************** */
 void enable_interrupts()
 {
	EIMSK |= (1<<INT0);
  ae:	e8 9a       	sbi	0x1d, 0	; 29
	EICRA |= (1<<ISC00);
  b0:	e9 e6       	ldi	r30, 0x69	; 105
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	81 60       	ori	r24, 0x01	; 1
  b8:	80 83       	st	Z, r24
	sei();
  ba:	78 94       	sei
  bc:	08 95       	ret

000000be <init_ultrasonic>:
Outputs:	none
Description:main function for the ultrasonic initialization
******************************************************************** */
void init_ultrasonic(void)
{
	configUltrasonicPorts();
  be:	f0 df       	rcall	.-32     	; 0xa0 <configUltrasonicPorts>
	enable_interrupts();
  c0:	f6 cf       	rjmp	.-20     	; 0xae <enable_interrupts>
  c2:	08 95       	ret

000000c4 <main>:
  c4:	fc df       	rcall	.-8      	; 0xbe <init_ultrasonic>
	slave_resp[1] = WaterLevel;
	slave_resp[2] = diag;
	//slave_resp[3] = soc_bat;

	return slave_resp;
}
  c6:	80 e0       	ldi	r24, 0x00	; 0
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	08 95       	ret

000000cc <__vector_1>:
Inputs:		none
Outputs:	internal timer
Description:calculates elapsed time of a measurement
******************************************************************** */
ISR(INT0_vect)
{
  cc:	1f 92       	push	r1
  ce:	0f 92       	push	r0
  d0:	0f b6       	in	r0, 0x3f	; 63
  d2:	0f 92       	push	r0
  d4:	11 24       	eor	r1, r1
  d6:	8f 93       	push	r24
  d8:	9f 93       	push	r25
  da:	ef 93       	push	r30
  dc:	ff 93       	push	r31
	switch (iIRC)
  de:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
  e2:	88 23       	and	r24, r24
  e4:	19 f0       	breq	.+6      	; 0xec <__vector_1+0x20>
  e6:	81 30       	cpi	r24, 0x01	; 1
  e8:	51 f0       	breq	.+20     	; 0xfe <__vector_1+0x32>
  ea:	1a c0       	rjmp	.+52     	; 0x120 <__vector_1+0x54>
	{
		case 0: //when logic changes from LOW to HIGH
		{
			iIRC = 1;
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
			TCCR1B |= (1<<CS11);
  f2:	e1 e8       	ldi	r30, 0x81	; 129
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	80 81       	ld	r24, Z
  f8:	82 60       	ori	r24, 0x02	; 2
  fa:	80 83       	st	Z, r24
			break;
  fc:	11 c0       	rjmp	.+34     	; 0x120 <__vector_1+0x54>
		}
		case 1:
		{
			/* reset iIRC */
			iIRC = 0;
  fe:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
			/* stop counter */
			TCCR1B &= ~(1<<CS11);
 102:	e1 e8       	ldi	r30, 0x81	; 129
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	80 81       	ld	r24, Z
 108:	8d 7f       	andi	r24, 0xFD	; 253
 10a:	80 83       	st	Z, r24
			/* assign counter value to pulse */
			pulse = TCNT1;
 10c:	e4 e8       	ldi	r30, 0x84	; 132
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	80 81       	ld	r24, Z
 112:	91 81       	ldd	r25, Z+1	; 0x01
 114:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <pulse+0x1>
 118:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <pulse>
			/* reset counter */
			TCNT1=0;
 11c:	11 82       	std	Z+1, r1	; 0x01
 11e:	10 82       	st	Z, r1
			break;
		}
	}
}
 120:	ff 91       	pop	r31
 122:	ef 91       	pop	r30
 124:	9f 91       	pop	r25
 126:	8f 91       	pop	r24
 128:	0f 90       	pop	r0
 12a:	0f be       	out	0x3f, r0	; 63
 12c:	0f 90       	pop	r0
 12e:	1f 90       	pop	r1
 130:	18 95       	reti

00000132 <__vector_6>:
Inputs:		none
Outputs:	f_wdt
Description:wakes up processor after internal timer limit reached (8 sec)
******************************************************************** */
ISR(WDT_vect)
{
 132:	1f 92       	push	r1
 134:	0f 92       	push	r0
 136:	0f b6       	in	r0, 0x3f	; 63
 138:	0f 92       	push	r0
 13a:	11 24       	eor	r1, r1
 13c:	8f 93       	push	r24
 13e:	9f 93       	push	r25
	/* set the flag. */
	if(f_wdt == 0)
 140:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 144:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 148:	89 2b       	or	r24, r25
 14a:	31 f4       	brne	.+12     	; 0x158 <__vector_6+0x26>
	{
		f_wdt = 1;
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 154:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	}
	//else there is an error -> flag was not cleared
}
 158:	9f 91       	pop	r25
 15a:	8f 91       	pop	r24
 15c:	0f 90       	pop	r0
 15e:	0f be       	out	0x3f, r0	; 63
 160:	0f 90       	pop	r0
 162:	1f 90       	pop	r1
 164:	18 95       	reti

00000166 <_exit>:
 166:	f8 94       	cli

00000168 <__stop_program>:
 168:	ff cf       	rjmp	.-2      	; 0x168 <__stop_program>
