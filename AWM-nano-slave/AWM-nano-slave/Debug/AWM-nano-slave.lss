
AWM-nano-slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000b0e  00000ba2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b0e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000028  00800104  00800104  00000ba6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ba6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000bd8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  00000c18  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001a02  00000000  00000000  00000d60  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c43  00000000  00000000  00002762  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000014f2  00000000  00000000  000033a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002f8  00000000  00000000  00004898  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00008afa  00000000  00000000  00004b90  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f4b  00000000  00000000  0000d68a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  0000e5d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00003604  00000000  00000000  0000e6e5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	af c2       	rjmp	.+1374   	; 0x564 <__vector_1>
   6:	00 00       	nop
   8:	4a c0       	rjmp	.+148    	; 0x9e <__bad_interrupt>
   a:	00 00       	nop
   c:	48 c0       	rjmp	.+144    	; 0x9e <__bad_interrupt>
   e:	00 00       	nop
  10:	46 c0       	rjmp	.+140    	; 0x9e <__bad_interrupt>
  12:	00 00       	nop
  14:	44 c0       	rjmp	.+136    	; 0x9e <__bad_interrupt>
  16:	00 00       	nop
  18:	d8 c2       	rjmp	.+1456   	; 0x5ca <__vector_6>
  1a:	00 00       	nop
  1c:	40 c0       	rjmp	.+128    	; 0x9e <__bad_interrupt>
  1e:	00 00       	nop
  20:	3e c0       	rjmp	.+124    	; 0x9e <__bad_interrupt>
  22:	00 00       	nop
  24:	3c c0       	rjmp	.+120    	; 0x9e <__bad_interrupt>
  26:	00 00       	nop
  28:	3a c0       	rjmp	.+116    	; 0x9e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	38 c0       	rjmp	.+112    	; 0x9e <__bad_interrupt>
  2e:	00 00       	nop
  30:	36 c0       	rjmp	.+108    	; 0x9e <__bad_interrupt>
  32:	00 00       	nop
  34:	34 c0       	rjmp	.+104    	; 0x9e <__bad_interrupt>
  36:	00 00       	nop
  38:	32 c0       	rjmp	.+100    	; 0x9e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	30 c0       	rjmp	.+96     	; 0x9e <__bad_interrupt>
  3e:	00 00       	nop
  40:	2e c0       	rjmp	.+92     	; 0x9e <__bad_interrupt>
  42:	00 00       	nop
  44:	2c c0       	rjmp	.+88     	; 0x9e <__bad_interrupt>
  46:	00 00       	nop
  48:	2a c0       	rjmp	.+84     	; 0x9e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	28 c0       	rjmp	.+80     	; 0x9e <__bad_interrupt>
  4e:	00 00       	nop
  50:	26 c0       	rjmp	.+76     	; 0x9e <__bad_interrupt>
  52:	00 00       	nop
  54:	24 c0       	rjmp	.+72     	; 0x9e <__bad_interrupt>
  56:	00 00       	nop
  58:	22 c0       	rjmp	.+68     	; 0x9e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	20 c0       	rjmp	.+64     	; 0x9e <__bad_interrupt>
  5e:	00 00       	nop
  60:	1e c0       	rjmp	.+60     	; 0x9e <__bad_interrupt>
  62:	00 00       	nop
  64:	1c c0       	rjmp	.+56     	; 0x9e <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e0       	ldi	r30, 0x0E	; 14
  7c:	fb e0       	ldi	r31, 0x0B	; 11
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 30       	cpi	r26, 0x04	; 4
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e0       	ldi	r26, 0x04	; 4
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 32       	cpi	r26, 0x2C	; 44
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	c4 d2       	rcall	.+1416   	; 0x624 <main>
  9c:	36 c5       	rjmp	.+2668   	; 0xb0a <_exit>

0000009e <__bad_interrupt>:
  9e:	b0 cf       	rjmp	.-160    	; 0x0 <__vectors>

000000a0 <init_RGB>:
Outputs:	none
Description:initializes the RGB Led
******************************************************************** */
void init_RGB(void)
{
	DDRD |= (1<<RED_pin) | (1<<BLUE_pin) | (1<<GREEN_pin);
  a0:	8a b1       	in	r24, 0x0a	; 10
  a2:	80 67       	ori	r24, 0x70	; 112
  a4:	8a b9       	out	0x0a, r24	; 10
  a6:	08 95       	ret

000000a8 <set_RGB>:
Outputs:	none
Description:sets the desired color on the RGB Led
******************************************************************** */
void set_RGB(uint8_t color)
{
	set_RGB_low;
  a8:	9b b1       	in	r25, 0x0b	; 11
  aa:	9f 78       	andi	r25, 0x8F	; 143
  ac:	9b b9       	out	0x0b, r25	; 11
	switch (color)
  ae:	82 30       	cpi	r24, 0x02	; 2
  b0:	31 f0       	breq	.+12     	; 0xbe <set_RGB+0x16>
  b2:	83 30       	cpi	r24, 0x03	; 3
  b4:	31 f0       	breq	.+12     	; 0xc2 <set_RGB+0x1a>
  b6:	81 30       	cpi	r24, 0x01	; 1
  b8:	29 f4       	brne	.+10     	; 0xc4 <set_RGB+0x1c>
	{
		set_RGB_low;
		case red:
			set_RED_high;
  ba:	5e 9a       	sbi	0x0b, 6	; 11
			break;
  bc:	08 95       	ret
		
		case blue:
			set_BLUE_high;
  be:	5c 9a       	sbi	0x0b, 4	; 11
			break;
  c0:	08 95       	ret
		
		case green:
			set_GREEN_high;
  c2:	5d 9a       	sbi	0x0b, 5	; 11
  c4:	08 95       	ret

000000c6 <getBatterySOC>:
Inputs:		none
Outputs:	battery state of charge
Description:calculates battery state and reports a low level over diag
******************************************************************** */
uint8_t getBatterySOC( void )
{
  c6:	cf 92       	push	r12
  c8:	df 92       	push	r13
  ca:	ef 92       	push	r14
  cc:	ff 92       	push	r15
	/* Function initialization */
	// AREF = AVcc
	ADMUX = (1<<REFS0);
  ce:	ac e7       	ldi	r26, 0x7C	; 124
  d0:	b0 e0       	ldi	r27, 0x00	; 0
  d2:	80 e4       	ldi	r24, 0x40	; 64
  d4:	8c 93       	st	X, r24
		// [0 0 0] -> ADC0
		// [0 0 1] -> ADC1 ...
		
	// ADC Enable and prescaler of 128
	// 16000000/128 = 125000
	ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
  d6:	ea e7       	ldi	r30, 0x7A	; 122
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	87 e8       	ldi	r24, 0x87	; 135
  dc:	80 83       	st	Z, r24
	/* Function body */
	// select the corresponding channel 0~7
	// ANDing with ’7? will always keep the value
	// of ‘ch’ between 0 and 7
	uint8_t ch = 0 & 0b0000111;  // AND operation with 7
	ADMUX = (ADMUX & 0xF8)|ch; // clears the bottom 3 bits before ORing
  de:	8c 91       	ld	r24, X
  e0:	88 7f       	andi	r24, 0xF8	; 248
  e2:	8c 93       	st	X, r24
	
	// start single convertion
	// write ’1? to ADSC
	ADCSRA |= (1<<ADSC);
  e4:	80 81       	ld	r24, Z
  e6:	80 64       	ori	r24, 0x40	; 64
  e8:	80 83       	st	Z, r24
	
	// wait for conversion to complete
	// ADSC becomes ’0? again
	// till then, run loop continuously
	while(ADCSRA & (1<<ADSC));
  ea:	80 81       	ld	r24, Z
  ec:	86 fd       	sbrc	r24, 6
  ee:	fd cf       	rjmp	.-6      	; 0xea <getBatterySOC+0x24>
	
	uint16_t ADCValue = ADC;
  f0:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
  f4:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	soc = (meas_voltage - U_min) / (U_max - U_min) * 100
	U_max = 4.15V
	U_min = 3V
	=> soc = (meas_voltage(*) - U_min*100) / (U_max - U_min) = (meas_voltage(*) - 300) / 1.15
	*/
	float numer = (voltage - 300);
  f8:	80 e0       	ldi	r24, 0x00	; 0
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	f1 d3       	rcall	.+2018   	; 0x8e0 <__floatunsisf>
  fe:	25 e8       	ldi	r18, 0x85	; 133
 100:	3b ee       	ldi	r19, 0xEB	; 235
 102:	41 e0       	ldi	r20, 0x01	; 1
 104:	50 e4       	ldi	r21, 0x40	; 64
 106:	58 d3       	rcall	.+1712   	; 0x7b8 <__divsf3>
 108:	20 e0       	ldi	r18, 0x00	; 0
 10a:	30 e0       	ldi	r19, 0x00	; 0
 10c:	46 e9       	ldi	r20, 0x96	; 150
 10e:	53 e4       	ldi	r21, 0x43	; 67
 110:	ea d2       	rcall	.+1492   	; 0x6e6 <__subsf3>
 112:	6b 01       	movw	r12, r22
 114:	7c 01       	movw	r14, r24
	if (numer < 0) {numer = 0;}
 116:	20 e0       	ldi	r18, 0x00	; 0
 118:	30 e0       	ldi	r19, 0x00	; 0
 11a:	a9 01       	movw	r20, r18
 11c:	49 d3       	rcall	.+1682   	; 0x7b0 <__cmpsf2>
 11e:	88 23       	and	r24, r24
 120:	1c f4       	brge	.+6      	; 0x128 <getBatterySOC+0x62>
 122:	c1 2c       	mov	r12, r1
 124:	d1 2c       	mov	r13, r1
 126:	76 01       	movw	r14, r12
	float denum = 1.15;		
	float soc_bat = numer / denum;

	uint8_t soc_battery = soc_bat;
 128:	23 e3       	ldi	r18, 0x33	; 51
 12a:	33 e3       	ldi	r19, 0x33	; 51
 12c:	43 e9       	ldi	r20, 0x93	; 147
 12e:	5f e3       	ldi	r21, 0x3F	; 63
 130:	c7 01       	movw	r24, r14
 132:	b6 01       	movw	r22, r12
 134:	41 d3       	rcall	.+1666   	; 0x7b8 <__divsf3>
 136:	a8 d3       	rcall	.+1872   	; 0x888 <__fixunssfsi>
	if (soc_battery > 100) {soc_battery = 100;}
		
	return soc_battery;
 138:	86 2f       	mov	r24, r22
 13a:	65 36       	cpi	r22, 0x65	; 101
 13c:	08 f0       	brcs	.+2      	; 0x140 <getBatterySOC+0x7a>
 13e:	84 e6       	ldi	r24, 0x64	; 100
 140:	ff 90       	pop	r15
 142:	ef 90       	pop	r14
 144:	df 90       	pop	r13
 146:	cf 90       	pop	r12
 148:	08 95       	ret

0000014a <init_SPI>:
Description:Initialization of SPI pins
******************************************************************** */
void init_SPI()
{
	
	DDRB |= (1<<CEPin) | (1<<SSPin) | (1<<SCKPin) | (1<<MOSIPin) ;  //set MOSI, clock and SlaveSelect as output
 14a:	84 b1       	in	r24, 0x04	; 4
 14c:	8e 62       	ori	r24, 0x2E	; 46
 14e:	84 b9       	out	0x04, r24	; 4
	DDRB &= ~(1<<MISOPin);											//Set MOSI[MISO of nRF] as Input
 150:	24 98       	cbi	0x04, 4	; 4

	SPCR |= (1 << SPE) | (1 << MSTR); // | (1 << SPR0);					// Enable SPI as master
 152:	8c b5       	in	r24, 0x2c	; 44
 154:	80 65       	ori	r24, 0x50	; 80
 156:	8c bd       	out	0x2c, r24	; 44

	set_SS_high;							//SlaveSelect To HIGH- not sending any command
 158:	2a 9a       	sbi	0x05, 2	; 5
	set_CE_low;								//CE Pin Low
 15a:	29 98       	cbi	0x05, 1	; 5
 15c:	08 95       	ret

0000015e <spi_tranceiver>:
Description:Reads the SPI transceiver buffer
******************************************************************** */
uint8_t spi_tranceiver (uint8_t data)
{
	/* Load data in the buffer */
	SPDR = data;
 15e:	8e bd       	out	0x2e, r24	; 46
	/* Wait for the complete transmission */
	while(!(SPSR & (1<<SPIF)));
 160:	0d b4       	in	r0, 0x2d	; 45
 162:	07 fe       	sbrs	r0, 7
 164:	fd cf       	rjmp	.-6      	; 0x160 <spi_tranceiver+0x2>
	/* Return received data */
	return(SPDR);
 166:	8e b5       	in	r24, 0x2e	; 46
}
 168:	08 95       	ret

0000016a <GetReg>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 16a:	95 e3       	ldi	r25, 0x35	; 53
 16c:	9a 95       	dec	r25
 16e:	f1 f7       	brne	.-4      	; 0x16c <GetReg+0x2>
 170:	00 00       	nop
Description:Reads the called register
******************************************************************** */
uint8_t GetReg(uint8_t reg)
{
	_delay_us(10);						//Delay for 10us
	set_SS_low;							//Set SS Low - nRf starts listening for commands 10us after SS Low
 172:	2a 98       	cbi	0x05, 2	; 5
 174:	90 e4       	ldi	r25, 0x40	; 64
 176:	9a 95       	dec	r25
 178:	f1 f7       	brne	.-4      	; 0x176 <GetReg+0xc>
	_delay_us(12);						//Delay for 12us
	spi_tranceiver(R_REGISTER + reg);	//R_Register --> Set to Reading Mode, "reg" --> The registry which will be read
 17a:	f1 df       	rcall	.-30     	; 0x15e <spi_tranceiver>
 17c:	80 e4       	ldi	r24, 0x40	; 64
 17e:	8a 95       	dec	r24
 180:	f1 f7       	brne	.-4      	; 0x17e <GetReg+0x14>
	_delay_us(12);						//Dealy 12us
	reg = spi_tranceiver(NOP);			//Send DUMMY BYTE[NOP] to receive first byte in 'reg' register
 182:	8f ef       	ldi	r24, 0xFF	; 255
 184:	ec df       	rcall	.-40     	; 0x15e <spi_tranceiver>
 186:	90 e4       	ldi	r25, 0x40	; 64
 188:	9a 95       	dec	r25
 18a:	f1 f7       	brne	.-4      	; 0x188 <GetReg+0x1e>
	_delay_us(12);						//Delay 12us
	set_SS_high;						//SS High
 18c:	2a 9a       	sbi	0x05, 2	; 5
	return reg;							//Return the registry read
}
 18e:	08 95       	ret

00000190 <reset>:
 190:	85 e3       	ldi	r24, 0x35	; 53
 192:	8a 95       	dec	r24
 194:	f1 f7       	brne	.-4      	; 0x192 <reset+0x2>
 196:	00 00       	nop
Description:resets the STATUS register of interrupt flags
******************************************************************** */
void reset(void)
{
	_delay_us(10);
	set_SS_low;
 198:	2a 98       	cbi	0x05, 2	; 5
 19a:	85 e3       	ldi	r24, 0x35	; 53
 19c:	8a 95       	dec	r24
 19e:	f1 f7       	brne	.-4      	; 0x19c <reset+0xc>
 1a0:	00 00       	nop
	_delay_us(10);
	spi_tranceiver(W_REGISTER+STATUS);
 1a2:	87 e2       	ldi	r24, 0x27	; 39
 1a4:	dc df       	rcall	.-72     	; 0x15e <spi_tranceiver>
 1a6:	85 e3       	ldi	r24, 0x35	; 53
 1a8:	8a 95       	dec	r24
 1aa:	f1 f7       	brne	.-4      	; 0x1a8 <reset+0x18>
 1ac:	00 00       	nop
	_delay_us(10);
	spi_tranceiver(0x70);
 1ae:	80 e7       	ldi	r24, 0x70	; 112
 1b0:	d6 df       	rcall	.-84     	; 0x15e <spi_tranceiver>
 1b2:	85 e3       	ldi	r24, 0x35	; 53
 1b4:	8a 95       	dec	r24
 1b6:	f1 f7       	brne	.-4      	; 0x1b4 <reset+0x24>
 1b8:	00 00       	nop
	_delay_us(10);
	set_SS_high;
 1ba:	2a 9a       	sbi	0x05, 2	; 5
 1bc:	08 95       	ret

000001be <WriteToNrf>:
Inputs:		Read/Write command, name of register to be read, payload to be transmitted and length of payload
Outputs:	pointer to RX buffer
Description:controls the transmission or reception of payload over radio
******************************************************************** */
uint8_t *WriteToNrf(uint8_t ReadWrite, uint8_t reg, uint8_t *val, uint8_t antVal)
{
 1be:	bf 92       	push	r11
 1c0:	cf 92       	push	r12
 1c2:	df 92       	push	r13
 1c4:	ef 92       	push	r14
 1c6:	ff 92       	push	r15
 1c8:	0f 93       	push	r16
 1ca:	1f 93       	push	r17
 1cc:	cf 93       	push	r28
 1ce:	df 93       	push	r29
 1d0:	d8 2e       	mov	r13, r24
 1d2:	c6 2e       	mov	r12, r22
 1d4:	b4 2e       	mov	r11, r20
 1d6:	f5 2e       	mov	r15, r21
 1d8:	e2 2e       	mov	r14, r18
	//ReadWrite --> "R" or "W", reg --> 'register', *val --> array with package, antVal --> number of int in array
	if(ReadWrite == W)//If it is in READMODE, then addr is already 0x00
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	d8 12       	cpse	r13, r24
 1de:	02 c0       	rjmp	.+4      	; 0x1e4 <WriteToNrf+0x26>
	{
		reg = W_REGISTER + reg;
 1e0:	90 e2       	ldi	r25, 0x20	; 32
 1e2:	c9 0e       	add	r12, r25
 1e4:	e5 e3       	ldi	r30, 0x35	; 53
 1e6:	ea 95       	dec	r30
 1e8:	f1 f7       	brne	.-4      	; 0x1e6 <WriteToNrf+0x28>
 1ea:	00 00       	nop
	}
	static uint8_t ret[32];	//Array to be returned in the end
	
	_delay_us(10);						//Delay for 10us
	set_SS_low;							//Set SlaveSelect Low - nRf starts listening for commands 10us after CSN Low
 1ec:	2a 98       	cbi	0x05, 2	; 5
 1ee:	f0 e4       	ldi	r31, 0x40	; 64
 1f0:	fa 95       	dec	r31
 1f2:	f1 f7       	brne	.-4      	; 0x1f0 <WriteToNrf+0x32>
	_delay_us(12);						//Delay for 12us
	spi_tranceiver(reg);				//"reg" --> Set nRf to write or read mode
 1f4:	8c 2d       	mov	r24, r12
 1f6:	b3 df       	rcall	.-154    	; 0x15e <spi_tranceiver>
 1f8:	85 e3       	ldi	r24, 0x35	; 53
 1fa:	8a 95       	dec	r24
 1fc:	f1 f7       	brne	.-4      	; 0x1fa <WriteToNrf+0x3c>
 1fe:	00 00       	nop
	_delay_us(10);
	
	for(int i = 0; i<antVal; i++)
 200:	ee 20       	and	r14, r14
 202:	21 f1       	breq	.+72     	; 0x24c <WriteToNrf+0x8e>
 204:	c4 e0       	ldi	r28, 0x04	; 4
 206:	d1 e0       	ldi	r29, 0x01	; 1
 208:	0b 2d       	mov	r16, r11
 20a:	1f 2d       	mov	r17, r15
 20c:	2e 2d       	mov	r18, r14
 20e:	30 e0       	ldi	r19, 0x00	; 0
 210:	f9 01       	movw	r30, r18
 212:	ec 5f       	subi	r30, 0xFC	; 252
 214:	fe 4f       	sbci	r31, 0xFE	; 254
 216:	7f 01       	movw	r14, r30
	{
		if(ReadWrite == R && reg != W_TX_PAYLOAD)
 218:	d1 10       	cpse	r13, r1
 21a:	0b c0       	rjmp	.+22     	; 0x232 <WriteToNrf+0x74>
 21c:	f0 ea       	ldi	r31, 0xA0	; 160
 21e:	cf 16       	cp	r12, r31
 220:	41 f0       	breq	.+16     	; 0x232 <WriteToNrf+0x74>
		{
			//READ A REGISTRY
			ret[i] = spi_tranceiver(NOP);		//Send dummy Byte to read data
 222:	8f ef       	ldi	r24, 0xFF	; 255
 224:	9c df       	rcall	.-200    	; 0x15e <spi_tranceiver>
 226:	88 83       	st	Y, r24
 228:	85 e3       	ldi	r24, 0x35	; 53
 22a:	8a 95       	dec	r24
 22c:	f1 f7       	brne	.-4      	; 0x22a <WriteToNrf+0x6c>
 22e:	00 00       	nop
 230:	07 c0       	rjmp	.+14     	; 0x240 <WriteToNrf+0x82>
			_delay_us(10);
		}
		else
		{
			//Write to nRF
			spi_tranceiver(val[i]);			//Send command one at a time
 232:	f8 01       	movw	r30, r16
 234:	80 81       	ld	r24, Z
 236:	93 df       	rcall	.-218    	; 0x15e <spi_tranceiver>
 238:	f5 e3       	ldi	r31, 0x35	; 53
 23a:	fa 95       	dec	r31
 23c:	f1 f7       	brne	.-4      	; 0x23a <WriteToNrf+0x7c>
 23e:	00 00       	nop
 240:	21 96       	adiw	r28, 0x01	; 1
 242:	0f 5f       	subi	r16, 0xFF	; 255
 244:	1f 4f       	sbci	r17, 0xFF	; 255
	set_SS_low;							//Set SlaveSelect Low - nRf starts listening for commands 10us after CSN Low
	_delay_us(12);						//Delay for 12us
	spi_tranceiver(reg);				//"reg" --> Set nRf to write or read mode
	_delay_us(10);
	
	for(int i = 0; i<antVal; i++)
 246:	ce 15       	cp	r28, r14
 248:	df 05       	cpc	r29, r15
 24a:	31 f7       	brne	.-52     	; 0x218 <WriteToNrf+0x5a>
			//Write to nRF
			spi_tranceiver(val[i]);			//Send command one at a time
			_delay_us(10);
		}
	}
	set_SS_high;				//nRf into IDLE with CSN HIGH
 24c:	2a 9a       	sbi	0x05, 2	; 5
	return ret;					//Return the data read
}
 24e:	84 e0       	ldi	r24, 0x04	; 4
 250:	91 e0       	ldi	r25, 0x01	; 1
 252:	df 91       	pop	r29
 254:	cf 91       	pop	r28
 256:	1f 91       	pop	r17
 258:	0f 91       	pop	r16
 25a:	ff 90       	pop	r15
 25c:	ef 90       	pop	r14
 25e:	df 90       	pop	r13
 260:	cf 90       	pop	r12
 262:	bf 90       	pop	r11
 264:	08 95       	ret

00000266 <send_data>:
Inputs:		pointer to payload to be transmitted
Outputs:	none
Description:transmits the payload over radio
******************************************************************** */
void send_data(uint8_t * tx_payload)
{
 266:	cf 93       	push	r28
 268:	df 93       	push	r29
 26a:	ec 01       	movw	r28, r24
	WriteToNrf(R,FLUSH_TX,tx_payload,0);
 26c:	20 e0       	ldi	r18, 0x00	; 0
 26e:	ac 01       	movw	r20, r24
 270:	61 ee       	ldi	r22, 0xE1	; 225
 272:	80 e0       	ldi	r24, 0x00	; 0
 274:	a4 df       	rcall	.-184    	; 0x1be <WriteToNrf>
	WriteToNrf(R,W_TX_PAYLOAD,tx_payload,5);//Load Payload of length 5
 276:	25 e0       	ldi	r18, 0x05	; 5
 278:	ae 01       	movw	r20, r28
 27a:	60 ea       	ldi	r22, 0xA0	; 160
 27c:	80 e0       	ldi	r24, 0x00	; 0
 27e:	9f df       	rcall	.-194    	; 0x1be <WriteToNrf>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 280:	2f ef       	ldi	r18, 0xFF	; 255
 282:	83 ef       	ldi	r24, 0xF3	; 243
 284:	91 e0       	ldi	r25, 0x01	; 1
 286:	21 50       	subi	r18, 0x01	; 1
 288:	80 40       	sbci	r24, 0x00	; 0
 28a:	90 40       	sbci	r25, 0x00	; 0
 28c:	e1 f7       	brne	.-8      	; 0x286 <send_data+0x20>
 28e:	00 c0       	rjmp	.+0      	; 0x290 <send_data+0x2a>
 290:	00 00       	nop
	_delay_ms(40);
	set_CE_high;		//Start Transmitting
 292:	29 9a       	sbi	0x05, 1	; 5
 294:	2f ef       	ldi	r18, 0xFF	; 255
 296:	83 ef       	ldi	r24, 0xF3	; 243
 298:	91 e0       	ldi	r25, 0x01	; 1
 29a:	21 50       	subi	r18, 0x01	; 1
 29c:	80 40       	sbci	r24, 0x00	; 0
 29e:	90 40       	sbci	r25, 0x00	; 0
 2a0:	e1 f7       	brne	.-8      	; 0x29a <send_data+0x34>
 2a2:	00 c0       	rjmp	.+0      	; 0x2a4 <send_data+0x3e>
 2a4:	00 00       	nop
	_delay_ms(40);
	set_CE_low;		//Stop transmitting
 2a6:	29 98       	cbi	0x05, 1	; 5
 2a8:	8f e3       	ldi	r24, 0x3F	; 63
 2aa:	9c e9       	ldi	r25, 0x9C	; 156
 2ac:	01 97       	sbiw	r24, 0x01	; 1
 2ae:	f1 f7       	brne	.-4      	; 0x2ac <send_data+0x46>
 2b0:	00 c0       	rjmp	.+0      	; 0x2b2 <send_data+0x4c>
 2b2:	00 00       	nop
	_delay_ms(10);
}
 2b4:	df 91       	pop	r29
 2b6:	cf 91       	pop	r28
 2b8:	08 95       	ret

000002ba <init_nrf24l01>:
Inputs:		none
Outputs:	none
Description:initializes the nrf module for general purpose (RX / TX)
******************************************************************** */
void init_nrf24l01(void)
{
 2ba:	1f 93       	push	r17
 2bc:	cf 93       	push	r28
 2be:	df 93       	push	r29
 2c0:	00 d0       	rcall	.+0      	; 0x2c2 <init_nrf24l01+0x8>
 2c2:	00 d0       	rcall	.+0      	; 0x2c4 <init_nrf24l01+0xa>
 2c4:	1f 92       	push	r1
 2c6:	cd b7       	in	r28, 0x3d	; 61
 2c8:	de b7       	in	r29, 0x3e	; 62
 2ca:	8f e3       	ldi	r24, 0x3F	; 63
 2cc:	9c e9       	ldi	r25, 0x9C	; 156
 2ce:	01 97       	sbiw	r24, 0x01	; 1
 2d0:	f1 f7       	brne	.-4      	; 0x2ce <init_nrf24l01+0x14>
 2d2:	00 c0       	rjmp	.+0      	; 0x2d4 <init_nrf24l01+0x1a>
 2d4:	00 00       	nop
	_delay_ms(10);
	uint8_t val[5];
	val[0] = 0x70;		WriteToNrf(W,CONFIG,val,1);		//Set PRIM_RX in CONFIG reg to LOW [DONT POWER UP THE RADIO i.e keep it in power down mode]
 2d6:	80 e7       	ldi	r24, 0x70	; 112
 2d8:	89 83       	std	Y+1, r24	; 0x01
 2da:	21 e0       	ldi	r18, 0x01	; 1
 2dc:	ae 01       	movw	r20, r28
 2de:	4f 5f       	subi	r20, 0xFF	; 255
 2e0:	5f 4f       	sbci	r21, 0xFF	; 255
 2e2:	60 e0       	ldi	r22, 0x00	; 0
 2e4:	81 e0       	ldi	r24, 0x01	; 1
 2e6:	6b df       	rcall	.-298    	; 0x1be <WriteToNrf>
	val[0] = 0x01;		WriteToNrf(W,EN_AA,val,1);		//Enable Auto Ack on Data Pipe 0
 2e8:	11 e0       	ldi	r17, 0x01	; 1
 2ea:	19 83       	std	Y+1, r17	; 0x01
 2ec:	21 e0       	ldi	r18, 0x01	; 1
 2ee:	ae 01       	movw	r20, r28
 2f0:	4f 5f       	subi	r20, 0xFF	; 255
 2f2:	5f 4f       	sbci	r21, 0xFF	; 255
 2f4:	61 e0       	ldi	r22, 0x01	; 1
 2f6:	81 e0       	ldi	r24, 0x01	; 1
 2f8:	62 df       	rcall	.-316    	; 0x1be <WriteToNrf>
	val[0] = 0x01;		WriteToNrf(W,EN_RXADDR,val,1);	//Enable Data Pipe 0	
 2fa:	19 83       	std	Y+1, r17	; 0x01
 2fc:	21 e0       	ldi	r18, 0x01	; 1
 2fe:	ae 01       	movw	r20, r28
 300:	4f 5f       	subi	r20, 0xFF	; 255
 302:	5f 4f       	sbci	r21, 0xFF	; 255
 304:	62 e0       	ldi	r22, 0x02	; 2
 306:	81 e0       	ldi	r24, 0x01	; 1
 308:	5a df       	rcall	.-332    	; 0x1be <WriteToNrf>
	val[0] = 0x03;		WriteToNrf(W,SETUP_AW,val,1);	//Set Address Width as 5Bytes
 30a:	83 e0       	ldi	r24, 0x03	; 3
 30c:	89 83       	std	Y+1, r24	; 0x01
 30e:	21 e0       	ldi	r18, 0x01	; 1
 310:	ae 01       	movw	r20, r28
 312:	4f 5f       	subi	r20, 0xFF	; 255
 314:	5f 4f       	sbci	r21, 0xFF	; 255
 316:	63 e0       	ldi	r22, 0x03	; 3
 318:	81 e0       	ldi	r24, 0x01	; 1
 31a:	51 df       	rcall	.-350    	; 0x1be <WriteToNrf>
	val[0] = 0x2F;		WriteToNrf(W,SETUP_RETR,val,1);	//Set up Retries
 31c:	8f e2       	ldi	r24, 0x2F	; 47
 31e:	89 83       	std	Y+1, r24	; 0x01
 320:	21 e0       	ldi	r18, 0x01	; 1
 322:	ae 01       	movw	r20, r28
 324:	4f 5f       	subi	r20, 0xFF	; 255
 326:	5f 4f       	sbci	r21, 0xFF	; 255
 328:	64 e0       	ldi	r22, 0x04	; 4
 32a:	81 e0       	ldi	r24, 0x01	; 1
 32c:	48 df       	rcall	.-368    	; 0x1be <WriteToNrf>
	val[0] = 0x7A;		WriteToNrf(W,RF_CH,val,1);		//Set the CH
 32e:	8a e7       	ldi	r24, 0x7A	; 122
 330:	89 83       	std	Y+1, r24	; 0x01
 332:	21 e0       	ldi	r18, 0x01	; 1
 334:	ae 01       	movw	r20, r28
 336:	4f 5f       	subi	r20, 0xFF	; 255
 338:	5f 4f       	sbci	r21, 0xFF	; 255
 33a:	65 e0       	ldi	r22, 0x05	; 5
 33c:	81 e0       	ldi	r24, 0x01	; 1
 33e:	3f df       	rcall	.-386    	; 0x1be <WriteToNrf>
	val[0] = 0x26;		WriteToNrf(W,RF_SETUP,val,1);	//Set transfer rate	
 340:	86 e2       	ldi	r24, 0x26	; 38
 342:	89 83       	std	Y+1, r24	; 0x01
 344:	21 e0       	ldi	r18, 0x01	; 1
 346:	ae 01       	movw	r20, r28
 348:	4f 5f       	subi	r20, 0xFF	; 255
 34a:	5f 4f       	sbci	r21, 0xFF	; 255
 34c:	66 e0       	ldi	r22, 0x06	; 6
 34e:	81 e0       	ldi	r24, 0x01	; 1
 350:	36 df       	rcall	.-404    	; 0x1be <WriteToNrf>
	for(int i = 0;i<5;i++) { val[i] = 0x12; } 
 352:	82 e1       	ldi	r24, 0x12	; 18
 354:	89 83       	std	Y+1, r24	; 0x01
 356:	8a 83       	std	Y+2, r24	; 0x02
 358:	8b 83       	std	Y+3, r24	; 0x03
 35a:	8c 83       	std	Y+4, r24	; 0x04
		WriteToNrf(W,RX_ADDR_P0,val,5);					//Set Data Pipe 1 Addr
 35c:	8d 83       	std	Y+5, r24	; 0x05
 35e:	25 e0       	ldi	r18, 0x05	; 5
 360:	ae 01       	movw	r20, r28
 362:	4f 5f       	subi	r20, 0xFF	; 255
 364:	5f 4f       	sbci	r21, 0xFF	; 255
 366:	6a e0       	ldi	r22, 0x0A	; 10
 368:	81 e0       	ldi	r24, 0x01	; 1
		WriteToNrf(W,TX_ADDR,val,5);					//Clock the addr of the receiving node in TX_ADDR
 36a:	29 df       	rcall	.-430    	; 0x1be <WriteToNrf>
 36c:	25 e0       	ldi	r18, 0x05	; 5
 36e:	ae 01       	movw	r20, r28
 370:	4f 5f       	subi	r20, 0xFF	; 255
 372:	5f 4f       	sbci	r21, 0xFF	; 255
 374:	60 e1       	ldi	r22, 0x10	; 16
 376:	81 e0       	ldi	r24, 0x01	; 1
	val[0] = 0x5;			WriteToNrf(W,RX_PW_P0,val,1);	//Set correct payload width[5 bytes]
 378:	22 df       	rcall	.-444    	; 0x1be <WriteToNrf>
 37a:	85 e0       	ldi	r24, 0x05	; 5
 37c:	89 83       	std	Y+1, r24	; 0x01
 37e:	21 e0       	ldi	r18, 0x01	; 1
 380:	ae 01       	movw	r20, r28
 382:	4f 5f       	subi	r20, 0xFF	; 255
 384:	5f 4f       	sbci	r21, 0xFF	; 255
 386:	61 e1       	ldi	r22, 0x11	; 17
 388:	81 e0       	ldi	r24, 0x01	; 1
 38a:	19 df       	rcall	.-462    	; 0x1be <WriteToNrf>
}
 38c:	0f 90       	pop	r0
 38e:	0f 90       	pop	r0
 390:	0f 90       	pop	r0
 392:	0f 90       	pop	r0
 394:	0f 90       	pop	r0
 396:	df 91       	pop	r29
 398:	cf 91       	pop	r28
 39a:	1f 91       	pop	r17
 39c:	08 95       	ret

0000039e <init_nrf24l01_tx>:
Inputs:		none
Outputs:	none
Description:initializes the nrf module as transmitter
******************************************************************** */
void init_nrf24l01_tx(void)
{
 39e:	cf 93       	push	r28
 3a0:	df 93       	push	r29
 3a2:	1f 92       	push	r1
 3a4:	cd b7       	in	r28, 0x3d	; 61
 3a6:	de b7       	in	r29, 0x3e	; 62
 3a8:	8f e3       	ldi	r24, 0x3F	; 63
 3aa:	9c e9       	ldi	r25, 0x9C	; 156
 3ac:	01 97       	sbiw	r24, 0x01	; 1
 3ae:	f1 f7       	brne	.-4      	; 0x3ac <init_nrf24l01_tx+0xe>
 3b0:	00 c0       	rjmp	.+0      	; 0x3b2 <init_nrf24l01_tx+0x14>
 3b2:	00 00       	nop
	_delay_ms(10);
	uint8_t val[1];
	val[0] = 0x1E;		WriteToNrf(W,CONFIG,val,1);		//Power up Radio as transmitter
 3b4:	8e e1       	ldi	r24, 0x1E	; 30
 3b6:	89 83       	std	Y+1, r24	; 0x01
 3b8:	21 e0       	ldi	r18, 0x01	; 1
 3ba:	ae 01       	movw	r20, r28
 3bc:	4f 5f       	subi	r20, 0xFF	; 255
 3be:	5f 4f       	sbci	r21, 0xFF	; 255
 3c0:	60 e0       	ldi	r22, 0x00	; 0
 3c2:	81 e0       	ldi	r24, 0x01	; 1
 3c4:	fc de       	rcall	.-520    	; 0x1be <WriteToNrf>
 3c6:	8f e3       	ldi	r24, 0x3F	; 63
 3c8:	9c e9       	ldi	r25, 0x9C	; 156
 3ca:	01 97       	sbiw	r24, 0x01	; 1
 3cc:	f1 f7       	brne	.-4      	; 0x3ca <init_nrf24l01_tx+0x2c>
 3ce:	00 c0       	rjmp	.+0      	; 0x3d0 <init_nrf24l01_tx+0x32>
 3d0:	00 00       	nop
	_delay_ms(10);
}
 3d2:	0f 90       	pop	r0
 3d4:	df 91       	pop	r29
 3d6:	cf 91       	pop	r28
 3d8:	08 95       	ret

000003da <turnOff_nrf24l01>:
Inputs:		none
Outputs:	none
Description:Turns off the Radio module
******************************************************************** */
void turnOff_nrf24l01(void)
{
 3da:	cf 93       	push	r28
 3dc:	df 93       	push	r29
 3de:	1f 92       	push	r1
 3e0:	cd b7       	in	r28, 0x3d	; 61
 3e2:	de b7       	in	r29, 0x3e	; 62
 3e4:	8f e3       	ldi	r24, 0x3F	; 63
 3e6:	9c e9       	ldi	r25, 0x9C	; 156
 3e8:	01 97       	sbiw	r24, 0x01	; 1
 3ea:	f1 f7       	brne	.-4      	; 0x3e8 <turnOff_nrf24l01+0xe>
 3ec:	00 c0       	rjmp	.+0      	; 0x3ee <turnOff_nrf24l01+0x14>
 3ee:	00 00       	nop
	_delay_ms(10);
	uint8_t val[1];
	val[0] = 0x00;		WriteToNrf(W,CONFIG,val,1);		//Power down Radio
 3f0:	19 82       	std	Y+1, r1	; 0x01
 3f2:	21 e0       	ldi	r18, 0x01	; 1
 3f4:	ae 01       	movw	r20, r28
 3f6:	4f 5f       	subi	r20, 0xFF	; 255
 3f8:	5f 4f       	sbci	r21, 0xFF	; 255
 3fa:	60 e0       	ldi	r22, 0x00	; 0
 3fc:	81 e0       	ldi	r24, 0x01	; 1
 3fe:	df de       	rcall	.-578    	; 0x1be <WriteToNrf>
 400:	8f e3       	ldi	r24, 0x3F	; 63
 402:	9c e9       	ldi	r25, 0x9C	; 156
 404:	01 97       	sbiw	r24, 0x01	; 1
 406:	f1 f7       	brne	.-4      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 408:	00 c0       	rjmp	.+0      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 40a:	00 00       	nop
	_delay_ms(10);
 40c:	0f 90       	pop	r0
 40e:	df 91       	pop	r29
 410:	cf 91       	pop	r28
 412:	08 95       	ret

00000414 <PwrMngmnt_init>:
Description:initialization of power management / watchdog
******************************************************************** */
void PwrMngmnt_init(void)
{
	/* Disable global interrupts */
	cli(); 
 414:	f8 94       	cli
	
	/* Clear the reset flag. */
	MCUSR &= ~(1<<WDRF); // WDRF is set if a WDG system reset occurs
 416:	84 b7       	in	r24, 0x34	; 52
 418:	87 7f       	andi	r24, 0xF7	; 247
 41a:	84 bf       	out	0x34, r24	; 52
  
	/* In order to change WDE or the prescaler, we need to
	* set WDCE (This will allow updates for 4 clock cycles).
	*/
	WDTCSR |= (1<<WDCE) | (1<<WDE);
 41c:	e0 e6       	ldi	r30, 0x60	; 96
 41e:	f0 e0       	ldi	r31, 0x00	; 0
 420:	80 81       	ld	r24, Z
 422:	88 61       	ori	r24, 0x18	; 24
 424:	80 83       	st	Z, r24

	/* set new watchdog timeout prescaler value */
	//WDTCSR = 1<<WDP3; /* 4.0 seconds */
	WDTCSR = 1<<WDP0 | 1<<WDP3; /* 8.0 seconds */
 426:	81 e2       	ldi	r24, 0x21	; 33
 428:	80 83       	st	Z, r24
	
	/* Enable global interrupts */
	sei();
 42a:	78 94       	sei
	
	/* Enable watchdog interrupt */
	WDTCSR |= (1 << WDIE);
 42c:	80 81       	ld	r24, Z
 42e:	80 64       	ori	r24, 0x40	; 64
 430:	80 83       	st	Z, r24
 432:	08 95       	ret

00000434 <enterSleep>:
Description:configures the sleep mode
******************************************************************** */
void enterSleep(void)
{
	/* Set sleep mode */
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
 434:	83 b7       	in	r24, 0x33	; 51
 436:	81 7f       	andi	r24, 0xF1	; 241
 438:	84 60       	ori	r24, 0x04	; 4
 43a:	83 bf       	out	0x33, r24	; 51

	/* Enable sleep */
	sleep_enable();
 43c:	83 b7       	in	r24, 0x33	; 51
 43e:	81 60       	ori	r24, 0x01	; 1
 440:	83 bf       	out	0x33, r24	; 51
  
	/* Now enter sleep mode. */
	sleep_mode();
 442:	83 b7       	in	r24, 0x33	; 51
 444:	81 60       	ori	r24, 0x01	; 1
 446:	83 bf       	out	0x33, r24	; 51
 448:	88 95       	sleep
 44a:	83 b7       	in	r24, 0x33	; 51
 44c:	8e 7f       	andi	r24, 0xFE	; 254
 44e:	83 bf       	out	0x33, r24	; 51

	/* The program will continue from here after the WDT timeout*/
	sleep_disable(); /* First thing to do is disable sleep. */
 450:	83 b7       	in	r24, 0x33	; 51
 452:	8e 7f       	andi	r24, 0xFE	; 254
 454:	83 bf       	out	0x33, r24	; 51
static __inline void
__attribute__ ((__always_inline__))
__power_all_enable()
{
#ifdef __AVR_HAVE_PRR
    PRR &= (uint8_t)~(__AVR_HAVE_PRR);
 456:	e4 e6       	ldi	r30, 0x64	; 100
 458:	f0 e0       	ldi	r31, 0x00	; 0
 45a:	80 81       	ld	r24, Z
 45c:	80 71       	andi	r24, 0x10	; 16
 45e:	80 83       	st	Z, r24
 460:	08 95       	ret

00000462 <PwrMngmnt_main>:
Description:main function of power management
******************************************************************** */
void PwrMngmnt_main(void)
{
	/* Initialize watchdog */
	PwrMngmnt_init();
 462:	d8 df       	rcall	.-80     	; 0x414 <PwrMngmnt_init>

	/* Re-enter sleep mode. */
	enterSleep();
 464:	e7 cf       	rjmp	.-50     	; 0x434 <enterSleep>
 466:	08 95       	ret

00000468 <configUltrasonicPorts>:
 468:	52 98       	cbi	0x0a, 2	; 10
******************************************************************** */
void configUltrasonicPorts()
{
	/* ECHO - input - port ECHO_pin */
	U_DDR_echo &= ~(1<<U_ECHO_pin);
	U_Port_echo &= ~(1<<U_ECHO_pin);
 46a:	5a 98       	cbi	0x0b, 2	; 11
	
	/* TRIG - output - port TRIG_pin */
	U_DDR_trig |= (1<<U_TRIG_pin);
 46c:	53 9a       	sbi	0x0a, 3	; 10
	U_Port_trig &= ~(1<<U_TRIG_pin);
 46e:	5b 98       	cbi	0x0b, 3	; 11
	
	/* Power - output - port */
	U_DDR_pwr |= (1<<U_PWR_pin);
 470:	57 9a       	sbi	0x0a, 7	; 10
	U_Port_pwr &= ~(1<<U_PWR_pin);
 472:	5f 98       	cbi	0x0b, 7	; 11
 474:	08 95       	ret

00000476 <enable_interrupts>:
Outputs:	none
Description:configures the interrupts and enables the global interrupts
******************************************************************** */
 void enable_interrupts()
 {
	EIMSK |= (1<<INT0);
 476:	e8 9a       	sbi	0x1d, 0	; 29
	EICRA |= (1<<ISC00);
 478:	e9 e6       	ldi	r30, 0x69	; 105
 47a:	f0 e0       	ldi	r31, 0x00	; 0
 47c:	80 81       	ld	r24, Z
 47e:	81 60       	ori	r24, 0x01	; 1
 480:	80 83       	st	Z, r24
	sei();
 482:	78 94       	sei
 484:	08 95       	ret

00000486 <init_ultrasonic>:
Outputs:	none
Description:main function for the ultrasonic initialization
******************************************************************** */
void init_ultrasonic(void)
{
	configUltrasonicPorts();
 486:	f0 df       	rcall	.-32     	; 0x468 <configUltrasonicPorts>
	enable_interrupts();
 488:	f6 cf       	rjmp	.-20     	; 0x476 <enable_interrupts>
 48a:	08 95       	ret

0000048c <triggerUltrasonic>:
 48c:	5b 9a       	sbi	0x0b, 3	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 48e:	20 e5       	ldi	r18, 0x50	; 80
 490:	2a 95       	dec	r18
 492:	f1 f7       	brne	.-4      	; 0x490 <triggerUltrasonic+0x4>
		/* trigger ultrasonic */
		U_Port_trig |= (1<<U_TRIG_pin);
		_delay_us(15);

		/* stop trigger ultrasonic */
		U_Port_trig &= ~(1<<U_TRIG_pin);
 494:	5b 98       	cbi	0x0b, 3	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 496:	8f ef       	ldi	r24, 0xFF	; 255
 498:	99 ef       	ldi	r25, 0xF9	; 249
 49a:	20 e0       	ldi	r18, 0x00	; 0
 49c:	81 50       	subi	r24, 0x01	; 1
 49e:	90 40       	sbci	r25, 0x00	; 0
 4a0:	20 40       	sbci	r18, 0x00	; 0
 4a2:	e1 f7       	brne	.-8      	; 0x49c <triggerUltrasonic+0x10>
 4a4:	00 c0       	rjmp	.+0      	; 0x4a6 <triggerUltrasonic+0x1a>
 4a6:	00 00       	nop
 4a8:	08 95       	ret

000004aa <getDistance_main>:
Inputs:		none
Outputs:	distance measurements
Description:triggers measurements and plausibility checks
******************************************************************** */
 uint8_t getDistance_main(void)
 {
 4aa:	cf 92       	push	r12
 4ac:	df 92       	push	r13
 4ae:	ef 92       	push	r14
 4b0:	ff 92       	push	r15
	float dist = 0;
	float distance_array[2];
	float sum = 0;
	
	/* Power on the sensor */
	ULTR_PWR_ON; _delay_ms(500);
 4b2:	5f 9a       	sbi	0x0b, 7	; 11
 4b4:	2f ef       	ldi	r18, 0xFF	; 255
 4b6:	39 e6       	ldi	r19, 0x69	; 105
 4b8:	48 e1       	ldi	r20, 0x18	; 24
 4ba:	21 50       	subi	r18, 0x01	; 1
 4bc:	30 40       	sbci	r19, 0x00	; 0
 4be:	40 40       	sbci	r20, 0x00	; 0
 4c0:	e1 f7       	brne	.-8      	; 0x4ba <getDistance_main+0x10>
 4c2:	00 c0       	rjmp	.+0      	; 0x4c4 <getDistance_main+0x1a>
 4c4:	00 00       	nop
					
	/* Execute two measurements and calculate mean value for redundancy */
	for (uint8_t j = 0; j < 2; j++)
	{
		triggerUltrasonic();
 4c6:	e2 df       	rcall	.-60     	; 0x48c <triggerUltrasonic>
		distance_array[j] = getDistance();
		sum +=distance_array[j];
 4c8:	60 91 2a 01 	lds	r22, 0x012A	; 0x80012a <pulse>
 4cc:	70 91 2b 01 	lds	r23, 0x012B	; 0x80012b <pulse+0x1>
 4d0:	80 e0       	ldi	r24, 0x00	; 0
 4d2:	90 e0       	ldi	r25, 0x00	; 0
 4d4:	05 d2       	rcall	.+1034   	; 0x8e0 <__floatunsisf>
 4d6:	2a e6       	ldi	r18, 0x6A	; 106
 4d8:	3c e3       	ldi	r19, 0x3C	; 60
 4da:	49 ee       	ldi	r20, 0xE9	; 233
 4dc:	52 e4       	ldi	r21, 0x42	; 66
 4de:	6c d1       	rcall	.+728    	; 0x7b8 <__divsf3>
 4e0:	20 e0       	ldi	r18, 0x00	; 0
 4e2:	30 e0       	ldi	r19, 0x00	; 0
 4e4:	a9 01       	movw	r20, r18
 4e6:	00 d1       	rcall	.+512    	; 0x6e8 <__addsf3>
 4e8:	6b 01       	movw	r12, r22
 4ea:	7c 01       	movw	r14, r24
 4ec:	8f ef       	ldi	r24, 0xFF	; 255
 4ee:	90 e7       	ldi	r25, 0x70	; 112
 4f0:	22 e0       	ldi	r18, 0x02	; 2
 4f2:	81 50       	subi	r24, 0x01	; 1
 4f4:	90 40       	sbci	r25, 0x00	; 0
 4f6:	20 40       	sbci	r18, 0x00	; 0
 4f8:	e1 f7       	brne	.-8      	; 0x4f2 <getDistance_main+0x48>
 4fa:	00 c0       	rjmp	.+0      	; 0x4fc <getDistance_main+0x52>
	ULTR_PWR_ON; _delay_ms(500);
					
	/* Execute two measurements and calculate mean value for redundancy */
	for (uint8_t j = 0; j < 2; j++)
	{
		triggerUltrasonic();
 4fc:	00 00       	nop
 4fe:	c6 df       	rcall	.-116    	; 0x48c <triggerUltrasonic>
		distance_array[j] = getDistance();
		sum +=distance_array[j];
 500:	60 91 2a 01 	lds	r22, 0x012A	; 0x80012a <pulse>
 504:	70 91 2b 01 	lds	r23, 0x012B	; 0x80012b <pulse+0x1>
 508:	80 e0       	ldi	r24, 0x00	; 0
 50a:	90 e0       	ldi	r25, 0x00	; 0
 50c:	e9 d1       	rcall	.+978    	; 0x8e0 <__floatunsisf>
 50e:	2a e6       	ldi	r18, 0x6A	; 106
 510:	3c e3       	ldi	r19, 0x3C	; 60
 512:	49 ee       	ldi	r20, 0xE9	; 233
 514:	52 e4       	ldi	r21, 0x42	; 66
 516:	50 d1       	rcall	.+672    	; 0x7b8 <__divsf3>
 518:	a7 01       	movw	r20, r14
 51a:	96 01       	movw	r18, r12
 51c:	e5 d0       	rcall	.+458    	; 0x6e8 <__addsf3>
 51e:	3f ef       	ldi	r19, 0xFF	; 255
 520:	40 e7       	ldi	r20, 0x70	; 112
 522:	22 e0       	ldi	r18, 0x02	; 2
 524:	31 50       	subi	r19, 0x01	; 1
 526:	40 40       	sbci	r20, 0x00	; 0
 528:	20 40       	sbci	r18, 0x00	; 0
 52a:	e1 f7       	brne	.-8      	; 0x524 <getDistance_main+0x7a>
		_delay_ms(50);
	}
	/* Power off the sensor */
	ULTR_PWR_OFF;
 52c:	00 c0       	rjmp	.+0      	; 0x52e <getDistance_main+0x84>
	
	dist = sum/2;
	distance = dist;
	return distance;
 52e:	00 00       	nop
 530:	5f 98       	cbi	0x0b, 7	; 11
 532:	20 e0       	ldi	r18, 0x00	; 0
 534:	30 e0       	ldi	r19, 0x00	; 0
 536:	40 e0       	ldi	r20, 0x00	; 0
 538:	5f e3       	ldi	r21, 0x3F	; 63
 53a:	84 d2       	rcall	.+1288   	; 0xa44 <__mulsf3>
 53c:	a5 d1       	rcall	.+842    	; 0x888 <__fixunssfsi>
 53e:	86 2f       	mov	r24, r22
 }
 540:	ff 90       	pop	r15
 542:	ef 90       	pop	r14
 544:	df 90       	pop	r13
 546:	cf 90       	pop	r12
 548:	08 95       	ret

0000054a <SlaveCoreFunctionality>:
Inputs:		none
Outputs:	Pointer to array evaluation received payload
Description:evaluates the received payload from master and calculates the slave diagnostics
******************************************************************** */
uint8_t *SlaveCoreFunctionality(void)
{
 54a:	cf 93       	push	r28
	uint8_t RC_resp = 0x47; // Always positive response
	uint8_t WaterLevel = 0;
	//uint8_t soc_bat = 0;

	/* Start measurements */
	WaterLevel = getDistance_main();
 54c:	ae df       	rcall	.-164    	; 0x4aa <getDistance_main>
 54e:	c8 2f       	mov	r28, r24
	
	/* Battery State of Charge */
	uint8_t soc_bat = getBatterySOC();
 550:	ba dd       	rcall	.-1164   	; 0xc6 <getBatterySOC>
 552:	e4 e2       	ldi	r30, 0x24	; 36

	/* Assign the values to the output variable */
	slave_resp[0] = RC_resp;
 554:	f1 e0       	ldi	r31, 0x01	; 1
 556:	97 e4       	ldi	r25, 0x47	; 71
 558:	90 83       	st	Z, r25
 55a:	c1 83       	std	Z+1, r28	; 0x01
	slave_resp[1] = WaterLevel;
 55c:	82 83       	std	Z+2, r24	; 0x02
	slave_resp[2] = soc_bat;
 55e:	cf 01       	movw	r24, r30

	return slave_resp;
}
 560:	cf 91       	pop	r28
 562:	08 95       	ret

00000564 <__vector_1>:
 564:	1f 92       	push	r1
Inputs:		none
Outputs:	internal timer
Description:calculates elapsed time of a measurement
******************************************************************** */
ISR(INT0_vect)
{
 566:	0f 92       	push	r0
 568:	0f b6       	in	r0, 0x3f	; 63
 56a:	0f 92       	push	r0
 56c:	11 24       	eor	r1, r1
 56e:	8f 93       	push	r24
 570:	9f 93       	push	r25
 572:	ef 93       	push	r30
 574:	ff 93       	push	r31
	switch (iIRC)
 576:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <iIRC>
 57a:	88 23       	and	r24, r24
 57c:	19 f0       	breq	.+6      	; 0x584 <__vector_1+0x20>
 57e:	81 30       	cpi	r24, 0x01	; 1
 580:	51 f0       	breq	.+20     	; 0x596 <__vector_1+0x32>
 582:	1a c0       	rjmp	.+52     	; 0x5b8 <__vector_1+0x54>
	{
		case 0: //when logic changes from LOW to HIGH
		{
			iIRC = 1;
 584:	81 e0       	ldi	r24, 0x01	; 1
 586:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <iIRC>
			TCCR1B |= (1<<CS11);
 58a:	e1 e8       	ldi	r30, 0x81	; 129
 58c:	f0 e0       	ldi	r31, 0x00	; 0
 58e:	80 81       	ld	r24, Z
 590:	82 60       	ori	r24, 0x02	; 2
 592:	80 83       	st	Z, r24
			break;
 594:	11 c0       	rjmp	.+34     	; 0x5b8 <__vector_1+0x54>
		}
		case 1:
		{
			/* reset iIRC */
			iIRC = 0;
 596:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <iIRC>
			/* stop counter */
			TCCR1B &= ~(1<<CS11);
 59a:	e1 e8       	ldi	r30, 0x81	; 129
 59c:	f0 e0       	ldi	r31, 0x00	; 0
 59e:	80 81       	ld	r24, Z
 5a0:	8d 7f       	andi	r24, 0xFD	; 253
 5a2:	80 83       	st	Z, r24
			/* assign counter value to pulse */
			pulse = TCNT1;
 5a4:	e4 e8       	ldi	r30, 0x84	; 132
 5a6:	f0 e0       	ldi	r31, 0x00	; 0
 5a8:	80 81       	ld	r24, Z
 5aa:	91 81       	ldd	r25, Z+1	; 0x01
 5ac:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <pulse+0x1>
 5b0:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <pulse>
			/* reset counter */
			TCNT1=0;
 5b4:	11 82       	std	Z+1, r1	; 0x01
 5b6:	10 82       	st	Z, r1
			break;
		}
	}
}
 5b8:	ff 91       	pop	r31
 5ba:	ef 91       	pop	r30
 5bc:	9f 91       	pop	r25
 5be:	8f 91       	pop	r24
 5c0:	0f 90       	pop	r0
 5c2:	0f be       	out	0x3f, r0	; 63
 5c4:	0f 90       	pop	r0
 5c6:	1f 90       	pop	r1
 5c8:	18 95       	reti

000005ca <__vector_6>:
Inputs:		none
Outputs:	f_wdt
Description:wakes up processor after internal timer limit reached (8 sec)
******************************************************************** */
ISR(WDT_vect)
{
 5ca:	1f 92       	push	r1
 5cc:	0f 92       	push	r0
 5ce:	0f b6       	in	r0, 0x3f	; 63
 5d0:	0f 92       	push	r0
 5d2:	11 24       	eor	r1, r1
 5d4:	8f 93       	push	r24
 5d6:	9f 93       	push	r25
	/* set the flag. */
	if(f_wdt == 0)
 5d8:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <f_wdt>
 5dc:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <f_wdt+0x1>
 5e0:	89 2b       	or	r24, r25
 5e2:	31 f4       	brne	.+12     	; 0x5f0 <__vector_6+0x26>
	{
		f_wdt = 1;
 5e4:	81 e0       	ldi	r24, 0x01	; 1
 5e6:	90 e0       	ldi	r25, 0x00	; 0
 5e8:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <f_wdt+0x1>
 5ec:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <f_wdt>
	}
	//else there is an error -> flag was not cleared
}
 5f0:	9f 91       	pop	r25
 5f2:	8f 91       	pop	r24
 5f4:	0f 90       	pop	r0
 5f6:	0f be       	out	0x3f, r0	; 63
 5f8:	0f 90       	pop	r0
 5fa:	1f 90       	pop	r1
 5fc:	18 95       	reti

000005fe <initSlave>:

void initSlave(void) {
	init_RGB(); // Initialize LED
 5fe:	50 dd       	rcall	.-1376   	; 0xa0 <init_RGB>
	set_RGB(red);	_delay_ms(100);
 600:	81 e0       	ldi	r24, 0x01	; 1
 602:	52 dd       	rcall	.-1372   	; 0xa8 <set_RGB>
 604:	2f ef       	ldi	r18, 0xFF	; 255
 606:	81 ee       	ldi	r24, 0xE1	; 225
 608:	94 e0       	ldi	r25, 0x04	; 4
 60a:	21 50       	subi	r18, 0x01	; 1
 60c:	80 40       	sbci	r24, 0x00	; 0
 60e:	90 40       	sbci	r25, 0x00	; 0
 610:	e1 f7       	brne	.-8      	; 0x60a <initSlave+0xc>
 612:	00 c0       	rjmp	.+0      	; 0x614 <initSlave+0x16>

	init_SPI(); //Initialize SPI
 614:	00 00       	nop
	init_nrf24l01(); //Initialize radio module
 616:	99 dd       	rcall	.-1230   	; 0x14a <init_SPI>
 618:	50 de       	rcall	.-864    	; 0x2ba <init_nrf24l01>
	init_ultrasonic(); //Initialize ultrasonic module
 61a:	35 df       	rcall	.-406    	; 0x486 <init_ultrasonic>
 61c:	8b b1       	in	r24, 0x0b	; 11

	set_RGB_low;
 61e:	8f 78       	andi	r24, 0x8F	; 143
 620:	8b b9       	out	0x0b, r24	; 11
 622:	08 95       	ret

00000624 <main>:
 624:	0f 93       	push	r16
uint8_t *SlaveCoreFunctionality(void);
void initSlave(void);

/*----------------- Main function -------------------*/
int main(void)
{
 626:	1f 93       	push	r17
 628:	cf 93       	push	r28
 62a:	df 93       	push	r29
 62c:	00 d0       	rcall	.+0      	; 0x62e <main+0xa>
 62e:	00 d0       	rcall	.+0      	; 0x630 <main+0xc>
 630:	1f 92       	push	r1
 632:	cd b7       	in	r28, 0x3d	; 61
 634:	de b7       	in	r29, 0x3e	; 62
/*---------- Local variables ----------*/
	uint8_t tx_iter = 0;
	uint8_t tx_iter_max = 0;
/*---------- Initialization -----------*/
	initSlave();
 636:	e3 df       	rcall	.-58     	; 0x5fe <initSlave>
	
/*-------------- Cycle loop -----------*/
	while(f_wdt == 1)
 638:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <f_wdt>
 63c:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <f_wdt+0x1>
 640:	01 97       	sbiw	r24, 0x01	; 1
 642:	09 f0       	breq	.+2      	; 0x646 <main+0x22>
 644:	44 c0       	rjmp	.+136    	; 0x6ce <main+0xaa>
 646:	00 e0       	ldi	r16, 0x00	; 0
 648:	10 e0       	ldi	r17, 0x00	; 0
	{
		pwrMngmntCycle += 1;
 64a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 64e:	8f 5f       	subi	r24, 0xFF	; 255
		if (pwrMngmntCycle >= PWR_MNGMNT_CYCLE)
 650:	8f 31       	cpi	r24, 0x1F	; 31
 652:	18 f4       	brcc	.+6      	; 0x65a <main+0x36>
	initSlave();
	
/*-------------- Cycle loop -----------*/
	while(f_wdt == 1)
	{
		pwrMngmntCycle += 1;
 654:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 658:	32 c0       	rjmp	.+100    	; 0x6be <main+0x9a>
		if (pwrMngmntCycle >= PWR_MNGMNT_CYCLE)
		{		
			pwrMngmntCycle = 0;
 65a:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
			/* Slave core functionality */
			uint8_t *slave_resp;
			slave_resp = SlaveCoreFunctionality();
 65e:	75 df       	rcall	.-278    	; 0x54a <SlaveCoreFunctionality>
 660:	fc 01       	movw	r30, r24
			uint8_t w_buf[5] = { slave_resp[0], slave_resp[1], slave_resp[2], 0, 0 };
 662:	80 81       	ld	r24, Z
 664:	89 83       	std	Y+1, r24	; 0x01
 666:	81 81       	ldd	r24, Z+1	; 0x01
 668:	8a 83       	std	Y+2, r24	; 0x02
 66a:	82 81       	ldd	r24, Z+2	; 0x02
 66c:	8b 83       	std	Y+3, r24	; 0x03
 66e:	1c 82       	std	Y+4, r1	; 0x04

			/* Prepare to transmit to the master */
			init_nrf24l01_tx();
 670:	1d 82       	std	Y+5, r1	; 0x05
			do
			{
				tx_iter += 1;
 672:	95 de       	rcall	.-726    	; 0x39e <init_nrf24l01_tx>
				reset();
 674:	1f 5f       	subi	r17, 0xFF	; 255
				send_data(w_buf);	_delay_ms(58);	// delay adjusted so that 150 ms/cycle through measurements
 676:	8c dd       	rcall	.-1256   	; 0x190 <reset>
 678:	ce 01       	movw	r24, r28
 67a:	01 96       	adiw	r24, 0x01	; 1
 67c:	f4 dd       	rcall	.-1048   	; 0x266 <send_data>
 67e:	2f ef       	ldi	r18, 0xFF	; 255
 680:	84 ed       	ldi	r24, 0xD4	; 212
 682:	92 e0       	ldi	r25, 0x02	; 2
 684:	21 50       	subi	r18, 0x01	; 1
 686:	80 40       	sbci	r24, 0x00	; 0
 688:	90 40       	sbci	r25, 0x00	; 0
 68a:	e1 f7       	brne	.-8      	; 0x684 <main+0x60>
 68c:	00 c0       	rjmp	.+0      	; 0x68e <main+0x6a>
 68e:	00 00       	nop
				if (tx_iter > TX_MAX_ITER)	// 1.5 sec pro sending cycle (10 sending attempts)
 690:	1b 30       	cpi	r17, 0x0B	; 11
 692:	68 f0       	brcs	.+26     	; 0x6ae <main+0x8a>
 694:	2f ef       	ldi	r18, 0xFF	; 255
 696:	8d e3       	ldi	r24, 0x3D	; 61
 698:	99 e4       	ldi	r25, 0x49	; 73
 69a:	21 50       	subi	r18, 0x01	; 1
 69c:	80 40       	sbci	r24, 0x00	; 0
 69e:	90 40       	sbci	r25, 0x00	; 0
 6a0:	e1 f7       	brne	.-8      	; 0x69a <main+0x76>
 6a2:	00 c0       	rjmp	.+0      	; 0x6a4 <main+0x80>
 6a4:	00 00       	nop
				{
					_delay_ms(1500); // 1 cycle = 1.5 sec sending + 1.5 sec waiting = 3 sec	
					tx_iter = 0;
					tx_iter_max += 1;
					if (tx_iter_max >= TRANSMIT_MAX_ITER_TOT) // 3 cycles = 9 sec in total sending
 6a6:	0f 5f       	subi	r16, 0xFF	; 255
 6a8:	03 30       	cpi	r16, 0x03	; 3
				reset();
				send_data(w_buf);	_delay_ms(58);	// delay adjusted so that 150 ms/cycle through measurements
				if (tx_iter > TX_MAX_ITER)	// 1.5 sec pro sending cycle (10 sending attempts)
				{
					_delay_ms(1500); // 1 cycle = 1.5 sec sending + 1.5 sec waiting = 3 sec	
					tx_iter = 0;
 6aa:	30 f4       	brcc	.+12     	; 0x6b8 <main+0x94>
					{
						tx_iter_max = 0;	// No receiver, therefore exit the loop and go back to sleep mode
						break;
					}
				}
			} while ((GetReg(STATUS) & (1<<TX_DS)) <= 0);	// Transmission successful
 6ac:	10 e0       	ldi	r17, 0x00	; 0
 6ae:	87 e0       	ldi	r24, 0x07	; 7
 6b0:	5c dd       	rcall	.-1352   	; 0x16a <GetReg>
 6b2:	85 ff       	sbrs	r24, 5
					_delay_ms(1500); // 1 cycle = 1.5 sec sending + 1.5 sec waiting = 3 sec	
					tx_iter = 0;
					tx_iter_max += 1;
					if (tx_iter_max >= TRANSMIT_MAX_ITER_TOT) // 3 cycles = 9 sec in total sending
					{
						tx_iter_max = 0;	// No receiver, therefore exit the loop and go back to sleep mode
 6b4:	df cf       	rjmp	.-66     	; 0x674 <main+0x50>
				reset();
				send_data(w_buf);	_delay_ms(58);	// delay adjusted so that 150 ms/cycle through measurements
				if (tx_iter > TX_MAX_ITER)	// 1.5 sec pro sending cycle (10 sending attempts)
				{
					_delay_ms(1500); // 1 cycle = 1.5 sec sending + 1.5 sec waiting = 3 sec	
					tx_iter = 0;
 6b6:	02 c0       	rjmp	.+4      	; 0x6bc <main+0x98>
						tx_iter_max = 0;	// No receiver, therefore exit the loop and go back to sleep mode
						break;
					}
				}
			} while ((GetReg(STATUS) & (1<<TX_DS)) <= 0);	// Transmission successful
			turnOff_nrf24l01(); 	// Turn off radio
 6b8:	00 e0       	ldi	r16, 0x00	; 0
 6ba:	10 e0       	ldi	r17, 0x00	; 0

		}
		/* Power management */
		PwrMngmnt_main();
 6bc:	8e de       	rcall	.-740    	; 0x3da <turnOff_nrf24l01>
 6be:	d1 de       	rcall	.-606    	; 0x462 <PwrMngmnt_main>
	uint8_t tx_iter_max = 0;
/*---------- Initialization -----------*/
	initSlave();
	
/*-------------- Cycle loop -----------*/
	while(f_wdt == 1)
 6c0:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <f_wdt>
 6c4:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <f_wdt+0x1>
 6c8:	01 97       	sbiw	r24, 0x01	; 1
 6ca:	09 f4       	brne	.+2      	; 0x6ce <main+0xaa>
 6cc:	be cf       	rjmp	.-132    	; 0x64a <main+0x26>
		PwrMngmnt_main();
	}

	return 0;

}
 6ce:	80 e0       	ldi	r24, 0x00	; 0
 6d0:	90 e0       	ldi	r25, 0x00	; 0
 6d2:	0f 90       	pop	r0
 6d4:	0f 90       	pop	r0
 6d6:	0f 90       	pop	r0
 6d8:	0f 90       	pop	r0
 6da:	0f 90       	pop	r0
 6dc:	df 91       	pop	r29
 6de:	cf 91       	pop	r28
 6e0:	1f 91       	pop	r17
 6e2:	0f 91       	pop	r16
 6e4:	08 95       	ret

000006e6 <__subsf3>:
 6e6:	50 58       	subi	r21, 0x80	; 128

000006e8 <__addsf3>:
 6e8:	bb 27       	eor	r27, r27
 6ea:	aa 27       	eor	r26, r26
 6ec:	0e d0       	rcall	.+28     	; 0x70a <__addsf3x>
 6ee:	70 c1       	rjmp	.+736    	; 0x9d0 <__fp_round>
 6f0:	61 d1       	rcall	.+706    	; 0x9b4 <__fp_pscA>
 6f2:	30 f0       	brcs	.+12     	; 0x700 <__addsf3+0x18>
 6f4:	66 d1       	rcall	.+716    	; 0x9c2 <__fp_pscB>
 6f6:	20 f0       	brcs	.+8      	; 0x700 <__addsf3+0x18>
 6f8:	31 f4       	brne	.+12     	; 0x706 <__addsf3+0x1e>
 6fa:	9f 3f       	cpi	r25, 0xFF	; 255
 6fc:	11 f4       	brne	.+4      	; 0x702 <__addsf3+0x1a>
 6fe:	1e f4       	brtc	.+6      	; 0x706 <__addsf3+0x1e>
 700:	56 c1       	rjmp	.+684    	; 0x9ae <__fp_nan>
 702:	0e f4       	brtc	.+2      	; 0x706 <__addsf3+0x1e>
 704:	e0 95       	com	r30
 706:	e7 fb       	bst	r30, 7
 708:	4c c1       	rjmp	.+664    	; 0x9a2 <__fp_inf>

0000070a <__addsf3x>:
 70a:	e9 2f       	mov	r30, r25
 70c:	72 d1       	rcall	.+740    	; 0x9f2 <__fp_split3>
 70e:	80 f3       	brcs	.-32     	; 0x6f0 <__addsf3+0x8>
 710:	ba 17       	cp	r27, r26
 712:	62 07       	cpc	r22, r18
 714:	73 07       	cpc	r23, r19
 716:	84 07       	cpc	r24, r20
 718:	95 07       	cpc	r25, r21
 71a:	18 f0       	brcs	.+6      	; 0x722 <__addsf3x+0x18>
 71c:	71 f4       	brne	.+28     	; 0x73a <__addsf3x+0x30>
 71e:	9e f5       	brtc	.+102    	; 0x786 <__addsf3x+0x7c>
 720:	8a c1       	rjmp	.+788    	; 0xa36 <__fp_zero>
 722:	0e f4       	brtc	.+2      	; 0x726 <__addsf3x+0x1c>
 724:	e0 95       	com	r30
 726:	0b 2e       	mov	r0, r27
 728:	ba 2f       	mov	r27, r26
 72a:	a0 2d       	mov	r26, r0
 72c:	0b 01       	movw	r0, r22
 72e:	b9 01       	movw	r22, r18
 730:	90 01       	movw	r18, r0
 732:	0c 01       	movw	r0, r24
 734:	ca 01       	movw	r24, r20
 736:	a0 01       	movw	r20, r0
 738:	11 24       	eor	r1, r1
 73a:	ff 27       	eor	r31, r31
 73c:	59 1b       	sub	r21, r25
 73e:	99 f0       	breq	.+38     	; 0x766 <__addsf3x+0x5c>
 740:	59 3f       	cpi	r21, 0xF9	; 249
 742:	50 f4       	brcc	.+20     	; 0x758 <__addsf3x+0x4e>
 744:	50 3e       	cpi	r21, 0xE0	; 224
 746:	68 f1       	brcs	.+90     	; 0x7a2 <__addsf3x+0x98>
 748:	1a 16       	cp	r1, r26
 74a:	f0 40       	sbci	r31, 0x00	; 0
 74c:	a2 2f       	mov	r26, r18
 74e:	23 2f       	mov	r18, r19
 750:	34 2f       	mov	r19, r20
 752:	44 27       	eor	r20, r20
 754:	58 5f       	subi	r21, 0xF8	; 248
 756:	f3 cf       	rjmp	.-26     	; 0x73e <__addsf3x+0x34>
 758:	46 95       	lsr	r20
 75a:	37 95       	ror	r19
 75c:	27 95       	ror	r18
 75e:	a7 95       	ror	r26
 760:	f0 40       	sbci	r31, 0x00	; 0
 762:	53 95       	inc	r21
 764:	c9 f7       	brne	.-14     	; 0x758 <__addsf3x+0x4e>
 766:	7e f4       	brtc	.+30     	; 0x786 <__addsf3x+0x7c>
 768:	1f 16       	cp	r1, r31
 76a:	ba 0b       	sbc	r27, r26
 76c:	62 0b       	sbc	r22, r18
 76e:	73 0b       	sbc	r23, r19
 770:	84 0b       	sbc	r24, r20
 772:	ba f0       	brmi	.+46     	; 0x7a2 <__addsf3x+0x98>
 774:	91 50       	subi	r25, 0x01	; 1
 776:	a1 f0       	breq	.+40     	; 0x7a0 <__addsf3x+0x96>
 778:	ff 0f       	add	r31, r31
 77a:	bb 1f       	adc	r27, r27
 77c:	66 1f       	adc	r22, r22
 77e:	77 1f       	adc	r23, r23
 780:	88 1f       	adc	r24, r24
 782:	c2 f7       	brpl	.-16     	; 0x774 <__addsf3x+0x6a>
 784:	0e c0       	rjmp	.+28     	; 0x7a2 <__addsf3x+0x98>
 786:	ba 0f       	add	r27, r26
 788:	62 1f       	adc	r22, r18
 78a:	73 1f       	adc	r23, r19
 78c:	84 1f       	adc	r24, r20
 78e:	48 f4       	brcc	.+18     	; 0x7a2 <__addsf3x+0x98>
 790:	87 95       	ror	r24
 792:	77 95       	ror	r23
 794:	67 95       	ror	r22
 796:	b7 95       	ror	r27
 798:	f7 95       	ror	r31
 79a:	9e 3f       	cpi	r25, 0xFE	; 254
 79c:	08 f0       	brcs	.+2      	; 0x7a0 <__addsf3x+0x96>
 79e:	b3 cf       	rjmp	.-154    	; 0x706 <__addsf3+0x1e>
 7a0:	93 95       	inc	r25
 7a2:	88 0f       	add	r24, r24
 7a4:	08 f0       	brcs	.+2      	; 0x7a8 <__addsf3x+0x9e>
 7a6:	99 27       	eor	r25, r25
 7a8:	ee 0f       	add	r30, r30
 7aa:	97 95       	ror	r25
 7ac:	87 95       	ror	r24
 7ae:	08 95       	ret

000007b0 <__cmpsf2>:
 7b0:	d4 d0       	rcall	.+424    	; 0x95a <__fp_cmp>
 7b2:	08 f4       	brcc	.+2      	; 0x7b6 <__cmpsf2+0x6>
 7b4:	81 e0       	ldi	r24, 0x01	; 1
 7b6:	08 95       	ret

000007b8 <__divsf3>:
 7b8:	0c d0       	rcall	.+24     	; 0x7d2 <__divsf3x>
 7ba:	0a c1       	rjmp	.+532    	; 0x9d0 <__fp_round>
 7bc:	02 d1       	rcall	.+516    	; 0x9c2 <__fp_pscB>
 7be:	40 f0       	brcs	.+16     	; 0x7d0 <__divsf3+0x18>
 7c0:	f9 d0       	rcall	.+498    	; 0x9b4 <__fp_pscA>
 7c2:	30 f0       	brcs	.+12     	; 0x7d0 <__divsf3+0x18>
 7c4:	21 f4       	brne	.+8      	; 0x7ce <__divsf3+0x16>
 7c6:	5f 3f       	cpi	r21, 0xFF	; 255
 7c8:	19 f0       	breq	.+6      	; 0x7d0 <__divsf3+0x18>
 7ca:	eb c0       	rjmp	.+470    	; 0x9a2 <__fp_inf>
 7cc:	51 11       	cpse	r21, r1
 7ce:	34 c1       	rjmp	.+616    	; 0xa38 <__fp_szero>
 7d0:	ee c0       	rjmp	.+476    	; 0x9ae <__fp_nan>

000007d2 <__divsf3x>:
 7d2:	0f d1       	rcall	.+542    	; 0x9f2 <__fp_split3>
 7d4:	98 f3       	brcs	.-26     	; 0x7bc <__divsf3+0x4>

000007d6 <__divsf3_pse>:
 7d6:	99 23       	and	r25, r25
 7d8:	c9 f3       	breq	.-14     	; 0x7cc <__divsf3+0x14>
 7da:	55 23       	and	r21, r21
 7dc:	b1 f3       	breq	.-20     	; 0x7ca <__divsf3+0x12>
 7de:	95 1b       	sub	r25, r21
 7e0:	55 0b       	sbc	r21, r21
 7e2:	bb 27       	eor	r27, r27
 7e4:	aa 27       	eor	r26, r26
 7e6:	62 17       	cp	r22, r18
 7e8:	73 07       	cpc	r23, r19
 7ea:	84 07       	cpc	r24, r20
 7ec:	38 f0       	brcs	.+14     	; 0x7fc <__divsf3_pse+0x26>
 7ee:	9f 5f       	subi	r25, 0xFF	; 255
 7f0:	5f 4f       	sbci	r21, 0xFF	; 255
 7f2:	22 0f       	add	r18, r18
 7f4:	33 1f       	adc	r19, r19
 7f6:	44 1f       	adc	r20, r20
 7f8:	aa 1f       	adc	r26, r26
 7fa:	a9 f3       	breq	.-22     	; 0x7e6 <__divsf3_pse+0x10>
 7fc:	33 d0       	rcall	.+102    	; 0x864 <__divsf3_pse+0x8e>
 7fe:	0e 2e       	mov	r0, r30
 800:	3a f0       	brmi	.+14     	; 0x810 <__divsf3_pse+0x3a>
 802:	e0 e8       	ldi	r30, 0x80	; 128
 804:	30 d0       	rcall	.+96     	; 0x866 <__divsf3_pse+0x90>
 806:	91 50       	subi	r25, 0x01	; 1
 808:	50 40       	sbci	r21, 0x00	; 0
 80a:	e6 95       	lsr	r30
 80c:	00 1c       	adc	r0, r0
 80e:	ca f7       	brpl	.-14     	; 0x802 <__divsf3_pse+0x2c>
 810:	29 d0       	rcall	.+82     	; 0x864 <__divsf3_pse+0x8e>
 812:	fe 2f       	mov	r31, r30
 814:	27 d0       	rcall	.+78     	; 0x864 <__divsf3_pse+0x8e>
 816:	66 0f       	add	r22, r22
 818:	77 1f       	adc	r23, r23
 81a:	88 1f       	adc	r24, r24
 81c:	bb 1f       	adc	r27, r27
 81e:	26 17       	cp	r18, r22
 820:	37 07       	cpc	r19, r23
 822:	48 07       	cpc	r20, r24
 824:	ab 07       	cpc	r26, r27
 826:	b0 e8       	ldi	r27, 0x80	; 128
 828:	09 f0       	breq	.+2      	; 0x82c <__divsf3_pse+0x56>
 82a:	bb 0b       	sbc	r27, r27
 82c:	80 2d       	mov	r24, r0
 82e:	bf 01       	movw	r22, r30
 830:	ff 27       	eor	r31, r31
 832:	93 58       	subi	r25, 0x83	; 131
 834:	5f 4f       	sbci	r21, 0xFF	; 255
 836:	2a f0       	brmi	.+10     	; 0x842 <__divsf3_pse+0x6c>
 838:	9e 3f       	cpi	r25, 0xFE	; 254
 83a:	51 05       	cpc	r21, r1
 83c:	68 f0       	brcs	.+26     	; 0x858 <__divsf3_pse+0x82>
 83e:	b1 c0       	rjmp	.+354    	; 0x9a2 <__fp_inf>
 840:	fb c0       	rjmp	.+502    	; 0xa38 <__fp_szero>
 842:	5f 3f       	cpi	r21, 0xFF	; 255
 844:	ec f3       	brlt	.-6      	; 0x840 <__divsf3_pse+0x6a>
 846:	98 3e       	cpi	r25, 0xE8	; 232
 848:	dc f3       	brlt	.-10     	; 0x840 <__divsf3_pse+0x6a>
 84a:	86 95       	lsr	r24
 84c:	77 95       	ror	r23
 84e:	67 95       	ror	r22
 850:	b7 95       	ror	r27
 852:	f7 95       	ror	r31
 854:	9f 5f       	subi	r25, 0xFF	; 255
 856:	c9 f7       	brne	.-14     	; 0x84a <__divsf3_pse+0x74>
 858:	88 0f       	add	r24, r24
 85a:	91 1d       	adc	r25, r1
 85c:	96 95       	lsr	r25
 85e:	87 95       	ror	r24
 860:	97 f9       	bld	r25, 7
 862:	08 95       	ret
 864:	e1 e0       	ldi	r30, 0x01	; 1
 866:	66 0f       	add	r22, r22
 868:	77 1f       	adc	r23, r23
 86a:	88 1f       	adc	r24, r24
 86c:	bb 1f       	adc	r27, r27
 86e:	62 17       	cp	r22, r18
 870:	73 07       	cpc	r23, r19
 872:	84 07       	cpc	r24, r20
 874:	ba 07       	cpc	r27, r26
 876:	20 f0       	brcs	.+8      	; 0x880 <__divsf3_pse+0xaa>
 878:	62 1b       	sub	r22, r18
 87a:	73 0b       	sbc	r23, r19
 87c:	84 0b       	sbc	r24, r20
 87e:	ba 0b       	sbc	r27, r26
 880:	ee 1f       	adc	r30, r30
 882:	88 f7       	brcc	.-30     	; 0x866 <__divsf3_pse+0x90>
 884:	e0 95       	com	r30
 886:	08 95       	ret

00000888 <__fixunssfsi>:
 888:	bc d0       	rcall	.+376    	; 0xa02 <__fp_splitA>
 88a:	88 f0       	brcs	.+34     	; 0x8ae <__fixunssfsi+0x26>
 88c:	9f 57       	subi	r25, 0x7F	; 127
 88e:	90 f0       	brcs	.+36     	; 0x8b4 <__fixunssfsi+0x2c>
 890:	b9 2f       	mov	r27, r25
 892:	99 27       	eor	r25, r25
 894:	b7 51       	subi	r27, 0x17	; 23
 896:	a0 f0       	brcs	.+40     	; 0x8c0 <__fixunssfsi+0x38>
 898:	d1 f0       	breq	.+52     	; 0x8ce <__fixunssfsi+0x46>
 89a:	66 0f       	add	r22, r22
 89c:	77 1f       	adc	r23, r23
 89e:	88 1f       	adc	r24, r24
 8a0:	99 1f       	adc	r25, r25
 8a2:	1a f0       	brmi	.+6      	; 0x8aa <__fixunssfsi+0x22>
 8a4:	ba 95       	dec	r27
 8a6:	c9 f7       	brne	.-14     	; 0x89a <__fixunssfsi+0x12>
 8a8:	12 c0       	rjmp	.+36     	; 0x8ce <__fixunssfsi+0x46>
 8aa:	b1 30       	cpi	r27, 0x01	; 1
 8ac:	81 f0       	breq	.+32     	; 0x8ce <__fixunssfsi+0x46>
 8ae:	c3 d0       	rcall	.+390    	; 0xa36 <__fp_zero>
 8b0:	b1 e0       	ldi	r27, 0x01	; 1
 8b2:	08 95       	ret
 8b4:	c0 c0       	rjmp	.+384    	; 0xa36 <__fp_zero>
 8b6:	67 2f       	mov	r22, r23
 8b8:	78 2f       	mov	r23, r24
 8ba:	88 27       	eor	r24, r24
 8bc:	b8 5f       	subi	r27, 0xF8	; 248
 8be:	39 f0       	breq	.+14     	; 0x8ce <__fixunssfsi+0x46>
 8c0:	b9 3f       	cpi	r27, 0xF9	; 249
 8c2:	cc f3       	brlt	.-14     	; 0x8b6 <__fixunssfsi+0x2e>
 8c4:	86 95       	lsr	r24
 8c6:	77 95       	ror	r23
 8c8:	67 95       	ror	r22
 8ca:	b3 95       	inc	r27
 8cc:	d9 f7       	brne	.-10     	; 0x8c4 <__fixunssfsi+0x3c>
 8ce:	3e f4       	brtc	.+14     	; 0x8de <__fixunssfsi+0x56>
 8d0:	90 95       	com	r25
 8d2:	80 95       	com	r24
 8d4:	70 95       	com	r23
 8d6:	61 95       	neg	r22
 8d8:	7f 4f       	sbci	r23, 0xFF	; 255
 8da:	8f 4f       	sbci	r24, 0xFF	; 255
 8dc:	9f 4f       	sbci	r25, 0xFF	; 255
 8de:	08 95       	ret

000008e0 <__floatunsisf>:
 8e0:	e8 94       	clt
 8e2:	09 c0       	rjmp	.+18     	; 0x8f6 <__floatsisf+0x12>

000008e4 <__floatsisf>:
 8e4:	97 fb       	bst	r25, 7
 8e6:	3e f4       	brtc	.+14     	; 0x8f6 <__floatsisf+0x12>
 8e8:	90 95       	com	r25
 8ea:	80 95       	com	r24
 8ec:	70 95       	com	r23
 8ee:	61 95       	neg	r22
 8f0:	7f 4f       	sbci	r23, 0xFF	; 255
 8f2:	8f 4f       	sbci	r24, 0xFF	; 255
 8f4:	9f 4f       	sbci	r25, 0xFF	; 255
 8f6:	99 23       	and	r25, r25
 8f8:	a9 f0       	breq	.+42     	; 0x924 <__stack+0x25>
 8fa:	f9 2f       	mov	r31, r25
 8fc:	96 e9       	ldi	r25, 0x96	; 150
 8fe:	bb 27       	eor	r27, r27
 900:	93 95       	inc	r25
 902:	f6 95       	lsr	r31
 904:	87 95       	ror	r24
 906:	77 95       	ror	r23
 908:	67 95       	ror	r22
 90a:	b7 95       	ror	r27
 90c:	f1 11       	cpse	r31, r1
 90e:	f8 cf       	rjmp	.-16     	; 0x900 <__stack+0x1>
 910:	fa f4       	brpl	.+62     	; 0x950 <__stack+0x51>
 912:	bb 0f       	add	r27, r27
 914:	11 f4       	brne	.+4      	; 0x91a <__stack+0x1b>
 916:	60 ff       	sbrs	r22, 0
 918:	1b c0       	rjmp	.+54     	; 0x950 <__stack+0x51>
 91a:	6f 5f       	subi	r22, 0xFF	; 255
 91c:	7f 4f       	sbci	r23, 0xFF	; 255
 91e:	8f 4f       	sbci	r24, 0xFF	; 255
 920:	9f 4f       	sbci	r25, 0xFF	; 255
 922:	16 c0       	rjmp	.+44     	; 0x950 <__stack+0x51>
 924:	88 23       	and	r24, r24
 926:	11 f0       	breq	.+4      	; 0x92c <__stack+0x2d>
 928:	96 e9       	ldi	r25, 0x96	; 150
 92a:	11 c0       	rjmp	.+34     	; 0x94e <__stack+0x4f>
 92c:	77 23       	and	r23, r23
 92e:	21 f0       	breq	.+8      	; 0x938 <__stack+0x39>
 930:	9e e8       	ldi	r25, 0x8E	; 142
 932:	87 2f       	mov	r24, r23
 934:	76 2f       	mov	r23, r22
 936:	05 c0       	rjmp	.+10     	; 0x942 <__stack+0x43>
 938:	66 23       	and	r22, r22
 93a:	71 f0       	breq	.+28     	; 0x958 <__stack+0x59>
 93c:	96 e8       	ldi	r25, 0x86	; 134
 93e:	86 2f       	mov	r24, r22
 940:	70 e0       	ldi	r23, 0x00	; 0
 942:	60 e0       	ldi	r22, 0x00	; 0
 944:	2a f0       	brmi	.+10     	; 0x950 <__stack+0x51>
 946:	9a 95       	dec	r25
 948:	66 0f       	add	r22, r22
 94a:	77 1f       	adc	r23, r23
 94c:	88 1f       	adc	r24, r24
 94e:	da f7       	brpl	.-10     	; 0x946 <__stack+0x47>
 950:	88 0f       	add	r24, r24
 952:	96 95       	lsr	r25
 954:	87 95       	ror	r24
 956:	97 f9       	bld	r25, 7
 958:	08 95       	ret

0000095a <__fp_cmp>:
 95a:	99 0f       	add	r25, r25
 95c:	00 08       	sbc	r0, r0
 95e:	55 0f       	add	r21, r21
 960:	aa 0b       	sbc	r26, r26
 962:	e0 e8       	ldi	r30, 0x80	; 128
 964:	fe ef       	ldi	r31, 0xFE	; 254
 966:	16 16       	cp	r1, r22
 968:	17 06       	cpc	r1, r23
 96a:	e8 07       	cpc	r30, r24
 96c:	f9 07       	cpc	r31, r25
 96e:	c0 f0       	brcs	.+48     	; 0x9a0 <__fp_cmp+0x46>
 970:	12 16       	cp	r1, r18
 972:	13 06       	cpc	r1, r19
 974:	e4 07       	cpc	r30, r20
 976:	f5 07       	cpc	r31, r21
 978:	98 f0       	brcs	.+38     	; 0x9a0 <__fp_cmp+0x46>
 97a:	62 1b       	sub	r22, r18
 97c:	73 0b       	sbc	r23, r19
 97e:	84 0b       	sbc	r24, r20
 980:	95 0b       	sbc	r25, r21
 982:	39 f4       	brne	.+14     	; 0x992 <__fp_cmp+0x38>
 984:	0a 26       	eor	r0, r26
 986:	61 f0       	breq	.+24     	; 0x9a0 <__fp_cmp+0x46>
 988:	23 2b       	or	r18, r19
 98a:	24 2b       	or	r18, r20
 98c:	25 2b       	or	r18, r21
 98e:	21 f4       	brne	.+8      	; 0x998 <__fp_cmp+0x3e>
 990:	08 95       	ret
 992:	0a 26       	eor	r0, r26
 994:	09 f4       	brne	.+2      	; 0x998 <__fp_cmp+0x3e>
 996:	a1 40       	sbci	r26, 0x01	; 1
 998:	a6 95       	lsr	r26
 99a:	8f ef       	ldi	r24, 0xFF	; 255
 99c:	81 1d       	adc	r24, r1
 99e:	81 1d       	adc	r24, r1
 9a0:	08 95       	ret

000009a2 <__fp_inf>:
 9a2:	97 f9       	bld	r25, 7
 9a4:	9f 67       	ori	r25, 0x7F	; 127
 9a6:	80 e8       	ldi	r24, 0x80	; 128
 9a8:	70 e0       	ldi	r23, 0x00	; 0
 9aa:	60 e0       	ldi	r22, 0x00	; 0
 9ac:	08 95       	ret

000009ae <__fp_nan>:
 9ae:	9f ef       	ldi	r25, 0xFF	; 255
 9b0:	80 ec       	ldi	r24, 0xC0	; 192
 9b2:	08 95       	ret

000009b4 <__fp_pscA>:
 9b4:	00 24       	eor	r0, r0
 9b6:	0a 94       	dec	r0
 9b8:	16 16       	cp	r1, r22
 9ba:	17 06       	cpc	r1, r23
 9bc:	18 06       	cpc	r1, r24
 9be:	09 06       	cpc	r0, r25
 9c0:	08 95       	ret

000009c2 <__fp_pscB>:
 9c2:	00 24       	eor	r0, r0
 9c4:	0a 94       	dec	r0
 9c6:	12 16       	cp	r1, r18
 9c8:	13 06       	cpc	r1, r19
 9ca:	14 06       	cpc	r1, r20
 9cc:	05 06       	cpc	r0, r21
 9ce:	08 95       	ret

000009d0 <__fp_round>:
 9d0:	09 2e       	mov	r0, r25
 9d2:	03 94       	inc	r0
 9d4:	00 0c       	add	r0, r0
 9d6:	11 f4       	brne	.+4      	; 0x9dc <__fp_round+0xc>
 9d8:	88 23       	and	r24, r24
 9da:	52 f0       	brmi	.+20     	; 0x9f0 <__fp_round+0x20>
 9dc:	bb 0f       	add	r27, r27
 9de:	40 f4       	brcc	.+16     	; 0x9f0 <__fp_round+0x20>
 9e0:	bf 2b       	or	r27, r31
 9e2:	11 f4       	brne	.+4      	; 0x9e8 <__fp_round+0x18>
 9e4:	60 ff       	sbrs	r22, 0
 9e6:	04 c0       	rjmp	.+8      	; 0x9f0 <__fp_round+0x20>
 9e8:	6f 5f       	subi	r22, 0xFF	; 255
 9ea:	7f 4f       	sbci	r23, 0xFF	; 255
 9ec:	8f 4f       	sbci	r24, 0xFF	; 255
 9ee:	9f 4f       	sbci	r25, 0xFF	; 255
 9f0:	08 95       	ret

000009f2 <__fp_split3>:
 9f2:	57 fd       	sbrc	r21, 7
 9f4:	90 58       	subi	r25, 0x80	; 128
 9f6:	44 0f       	add	r20, r20
 9f8:	55 1f       	adc	r21, r21
 9fa:	59 f0       	breq	.+22     	; 0xa12 <__fp_splitA+0x10>
 9fc:	5f 3f       	cpi	r21, 0xFF	; 255
 9fe:	71 f0       	breq	.+28     	; 0xa1c <__fp_splitA+0x1a>
 a00:	47 95       	ror	r20

00000a02 <__fp_splitA>:
 a02:	88 0f       	add	r24, r24
 a04:	97 fb       	bst	r25, 7
 a06:	99 1f       	adc	r25, r25
 a08:	61 f0       	breq	.+24     	; 0xa22 <__fp_splitA+0x20>
 a0a:	9f 3f       	cpi	r25, 0xFF	; 255
 a0c:	79 f0       	breq	.+30     	; 0xa2c <__fp_splitA+0x2a>
 a0e:	87 95       	ror	r24
 a10:	08 95       	ret
 a12:	12 16       	cp	r1, r18
 a14:	13 06       	cpc	r1, r19
 a16:	14 06       	cpc	r1, r20
 a18:	55 1f       	adc	r21, r21
 a1a:	f2 cf       	rjmp	.-28     	; 0xa00 <__fp_split3+0xe>
 a1c:	46 95       	lsr	r20
 a1e:	f1 df       	rcall	.-30     	; 0xa02 <__fp_splitA>
 a20:	08 c0       	rjmp	.+16     	; 0xa32 <__fp_splitA+0x30>
 a22:	16 16       	cp	r1, r22
 a24:	17 06       	cpc	r1, r23
 a26:	18 06       	cpc	r1, r24
 a28:	99 1f       	adc	r25, r25
 a2a:	f1 cf       	rjmp	.-30     	; 0xa0e <__fp_splitA+0xc>
 a2c:	86 95       	lsr	r24
 a2e:	71 05       	cpc	r23, r1
 a30:	61 05       	cpc	r22, r1
 a32:	08 94       	sec
 a34:	08 95       	ret

00000a36 <__fp_zero>:
 a36:	e8 94       	clt

00000a38 <__fp_szero>:
 a38:	bb 27       	eor	r27, r27
 a3a:	66 27       	eor	r22, r22
 a3c:	77 27       	eor	r23, r23
 a3e:	cb 01       	movw	r24, r22
 a40:	97 f9       	bld	r25, 7
 a42:	08 95       	ret

00000a44 <__mulsf3>:
 a44:	0b d0       	rcall	.+22     	; 0xa5c <__mulsf3x>
 a46:	c4 cf       	rjmp	.-120    	; 0x9d0 <__fp_round>
 a48:	b5 df       	rcall	.-150    	; 0x9b4 <__fp_pscA>
 a4a:	28 f0       	brcs	.+10     	; 0xa56 <__mulsf3+0x12>
 a4c:	ba df       	rcall	.-140    	; 0x9c2 <__fp_pscB>
 a4e:	18 f0       	brcs	.+6      	; 0xa56 <__mulsf3+0x12>
 a50:	95 23       	and	r25, r21
 a52:	09 f0       	breq	.+2      	; 0xa56 <__mulsf3+0x12>
 a54:	a6 cf       	rjmp	.-180    	; 0x9a2 <__fp_inf>
 a56:	ab cf       	rjmp	.-170    	; 0x9ae <__fp_nan>
 a58:	11 24       	eor	r1, r1
 a5a:	ee cf       	rjmp	.-36     	; 0xa38 <__fp_szero>

00000a5c <__mulsf3x>:
 a5c:	ca df       	rcall	.-108    	; 0x9f2 <__fp_split3>
 a5e:	a0 f3       	brcs	.-24     	; 0xa48 <__mulsf3+0x4>

00000a60 <__mulsf3_pse>:
 a60:	95 9f       	mul	r25, r21
 a62:	d1 f3       	breq	.-12     	; 0xa58 <__mulsf3+0x14>
 a64:	95 0f       	add	r25, r21
 a66:	50 e0       	ldi	r21, 0x00	; 0
 a68:	55 1f       	adc	r21, r21
 a6a:	62 9f       	mul	r22, r18
 a6c:	f0 01       	movw	r30, r0
 a6e:	72 9f       	mul	r23, r18
 a70:	bb 27       	eor	r27, r27
 a72:	f0 0d       	add	r31, r0
 a74:	b1 1d       	adc	r27, r1
 a76:	63 9f       	mul	r22, r19
 a78:	aa 27       	eor	r26, r26
 a7a:	f0 0d       	add	r31, r0
 a7c:	b1 1d       	adc	r27, r1
 a7e:	aa 1f       	adc	r26, r26
 a80:	64 9f       	mul	r22, r20
 a82:	66 27       	eor	r22, r22
 a84:	b0 0d       	add	r27, r0
 a86:	a1 1d       	adc	r26, r1
 a88:	66 1f       	adc	r22, r22
 a8a:	82 9f       	mul	r24, r18
 a8c:	22 27       	eor	r18, r18
 a8e:	b0 0d       	add	r27, r0
 a90:	a1 1d       	adc	r26, r1
 a92:	62 1f       	adc	r22, r18
 a94:	73 9f       	mul	r23, r19
 a96:	b0 0d       	add	r27, r0
 a98:	a1 1d       	adc	r26, r1
 a9a:	62 1f       	adc	r22, r18
 a9c:	83 9f       	mul	r24, r19
 a9e:	a0 0d       	add	r26, r0
 aa0:	61 1d       	adc	r22, r1
 aa2:	22 1f       	adc	r18, r18
 aa4:	74 9f       	mul	r23, r20
 aa6:	33 27       	eor	r19, r19
 aa8:	a0 0d       	add	r26, r0
 aaa:	61 1d       	adc	r22, r1
 aac:	23 1f       	adc	r18, r19
 aae:	84 9f       	mul	r24, r20
 ab0:	60 0d       	add	r22, r0
 ab2:	21 1d       	adc	r18, r1
 ab4:	82 2f       	mov	r24, r18
 ab6:	76 2f       	mov	r23, r22
 ab8:	6a 2f       	mov	r22, r26
 aba:	11 24       	eor	r1, r1
 abc:	9f 57       	subi	r25, 0x7F	; 127
 abe:	50 40       	sbci	r21, 0x00	; 0
 ac0:	8a f0       	brmi	.+34     	; 0xae4 <__mulsf3_pse+0x84>
 ac2:	e1 f0       	breq	.+56     	; 0xafc <__mulsf3_pse+0x9c>
 ac4:	88 23       	and	r24, r24
 ac6:	4a f0       	brmi	.+18     	; 0xada <__mulsf3_pse+0x7a>
 ac8:	ee 0f       	add	r30, r30
 aca:	ff 1f       	adc	r31, r31
 acc:	bb 1f       	adc	r27, r27
 ace:	66 1f       	adc	r22, r22
 ad0:	77 1f       	adc	r23, r23
 ad2:	88 1f       	adc	r24, r24
 ad4:	91 50       	subi	r25, 0x01	; 1
 ad6:	50 40       	sbci	r21, 0x00	; 0
 ad8:	a9 f7       	brne	.-22     	; 0xac4 <__mulsf3_pse+0x64>
 ada:	9e 3f       	cpi	r25, 0xFE	; 254
 adc:	51 05       	cpc	r21, r1
 ade:	70 f0       	brcs	.+28     	; 0xafc <__mulsf3_pse+0x9c>
 ae0:	60 cf       	rjmp	.-320    	; 0x9a2 <__fp_inf>
 ae2:	aa cf       	rjmp	.-172    	; 0xa38 <__fp_szero>
 ae4:	5f 3f       	cpi	r21, 0xFF	; 255
 ae6:	ec f3       	brlt	.-6      	; 0xae2 <__mulsf3_pse+0x82>
 ae8:	98 3e       	cpi	r25, 0xE8	; 232
 aea:	dc f3       	brlt	.-10     	; 0xae2 <__mulsf3_pse+0x82>
 aec:	86 95       	lsr	r24
 aee:	77 95       	ror	r23
 af0:	67 95       	ror	r22
 af2:	b7 95       	ror	r27
 af4:	f7 95       	ror	r31
 af6:	e7 95       	ror	r30
 af8:	9f 5f       	subi	r25, 0xFF	; 255
 afa:	c1 f7       	brne	.-16     	; 0xaec <__mulsf3_pse+0x8c>
 afc:	fe 2b       	or	r31, r30
 afe:	88 0f       	add	r24, r24
 b00:	91 1d       	adc	r25, r1
 b02:	96 95       	lsr	r25
 b04:	87 95       	ror	r24
 b06:	97 f9       	bld	r25, 7
 b08:	08 95       	ret

00000b0a <_exit>:
 b0a:	f8 94       	cli

00000b0c <__stop_program>:
 b0c:	ff cf       	rjmp	.-2      	; 0xb0c <__stop_program>
