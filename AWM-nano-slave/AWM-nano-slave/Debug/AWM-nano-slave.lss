
AWM-nano-slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000008c8  0000095c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008c8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000028  00800104  00800104  00000960  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000960  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000990  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  000009d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000017d7  00000000  00000000  00000ae0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b7f  00000000  00000000  000022b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011dc  00000000  00000000  00002e36  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000288  00000000  00000000  00004014  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00008a8d  00000000  00000000  0000429c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000df6  00000000  00000000  0000cd29  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  0000db1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00000eac  00000000  00000000  0000dc07  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	28 c2       	rjmp	.+1104   	; 0x456 <__vector_1>
   6:	00 00       	nop
   8:	4a c0       	rjmp	.+148    	; 0x9e <__bad_interrupt>
   a:	00 00       	nop
   c:	48 c0       	rjmp	.+144    	; 0x9e <__bad_interrupt>
   e:	00 00       	nop
  10:	46 c0       	rjmp	.+140    	; 0x9e <__bad_interrupt>
  12:	00 00       	nop
  14:	44 c0       	rjmp	.+136    	; 0x9e <__bad_interrupt>
  16:	00 00       	nop
  18:	51 c2       	rjmp	.+1186   	; 0x4bc <__vector_6>
  1a:	00 00       	nop
  1c:	40 c0       	rjmp	.+128    	; 0x9e <__bad_interrupt>
  1e:	00 00       	nop
  20:	3e c0       	rjmp	.+124    	; 0x9e <__bad_interrupt>
  22:	00 00       	nop
  24:	3c c0       	rjmp	.+120    	; 0x9e <__bad_interrupt>
  26:	00 00       	nop
  28:	3a c0       	rjmp	.+116    	; 0x9e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	38 c0       	rjmp	.+112    	; 0x9e <__bad_interrupt>
  2e:	00 00       	nop
  30:	36 c0       	rjmp	.+108    	; 0x9e <__bad_interrupt>
  32:	00 00       	nop
  34:	34 c0       	rjmp	.+104    	; 0x9e <__bad_interrupt>
  36:	00 00       	nop
  38:	32 c0       	rjmp	.+100    	; 0x9e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	30 c0       	rjmp	.+96     	; 0x9e <__bad_interrupt>
  3e:	00 00       	nop
  40:	2e c0       	rjmp	.+92     	; 0x9e <__bad_interrupt>
  42:	00 00       	nop
  44:	2c c0       	rjmp	.+88     	; 0x9e <__bad_interrupt>
  46:	00 00       	nop
  48:	2a c0       	rjmp	.+84     	; 0x9e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	28 c0       	rjmp	.+80     	; 0x9e <__bad_interrupt>
  4e:	00 00       	nop
  50:	26 c0       	rjmp	.+76     	; 0x9e <__bad_interrupt>
  52:	00 00       	nop
  54:	24 c0       	rjmp	.+72     	; 0x9e <__bad_interrupt>
  56:	00 00       	nop
  58:	22 c0       	rjmp	.+68     	; 0x9e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	20 c0       	rjmp	.+64     	; 0x9e <__bad_interrupt>
  5e:	00 00       	nop
  60:	1e c0       	rjmp	.+60     	; 0x9e <__bad_interrupt>
  62:	00 00       	nop
  64:	1c c0       	rjmp	.+56     	; 0x9e <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 ec       	ldi	r30, 0xC8	; 200
  7c:	f8 e0       	ldi	r31, 0x08	; 8
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 30       	cpi	r26, 0x04	; 4
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e0       	ldi	r26, 0x04	; 4
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 32       	cpi	r26, 0x2C	; 44
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	7d d1       	rcall	.+762    	; 0x396 <main>
  9c:	13 c4       	rjmp	.+2086   	; 0x8c4 <_exit>

0000009e <__bad_interrupt>:
  9e:	b0 cf       	rjmp	.-160    	; 0x0 <__vectors>

000000a0 <spi_tranceiver>:
	val[0] = 0x26;		WriteToNrf(W,RF_SETUP,val,1);	//Set transfer rate	
	for(int i = 0;i<5;i++) { val[i] = 0x12; } 
		WriteToNrf(W,RX_ADDR_P0,val,5);					//Set Data Pipe 1 Addr
		WriteToNrf(W,TX_ADDR,val,5);					//Clock the addr of the receiving node in TX_ADDR
	val[0] = 0x5;			WriteToNrf(W,RX_PW_P0,val,1);	//Set correct payload width[5 bytes]
}
  a0:	8e bd       	out	0x2e, r24	; 46
  a2:	0d b4       	in	r0, 0x2d	; 45
  a4:	07 fe       	sbrs	r0, 7
  a6:	fd cf       	rjmp	.-6      	; 0xa2 <spi_tranceiver+0x2>
  a8:	8e b5       	in	r24, 0x2e	; 46
  aa:	08 95       	ret

000000ac <GetReg>:
  ac:	95 e3       	ldi	r25, 0x35	; 53
  ae:	9a 95       	dec	r25
  b0:	f1 f7       	brne	.-4      	; 0xae <GetReg+0x2>
  b2:	00 00       	nop
  b4:	2a 98       	cbi	0x05, 2	; 5
  b6:	90 e4       	ldi	r25, 0x40	; 64
  b8:	9a 95       	dec	r25
  ba:	f1 f7       	brne	.-4      	; 0xb8 <GetReg+0xc>
  bc:	f1 df       	rcall	.-30     	; 0xa0 <spi_tranceiver>
  be:	80 e4       	ldi	r24, 0x40	; 64
  c0:	8a 95       	dec	r24
  c2:	f1 f7       	brne	.-4      	; 0xc0 <GetReg+0x14>
  c4:	8f ef       	ldi	r24, 0xFF	; 255
  c6:	ec df       	rcall	.-40     	; 0xa0 <spi_tranceiver>
  c8:	90 e4       	ldi	r25, 0x40	; 64
  ca:	9a 95       	dec	r25
  cc:	f1 f7       	brne	.-4      	; 0xca <GetReg+0x1e>
  ce:	2a 9a       	sbi	0x05, 2	; 5
  d0:	08 95       	ret

000000d2 <reset>:
  d2:	85 e3       	ldi	r24, 0x35	; 53
  d4:	8a 95       	dec	r24
  d6:	f1 f7       	brne	.-4      	; 0xd4 <reset+0x2>
  d8:	00 00       	nop
  da:	2a 98       	cbi	0x05, 2	; 5
  dc:	85 e3       	ldi	r24, 0x35	; 53
  de:	8a 95       	dec	r24
  e0:	f1 f7       	brne	.-4      	; 0xde <reset+0xc>
  e2:	00 00       	nop
  e4:	87 e2       	ldi	r24, 0x27	; 39
  e6:	dc df       	rcall	.-72     	; 0xa0 <spi_tranceiver>
  e8:	85 e3       	ldi	r24, 0x35	; 53
  ea:	8a 95       	dec	r24
  ec:	f1 f7       	brne	.-4      	; 0xea <reset+0x18>
  ee:	00 00       	nop
  f0:	80 e7       	ldi	r24, 0x70	; 112
  f2:	d6 df       	rcall	.-84     	; 0xa0 <spi_tranceiver>
  f4:	85 e3       	ldi	r24, 0x35	; 53
  f6:	8a 95       	dec	r24
  f8:	f1 f7       	brne	.-4      	; 0xf6 <reset+0x24>
  fa:	00 00       	nop
  fc:	2a 9a       	sbi	0x05, 2	; 5
  fe:	08 95       	ret

00000100 <WriteToNrf>:
 100:	bf 92       	push	r11
 102:	cf 92       	push	r12
 104:	df 92       	push	r13
 106:	ef 92       	push	r14
 108:	ff 92       	push	r15
 10a:	0f 93       	push	r16
 10c:	1f 93       	push	r17
 10e:	cf 93       	push	r28
 110:	df 93       	push	r29
 112:	d8 2e       	mov	r13, r24
 114:	c6 2e       	mov	r12, r22
 116:	b4 2e       	mov	r11, r20
 118:	f5 2e       	mov	r15, r21
 11a:	e2 2e       	mov	r14, r18
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	d8 12       	cpse	r13, r24
 120:	02 c0       	rjmp	.+4      	; 0x126 <WriteToNrf+0x26>
 122:	90 e2       	ldi	r25, 0x20	; 32
 124:	c9 0e       	add	r12, r25
 126:	e5 e3       	ldi	r30, 0x35	; 53
 128:	ea 95       	dec	r30
 12a:	f1 f7       	brne	.-4      	; 0x128 <WriteToNrf+0x28>
 12c:	00 00       	nop
 12e:	2a 98       	cbi	0x05, 2	; 5
 130:	f0 e4       	ldi	r31, 0x40	; 64
 132:	fa 95       	dec	r31
 134:	f1 f7       	brne	.-4      	; 0x132 <WriteToNrf+0x32>
 136:	8c 2d       	mov	r24, r12
 138:	b3 df       	rcall	.-154    	; 0xa0 <spi_tranceiver>
 13a:	85 e3       	ldi	r24, 0x35	; 53
 13c:	8a 95       	dec	r24
 13e:	f1 f7       	brne	.-4      	; 0x13c <WriteToNrf+0x3c>
 140:	00 00       	nop
 142:	ee 20       	and	r14, r14
 144:	21 f1       	breq	.+72     	; 0x18e <WriteToNrf+0x8e>
 146:	c4 e0       	ldi	r28, 0x04	; 4
 148:	d1 e0       	ldi	r29, 0x01	; 1
 14a:	0b 2d       	mov	r16, r11
 14c:	1f 2d       	mov	r17, r15
 14e:	2e 2d       	mov	r18, r14
 150:	30 e0       	ldi	r19, 0x00	; 0
 152:	f9 01       	movw	r30, r18
 154:	ec 5f       	subi	r30, 0xFC	; 252
 156:	fe 4f       	sbci	r31, 0xFE	; 254
 158:	7f 01       	movw	r14, r30
 15a:	d1 10       	cpse	r13, r1
 15c:	0b c0       	rjmp	.+22     	; 0x174 <WriteToNrf+0x74>
 15e:	f0 ea       	ldi	r31, 0xA0	; 160
 160:	cf 16       	cp	r12, r31
 162:	41 f0       	breq	.+16     	; 0x174 <WriteToNrf+0x74>
 164:	8f ef       	ldi	r24, 0xFF	; 255
 166:	9c df       	rcall	.-200    	; 0xa0 <spi_tranceiver>
 168:	88 83       	st	Y, r24
 16a:	85 e3       	ldi	r24, 0x35	; 53
 16c:	8a 95       	dec	r24
 16e:	f1 f7       	brne	.-4      	; 0x16c <WriteToNrf+0x6c>
 170:	00 00       	nop
 172:	07 c0       	rjmp	.+14     	; 0x182 <WriteToNrf+0x82>
 174:	f8 01       	movw	r30, r16
 176:	80 81       	ld	r24, Z
 178:	93 df       	rcall	.-218    	; 0xa0 <spi_tranceiver>
 17a:	f5 e3       	ldi	r31, 0x35	; 53
 17c:	fa 95       	dec	r31
 17e:	f1 f7       	brne	.-4      	; 0x17c <WriteToNrf+0x7c>
 180:	00 00       	nop
 182:	21 96       	adiw	r28, 0x01	; 1
 184:	0f 5f       	subi	r16, 0xFF	; 255
 186:	1f 4f       	sbci	r17, 0xFF	; 255
 188:	ce 15       	cp	r28, r14
 18a:	df 05       	cpc	r29, r15
 18c:	31 f7       	brne	.-52     	; 0x15a <WriteToNrf+0x5a>
 18e:	2a 9a       	sbi	0x05, 2	; 5
 190:	84 e0       	ldi	r24, 0x04	; 4
 192:	91 e0       	ldi	r25, 0x01	; 1
 194:	df 91       	pop	r29
 196:	cf 91       	pop	r28
 198:	1f 91       	pop	r17
 19a:	0f 91       	pop	r16
 19c:	ff 90       	pop	r15
 19e:	ef 90       	pop	r14
 1a0:	df 90       	pop	r13
 1a2:	cf 90       	pop	r12
 1a4:	bf 90       	pop	r11
 1a6:	08 95       	ret

000001a8 <send_data>:
 1a8:	cf 93       	push	r28
 1aa:	df 93       	push	r29
 1ac:	ec 01       	movw	r28, r24
 1ae:	20 e0       	ldi	r18, 0x00	; 0
 1b0:	ac 01       	movw	r20, r24
 1b2:	61 ee       	ldi	r22, 0xE1	; 225
 1b4:	80 e0       	ldi	r24, 0x00	; 0
 1b6:	a4 df       	rcall	.-184    	; 0x100 <WriteToNrf>
 1b8:	25 e0       	ldi	r18, 0x05	; 5
 1ba:	ae 01       	movw	r20, r28
 1bc:	60 ea       	ldi	r22, 0xA0	; 160
 1be:	80 e0       	ldi	r24, 0x00	; 0
 1c0:	9f df       	rcall	.-194    	; 0x100 <WriteToNrf>
 1c2:	2f ef       	ldi	r18, 0xFF	; 255
 1c4:	83 ef       	ldi	r24, 0xF3	; 243
 1c6:	91 e0       	ldi	r25, 0x01	; 1
 1c8:	21 50       	subi	r18, 0x01	; 1
 1ca:	80 40       	sbci	r24, 0x00	; 0
 1cc:	90 40       	sbci	r25, 0x00	; 0
 1ce:	e1 f7       	brne	.-8      	; 0x1c8 <send_data+0x20>
 1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <send_data+0x2a>
 1d2:	00 00       	nop
 1d4:	29 9a       	sbi	0x05, 1	; 5
 1d6:	2f ef       	ldi	r18, 0xFF	; 255
 1d8:	83 ef       	ldi	r24, 0xF3	; 243
 1da:	91 e0       	ldi	r25, 0x01	; 1
 1dc:	21 50       	subi	r18, 0x01	; 1
 1de:	80 40       	sbci	r24, 0x00	; 0
 1e0:	90 40       	sbci	r25, 0x00	; 0
 1e2:	e1 f7       	brne	.-8      	; 0x1dc <send_data+0x34>
 1e4:	00 c0       	rjmp	.+0      	; 0x1e6 <send_data+0x3e>
 1e6:	00 00       	nop
 1e8:	29 98       	cbi	0x05, 1	; 5
 1ea:	8f e3       	ldi	r24, 0x3F	; 63
 1ec:	9c e9       	ldi	r25, 0x9C	; 156
 1ee:	01 97       	sbiw	r24, 0x01	; 1
 1f0:	f1 f7       	brne	.-4      	; 0x1ee <send_data+0x46>
 1f2:	00 c0       	rjmp	.+0      	; 0x1f4 <send_data+0x4c>
 1f4:	00 00       	nop
 1f6:	df 91       	pop	r29
 1f8:	cf 91       	pop	r28
 1fa:	08 95       	ret

000001fc <init_nrf24l01_tx>:
Inputs:		none
Outputs:	none
Description:initializes the nrf module as transmitter
******************************************************************** */
void init_nrf24l01_tx(void)
{
 1fc:	cf 93       	push	r28
 1fe:	df 93       	push	r29
 200:	1f 92       	push	r1
 202:	cd b7       	in	r28, 0x3d	; 61
 204:	de b7       	in	r29, 0x3e	; 62
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 206:	8f e3       	ldi	r24, 0x3F	; 63
 208:	9c e9       	ldi	r25, 0x9C	; 156
 20a:	01 97       	sbiw	r24, 0x01	; 1
 20c:	f1 f7       	brne	.-4      	; 0x20a <init_nrf24l01_tx+0xe>
 20e:	00 c0       	rjmp	.+0      	; 0x210 <init_nrf24l01_tx+0x14>
 210:	00 00       	nop
	_delay_ms(10);
	uint8_t val[1];
	val[0] = 0x1E;		WriteToNrf(W,CONFIG,val,1);		//Power up Radio as transmitter
 212:	8e e1       	ldi	r24, 0x1E	; 30
 214:	89 83       	std	Y+1, r24	; 0x01
 216:	21 e0       	ldi	r18, 0x01	; 1
 218:	ae 01       	movw	r20, r28
 21a:	4f 5f       	subi	r20, 0xFF	; 255
 21c:	5f 4f       	sbci	r21, 0xFF	; 255
 21e:	60 e0       	ldi	r22, 0x00	; 0
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	6e df       	rcall	.-292    	; 0x100 <WriteToNrf>
 224:	8f e3       	ldi	r24, 0x3F	; 63
 226:	9c e9       	ldi	r25, 0x9C	; 156
 228:	01 97       	sbiw	r24, 0x01	; 1
 22a:	f1 f7       	brne	.-4      	; 0x228 <init_nrf24l01_tx+0x2c>
 22c:	00 c0       	rjmp	.+0      	; 0x22e <init_nrf24l01_tx+0x32>
 22e:	00 00       	nop
	_delay_ms(10);
}
 230:	0f 90       	pop	r0
 232:	df 91       	pop	r29
 234:	cf 91       	pop	r28
 236:	08 95       	ret

00000238 <turnOff_nrf24l01>:
Inputs:		none
Outputs:	none
Description:Turns off the Radio module
******************************************************************** */
void turnOff_nrf24l01(void)
{
 238:	cf 93       	push	r28
 23a:	df 93       	push	r29
 23c:	1f 92       	push	r1
 23e:	cd b7       	in	r28, 0x3d	; 61
 240:	de b7       	in	r29, 0x3e	; 62
 242:	8f e3       	ldi	r24, 0x3F	; 63
 244:	9c e9       	ldi	r25, 0x9C	; 156
 246:	01 97       	sbiw	r24, 0x01	; 1
 248:	f1 f7       	brne	.-4      	; 0x246 <turnOff_nrf24l01+0xe>
 24a:	00 c0       	rjmp	.+0      	; 0x24c <turnOff_nrf24l01+0x14>
 24c:	00 00       	nop
	_delay_ms(10);
	uint8_t val[1];
	val[0] = 0x00;		WriteToNrf(W,CONFIG,val,1);		//Power down Radio
 24e:	19 82       	std	Y+1, r1	; 0x01
 250:	21 e0       	ldi	r18, 0x01	; 1
 252:	ae 01       	movw	r20, r28
 254:	4f 5f       	subi	r20, 0xFF	; 255
 256:	5f 4f       	sbci	r21, 0xFF	; 255
 258:	60 e0       	ldi	r22, 0x00	; 0
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	51 df       	rcall	.-350    	; 0x100 <WriteToNrf>
 25e:	8f e3       	ldi	r24, 0x3F	; 63
 260:	9c e9       	ldi	r25, 0x9C	; 156
 262:	01 97       	sbiw	r24, 0x01	; 1
 264:	f1 f7       	brne	.-4      	; 0x262 <turnOff_nrf24l01+0x2a>
 266:	00 c0       	rjmp	.+0      	; 0x268 <turnOff_nrf24l01+0x30>
 268:	00 00       	nop
	_delay_ms(10);
 26a:	0f 90       	pop	r0
 26c:	df 91       	pop	r29
 26e:	cf 91       	pop	r28
 270:	08 95       	ret

00000272 <PwrMngmnt_init>:
Description:initialization of power management / watchdog
******************************************************************** */
void PwrMngmnt_init(void)
{
	/* Disable global interrupts */
	cli(); 
 272:	f8 94       	cli
	
	/* Clear the reset flag. */
	MCUSR &= ~(1<<WDRF); // WDRF is set if a WDG system reset occurs
 274:	84 b7       	in	r24, 0x34	; 52
 276:	87 7f       	andi	r24, 0xF7	; 247
 278:	84 bf       	out	0x34, r24	; 52
  
	/* In order to change WDE or the prescaler, we need to
	* set WDCE (This will allow updates for 4 clock cycles).
	*/
	WDTCSR |= (1<<WDCE) | (1<<WDE);
 27a:	e0 e6       	ldi	r30, 0x60	; 96
 27c:	f0 e0       	ldi	r31, 0x00	; 0
 27e:	80 81       	ld	r24, Z
 280:	88 61       	ori	r24, 0x18	; 24
 282:	80 83       	st	Z, r24

	/* set new watchdog timeout prescaler value */
	//WDTCSR = 1<<WDP3; /* 4.0 seconds */
	WDTCSR = 1<<WDP0 | 1<<WDP3; /* 8.0 seconds */
 284:	81 e2       	ldi	r24, 0x21	; 33
 286:	80 83       	st	Z, r24
	
	/* Enable global interrupts */
	sei();
 288:	78 94       	sei
	
	/* Enable watchdog interrupt */
	WDTCSR |= (1 << WDIE);
 28a:	80 81       	ld	r24, Z
 28c:	80 64       	ori	r24, 0x40	; 64
 28e:	80 83       	st	Z, r24
 290:	08 95       	ret

00000292 <enterSleep>:
Description:configures the sleep mode
******************************************************************** */
void enterSleep(void)
{
	/* Set sleep mode */
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
 292:	83 b7       	in	r24, 0x33	; 51
 294:	81 7f       	andi	r24, 0xF1	; 241
 296:	84 60       	ori	r24, 0x04	; 4
 298:	83 bf       	out	0x33, r24	; 51

	/* Enable sleep */
	sleep_enable();
 29a:	83 b7       	in	r24, 0x33	; 51
 29c:	81 60       	ori	r24, 0x01	; 1
 29e:	83 bf       	out	0x33, r24	; 51
  
	/* Now enter sleep mode. */
	sleep_mode();
 2a0:	83 b7       	in	r24, 0x33	; 51
 2a2:	81 60       	ori	r24, 0x01	; 1
 2a4:	83 bf       	out	0x33, r24	; 51
 2a6:	88 95       	sleep
 2a8:	83 b7       	in	r24, 0x33	; 51
 2aa:	8e 7f       	andi	r24, 0xFE	; 254
 2ac:	83 bf       	out	0x33, r24	; 51

	/* The program will continue from here after the WDT timeout*/
	sleep_disable(); /* First thing to do is disable sleep. */
 2ae:	83 b7       	in	r24, 0x33	; 51
 2b0:	8e 7f       	andi	r24, 0xFE	; 254
 2b2:	83 bf       	out	0x33, r24	; 51
static __inline void
__attribute__ ((__always_inline__))
__power_all_enable()
{
#ifdef __AVR_HAVE_PRR
    PRR &= (uint8_t)~(__AVR_HAVE_PRR);
 2b4:	e4 e6       	ldi	r30, 0x64	; 100
 2b6:	f0 e0       	ldi	r31, 0x00	; 0
 2b8:	80 81       	ld	r24, Z
 2ba:	80 71       	andi	r24, 0x10	; 16
 2bc:	80 83       	st	Z, r24
 2be:	08 95       	ret

000002c0 <PwrMngmnt_main>:
Description:main function of power management
******************************************************************** */
void PwrMngmnt_main(void)
{
	/* Initialize watchdog */
	PwrMngmnt_init();
 2c0:	d8 df       	rcall	.-80     	; 0x272 <PwrMngmnt_init>

	/* Re-enter sleep mode. */
	enterSleep();
 2c2:	e7 cf       	rjmp	.-50     	; 0x292 <enterSleep>
 2c4:	08 95       	ret

000002c6 <triggerUltrasonic>:
 2c6:	5b 9a       	sbi	0x0b, 3	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2c8:	20 e5       	ldi	r18, 0x50	; 80
 2ca:	2a 95       	dec	r18
 2cc:	f1 f7       	brne	.-4      	; 0x2ca <triggerUltrasonic+0x4>
		/* trigger ultrasonic */
		U_Port_trig |= (1<<U_TRIG_pin);
		_delay_us(15);

		/* stop trigger ultrasonic */
		U_Port_trig &= ~(1<<U_TRIG_pin);
 2ce:	5b 98       	cbi	0x0b, 3	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2d0:	8f ef       	ldi	r24, 0xFF	; 255
 2d2:	99 ef       	ldi	r25, 0xF9	; 249
 2d4:	20 e0       	ldi	r18, 0x00	; 0
 2d6:	81 50       	subi	r24, 0x01	; 1
 2d8:	90 40       	sbci	r25, 0x00	; 0
 2da:	20 40       	sbci	r18, 0x00	; 0
 2dc:	e1 f7       	brne	.-8      	; 0x2d6 <triggerUltrasonic+0x10>
 2de:	00 c0       	rjmp	.+0      	; 0x2e0 <triggerUltrasonic+0x1a>
 2e0:	00 00       	nop
 2e2:	08 95       	ret

000002e4 <getDistance_main>:
Inputs:		none
Outputs:	distance measurements
Description:triggers measurements and plausibility checks
******************************************************************** */
 uint8_t getDistance_main(void)
 {
 2e4:	cf 92       	push	r12
 2e6:	df 92       	push	r13
 2e8:	ef 92       	push	r14
 2ea:	ff 92       	push	r15
	float dist = 0;
	float distance_array[2];
	float sum = 0;
	
	/* Power on the sensor */
	ULTR_PWR_ON; _delay_ms(500);
 2ec:	5f 9a       	sbi	0x0b, 7	; 11
 2ee:	2f ef       	ldi	r18, 0xFF	; 255
 2f0:	39 e6       	ldi	r19, 0x69	; 105
 2f2:	48 e1       	ldi	r20, 0x18	; 24
 2f4:	21 50       	subi	r18, 0x01	; 1
 2f6:	30 40       	sbci	r19, 0x00	; 0
 2f8:	40 40       	sbci	r20, 0x00	; 0
 2fa:	e1 f7       	brne	.-8      	; 0x2f4 <getDistance_main+0x10>
 2fc:	00 c0       	rjmp	.+0      	; 0x2fe <getDistance_main+0x1a>
 2fe:	00 00       	nop
					
	/* Execute two measurements and calculate mean value for redundancy */
	for (uint8_t j = 0; j < 2; j++)
	{
		triggerUltrasonic();
 300:	e2 df       	rcall	.-60     	; 0x2c6 <triggerUltrasonic>
		distance_array[j] = getDistance();
		sum +=distance_array[j];
 302:	60 91 2a 01 	lds	r22, 0x012A	; 0x80012a <pulse>
 306:	70 91 2b 01 	lds	r23, 0x012B	; 0x80012b <pulse+0x1>
 30a:	80 e0       	ldi	r24, 0x00	; 0
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	e9 d1       	rcall	.+978    	; 0x6e2 <__floatunsisf>
 310:	2a e6       	ldi	r18, 0x6A	; 106
 312:	3c e3       	ldi	r19, 0x3C	; 60
 314:	49 ee       	ldi	r20, 0xE9	; 233
 316:	52 e4       	ldi	r21, 0x42	; 66
 318:	50 d1       	rcall	.+672    	; 0x5ba <__divsf3>
 31a:	20 e0       	ldi	r18, 0x00	; 0
 31c:	30 e0       	ldi	r19, 0x00	; 0
 31e:	a9 01       	movw	r20, r18
 320:	e8 d0       	rcall	.+464    	; 0x4f2 <__addsf3>
 322:	6b 01       	movw	r12, r22
 324:	7c 01       	movw	r14, r24
 326:	8f ef       	ldi	r24, 0xFF	; 255
 328:	90 e7       	ldi	r25, 0x70	; 112
 32a:	22 e0       	ldi	r18, 0x02	; 2
 32c:	81 50       	subi	r24, 0x01	; 1
 32e:	90 40       	sbci	r25, 0x00	; 0
 330:	20 40       	sbci	r18, 0x00	; 0
 332:	e1 f7       	brne	.-8      	; 0x32c <getDistance_main+0x48>
 334:	00 c0       	rjmp	.+0      	; 0x336 <getDistance_main+0x52>
	ULTR_PWR_ON; _delay_ms(500);
					
	/* Execute two measurements and calculate mean value for redundancy */
	for (uint8_t j = 0; j < 2; j++)
	{
		triggerUltrasonic();
 336:	00 00       	nop
 338:	c6 df       	rcall	.-116    	; 0x2c6 <triggerUltrasonic>
		distance_array[j] = getDistance();
		sum +=distance_array[j];
 33a:	60 91 2a 01 	lds	r22, 0x012A	; 0x80012a <pulse>
 33e:	70 91 2b 01 	lds	r23, 0x012B	; 0x80012b <pulse+0x1>
 342:	80 e0       	ldi	r24, 0x00	; 0
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	cd d1       	rcall	.+922    	; 0x6e2 <__floatunsisf>
 348:	2a e6       	ldi	r18, 0x6A	; 106
 34a:	3c e3       	ldi	r19, 0x3C	; 60
 34c:	49 ee       	ldi	r20, 0xE9	; 233
 34e:	52 e4       	ldi	r21, 0x42	; 66
 350:	34 d1       	rcall	.+616    	; 0x5ba <__divsf3>
 352:	a7 01       	movw	r20, r14
 354:	96 01       	movw	r18, r12
 356:	cd d0       	rcall	.+410    	; 0x4f2 <__addsf3>
 358:	3f ef       	ldi	r19, 0xFF	; 255
 35a:	40 e7       	ldi	r20, 0x70	; 112
 35c:	22 e0       	ldi	r18, 0x02	; 2
 35e:	31 50       	subi	r19, 0x01	; 1
 360:	40 40       	sbci	r20, 0x00	; 0
 362:	20 40       	sbci	r18, 0x00	; 0
 364:	e1 f7       	brne	.-8      	; 0x35e <getDistance_main+0x7a>
		_delay_ms(50);
	}
	/* Power off the sensor */
	ULTR_PWR_OFF;
 366:	00 c0       	rjmp	.+0      	; 0x368 <getDistance_main+0x84>
	
	dist = sum/2;
	distance = dist;
	return distance;
 368:	00 00       	nop
 36a:	5f 98       	cbi	0x0b, 7	; 11
 36c:	20 e0       	ldi	r18, 0x00	; 0
 36e:	30 e0       	ldi	r19, 0x00	; 0
 370:	40 e0       	ldi	r20, 0x00	; 0
 372:	5f e3       	ldi	r21, 0x3F	; 63
 374:	44 d2       	rcall	.+1160   	; 0x7fe <__mulsf3>
 376:	89 d1       	rcall	.+786    	; 0x68a <__fixunssfsi>
 378:	86 2f       	mov	r24, r22
 }
 37a:	ff 90       	pop	r15
 37c:	ef 90       	pop	r14
 37e:	df 90       	pop	r13
 380:	cf 90       	pop	r12
 382:	08 95       	ret

00000384 <SlaveCoreFunctionality>:
	uint8_t RC_resp = 0x47; // Always positive response
	uint8_t WaterLevel = 0;
	uint8_t soc_bat = 0;

	/* Start measurements */
	WaterLevel = getDistance_main();
 384:	af df       	rcall	.-162    	; 0x2e4 <getDistance_main>
	
	/* Battery State of Charge */
	//uint8_t soc_bat = getBatterySOC();

	/* Assign the values to the output variable */
	slave_resp[0] = RC_resp;
 386:	e4 e2       	ldi	r30, 0x24	; 36
 388:	f1 e0       	ldi	r31, 0x01	; 1
 38a:	97 e4       	ldi	r25, 0x47	; 71
 38c:	90 83       	st	Z, r25
	slave_resp[1] = WaterLevel;
 38e:	81 83       	std	Z+1, r24	; 0x01
	slave_resp[2] = soc_bat;
 390:	12 82       	std	Z+2, r1	; 0x02

	return slave_resp;
}
 392:	cf 01       	movw	r24, r30
 394:	08 95       	ret

00000396 <main>:
void initSlave(void);
uint8_t *SlaveCoreFunctionality(void);

/*----------------- Main function -------------------*/
int main(void)
{
 396:	0f 93       	push	r16
 398:	1f 93       	push	r17
 39a:	cf 93       	push	r28
 39c:	df 93       	push	r29
 39e:	00 d0       	rcall	.+0      	; 0x3a0 <main+0xa>
 3a0:	00 d0       	rcall	.+0      	; 0x3a2 <main+0xc>
 3a2:	1f 92       	push	r1
 3a4:	cd b7       	in	r28, 0x3d	; 61
 3a6:	de b7       	in	r29, 0x3e	; 62
	uint8_t *slave_resp;
/*---------- Initialization -----------*/
	//initSlave();
	
/*-------------- Cycle loop -----------*/
	while(f_wdt == 1)
 3a8:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <f_wdt>
 3ac:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <f_wdt+0x1>
 3b0:	01 97       	sbiw	r24, 0x01	; 1
 3b2:	09 f0       	breq	.+2      	; 0x3b6 <main+0x20>
 3b4:	44 c0       	rjmp	.+136    	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 3b6:	00 e0       	ldi	r16, 0x00	; 0
 3b8:	10 e0       	ldi	r17, 0x00	; 0
	{
		pwrMngmntCycle += 1;
 3ba:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 3be:	8f 5f       	subi	r24, 0xFF	; 255
		if (pwrMngmntCycle >= PWR_MNGMNT_CYCLE)
 3c0:	8f 31       	cpi	r24, 0x1F	; 31
 3c2:	18 f4       	brcc	.+6      	; 0x3ca <main+0x34>
	//initSlave();
	
/*-------------- Cycle loop -----------*/
	while(f_wdt == 1)
	{
		pwrMngmntCycle += 1;
 3c4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 3c8:	32 c0       	rjmp	.+100    	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
		if (pwrMngmntCycle >= PWR_MNGMNT_CYCLE)
		{		
			pwrMngmntCycle = 0;
 3ca:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
			/* Slave core functionality */
			uint8_t *slave_resp;
			slave_resp = SlaveCoreFunctionality();
 3ce:	da df       	rcall	.-76     	; 0x384 <SlaveCoreFunctionality>
 3d0:	fc 01       	movw	r30, r24
			uint8_t w_buf[5] = { slave_resp[0], slave_resp[1], slave_resp[2], 0, 0 };
 3d2:	80 81       	ld	r24, Z
 3d4:	89 83       	std	Y+1, r24	; 0x01
 3d6:	81 81       	ldd	r24, Z+1	; 0x01
 3d8:	8a 83       	std	Y+2, r24	; 0x02
 3da:	82 81       	ldd	r24, Z+2	; 0x02
 3dc:	8b 83       	std	Y+3, r24	; 0x03
 3de:	1c 82       	std	Y+4, r1	; 0x04

			/* Prepare to transmit to the master */
			init_nrf24l01_tx();
 3e0:	1d 82       	std	Y+5, r1	; 0x05
			do
			{
				tx_iter += 1;
 3e2:	0c df       	rcall	.-488    	; 0x1fc <init_nrf24l01_tx>
				reset();
 3e4:	1f 5f       	subi	r17, 0xFF	; 255
				send_data(w_buf);	_delay_ms(58);	// delay adjusted so that 150 ms/cycle through measurements
 3e6:	75 de       	rcall	.-790    	; 0xd2 <reset>
 3e8:	ce 01       	movw	r24, r28
 3ea:	01 96       	adiw	r24, 0x01	; 1
 3ec:	dd de       	rcall	.-582    	; 0x1a8 <send_data>
 3ee:	2f ef       	ldi	r18, 0xFF	; 255
 3f0:	84 ed       	ldi	r24, 0xD4	; 212
 3f2:	92 e0       	ldi	r25, 0x02	; 2
 3f4:	21 50       	subi	r18, 0x01	; 1
 3f6:	80 40       	sbci	r24, 0x00	; 0
 3f8:	90 40       	sbci	r25, 0x00	; 0
 3fa:	e1 f7       	brne	.-8      	; 0x3f4 <main+0x5e>
 3fc:	00 c0       	rjmp	.+0      	; 0x3fe <main+0x68>
 3fe:	00 00       	nop
				if (tx_iter > TX_MAX_ITER)	// 1.5 sec pro sending cycle (10 sending attempts)
 400:	1b 30       	cpi	r17, 0x0B	; 11
 402:	68 f0       	brcs	.+26     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 404:	2f ef       	ldi	r18, 0xFF	; 255
 406:	8d e3       	ldi	r24, 0x3D	; 61
 408:	99 e4       	ldi	r25, 0x49	; 73
 40a:	21 50       	subi	r18, 0x01	; 1
 40c:	80 40       	sbci	r24, 0x00	; 0
 40e:	90 40       	sbci	r25, 0x00	; 0
 410:	e1 f7       	brne	.-8      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 412:	00 c0       	rjmp	.+0      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 414:	00 00       	nop
				{
					_delay_ms(1500); // 1 cycle = 1.5 sec sending + 1.5 sec waiting = 3 sec	
					tx_iter = 0;
					tx_iter_max += 1;
 416:	0f 5f       	subi	r16, 0xFF	; 255
					if (tx_iter_max >= TRANSMIT_MAX_ITER_TOT) // 3 cycles = 9 sec in total sending
 418:	03 30       	cpi	r16, 0x03	; 3
				reset();
				send_data(w_buf);	_delay_ms(58);	// delay adjusted so that 150 ms/cycle through measurements
				if (tx_iter > TX_MAX_ITER)	// 1.5 sec pro sending cycle (10 sending attempts)
				{
					_delay_ms(1500); // 1 cycle = 1.5 sec sending + 1.5 sec waiting = 3 sec	
					tx_iter = 0;
 41a:	30 f4       	brcc	.+12     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
					{
						tx_iter_max = 0;	// No receiver, therefore exit the loop and go back to sleep mode
						break;
					}
				}
			} while ((GetReg(STATUS) & (1<<TX_DS)) <= 0);	// Transmission successful
 41c:	10 e0       	ldi	r17, 0x00	; 0
 41e:	87 e0       	ldi	r24, 0x07	; 7
 420:	45 de       	rcall	.-886    	; 0xac <GetReg>
 422:	85 ff       	sbrs	r24, 5
					_delay_ms(1500); // 1 cycle = 1.5 sec sending + 1.5 sec waiting = 3 sec	
					tx_iter = 0;
					tx_iter_max += 1;
					if (tx_iter_max >= TRANSMIT_MAX_ITER_TOT) // 3 cycles = 9 sec in total sending
					{
						tx_iter_max = 0;	// No receiver, therefore exit the loop and go back to sleep mode
 424:	df cf       	rjmp	.-66     	; 0x3e4 <main+0x4e>
				reset();
				send_data(w_buf);	_delay_ms(58);	// delay adjusted so that 150 ms/cycle through measurements
				if (tx_iter > TX_MAX_ITER)	// 1.5 sec pro sending cycle (10 sending attempts)
				{
					_delay_ms(1500); // 1 cycle = 1.5 sec sending + 1.5 sec waiting = 3 sec	
					tx_iter = 0;
 426:	02 c0       	rjmp	.+4      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
						tx_iter_max = 0;	// No receiver, therefore exit the loop and go back to sleep mode
						break;
					}
				}
			} while ((GetReg(STATUS) & (1<<TX_DS)) <= 0);	// Transmission successful
			turnOff_nrf24l01(); 	// Turn off radio
 428:	00 e0       	ldi	r16, 0x00	; 0
 42a:	10 e0       	ldi	r17, 0x00	; 0

		}
	/* Power management */
	PwrMngmnt_main();
 42c:	05 df       	rcall	.-502    	; 0x238 <turnOff_nrf24l01>
 42e:	48 df       	rcall	.-368    	; 0x2c0 <PwrMngmnt_main>
	uint8_t *slave_resp;
/*---------- Initialization -----------*/
	//initSlave();
	
/*-------------- Cycle loop -----------*/
	while(f_wdt == 1)
 430:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <f_wdt>
 434:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <f_wdt+0x1>
 438:	01 97       	sbiw	r24, 0x01	; 1
 43a:	09 f4       	brne	.+2      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 43c:	be cf       	rjmp	.-132    	; 0x3ba <main+0x24>
	PwrMngmnt_main();
	}

	return 0;

}
 43e:	80 e0       	ldi	r24, 0x00	; 0
 440:	90 e0       	ldi	r25, 0x00	; 0
 442:	0f 90       	pop	r0
 444:	0f 90       	pop	r0
 446:	0f 90       	pop	r0
 448:	0f 90       	pop	r0
 44a:	0f 90       	pop	r0
 44c:	df 91       	pop	r29
 44e:	cf 91       	pop	r28
 450:	1f 91       	pop	r17
 452:	0f 91       	pop	r16
 454:	08 95       	ret

00000456 <__vector_1>:
Inputs:		none
Outputs:	internal timer
Description:calculates elapsed time of a measurement
******************************************************************** */
ISR(INT0_vect)
{
 456:	1f 92       	push	r1
 458:	0f 92       	push	r0
 45a:	0f b6       	in	r0, 0x3f	; 63
 45c:	0f 92       	push	r0
 45e:	11 24       	eor	r1, r1
 460:	8f 93       	push	r24
 462:	9f 93       	push	r25
 464:	ef 93       	push	r30
 466:	ff 93       	push	r31
	switch (iIRC)
 468:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <iIRC>
 46c:	88 23       	and	r24, r24
 46e:	19 f0       	breq	.+6      	; 0x476 <__vector_1+0x20>
 470:	81 30       	cpi	r24, 0x01	; 1
 472:	51 f0       	breq	.+20     	; 0x488 <__vector_1+0x32>
 474:	1a c0       	rjmp	.+52     	; 0x4aa <__vector_1+0x54>
	{
		case 0: //when logic changes from LOW to HIGH
		{
			iIRC = 1;
 476:	81 e0       	ldi	r24, 0x01	; 1
 478:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <iIRC>
			TCCR1B |= (1<<CS11);
 47c:	e1 e8       	ldi	r30, 0x81	; 129
 47e:	f0 e0       	ldi	r31, 0x00	; 0
 480:	80 81       	ld	r24, Z
 482:	82 60       	ori	r24, 0x02	; 2
 484:	80 83       	st	Z, r24
			break;
 486:	11 c0       	rjmp	.+34     	; 0x4aa <__vector_1+0x54>
		}
		case 1:
		{
			/* reset iIRC */
			iIRC = 0;
 488:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <iIRC>
			/* stop counter */
			TCCR1B &= ~(1<<CS11);
 48c:	e1 e8       	ldi	r30, 0x81	; 129
 48e:	f0 e0       	ldi	r31, 0x00	; 0
 490:	80 81       	ld	r24, Z
 492:	8d 7f       	andi	r24, 0xFD	; 253
 494:	80 83       	st	Z, r24
			/* assign counter value to pulse */
			pulse = TCNT1;
 496:	e4 e8       	ldi	r30, 0x84	; 132
 498:	f0 e0       	ldi	r31, 0x00	; 0
 49a:	80 81       	ld	r24, Z
 49c:	91 81       	ldd	r25, Z+1	; 0x01
 49e:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <pulse+0x1>
 4a2:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <pulse>
			/* reset counter */
			TCNT1=0;
 4a6:	11 82       	std	Z+1, r1	; 0x01
 4a8:	10 82       	st	Z, r1
			break;
		}
	}
}
 4aa:	ff 91       	pop	r31
 4ac:	ef 91       	pop	r30
 4ae:	9f 91       	pop	r25
 4b0:	8f 91       	pop	r24
 4b2:	0f 90       	pop	r0
 4b4:	0f be       	out	0x3f, r0	; 63
 4b6:	0f 90       	pop	r0
 4b8:	1f 90       	pop	r1
 4ba:	18 95       	reti

000004bc <__vector_6>:
Inputs:		none
Outputs:	f_wdt
Description:wakes up processor after internal timer limit reached (8 sec)
******************************************************************** */
ISR(WDT_vect)
{
 4bc:	1f 92       	push	r1
 4be:	0f 92       	push	r0
 4c0:	0f b6       	in	r0, 0x3f	; 63
 4c2:	0f 92       	push	r0
 4c4:	11 24       	eor	r1, r1
 4c6:	8f 93       	push	r24
 4c8:	9f 93       	push	r25
	/* set the flag. */
	if(f_wdt == 0)
 4ca:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <f_wdt>
 4ce:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <f_wdt+0x1>
 4d2:	89 2b       	or	r24, r25
 4d4:	31 f4       	brne	.+12     	; 0x4e2 <__vector_6+0x26>
	{
		f_wdt = 1;
 4d6:	81 e0       	ldi	r24, 0x01	; 1
 4d8:	90 e0       	ldi	r25, 0x00	; 0
 4da:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <f_wdt+0x1>
 4de:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <f_wdt>
	}
	//else there is an error -> flag was not cleared
}
 4e2:	9f 91       	pop	r25
 4e4:	8f 91       	pop	r24
 4e6:	0f 90       	pop	r0
 4e8:	0f be       	out	0x3f, r0	; 63
 4ea:	0f 90       	pop	r0
 4ec:	1f 90       	pop	r1
 4ee:	18 95       	reti

000004f0 <__subsf3>:
 4f0:	50 58       	subi	r21, 0x80	; 128

000004f2 <__addsf3>:
 4f2:	bb 27       	eor	r27, r27
 4f4:	aa 27       	eor	r26, r26
 4f6:	0e d0       	rcall	.+28     	; 0x514 <__addsf3x>
 4f8:	48 c1       	rjmp	.+656    	; 0x78a <__fp_round>
 4fa:	39 d1       	rcall	.+626    	; 0x76e <__fp_pscA>
 4fc:	30 f0       	brcs	.+12     	; 0x50a <__addsf3+0x18>
 4fe:	3e d1       	rcall	.+636    	; 0x77c <__fp_pscB>
 500:	20 f0       	brcs	.+8      	; 0x50a <__addsf3+0x18>
 502:	31 f4       	brne	.+12     	; 0x510 <__addsf3+0x1e>
 504:	9f 3f       	cpi	r25, 0xFF	; 255
 506:	11 f4       	brne	.+4      	; 0x50c <__addsf3+0x1a>
 508:	1e f4       	brtc	.+6      	; 0x510 <__addsf3+0x1e>
 50a:	2e c1       	rjmp	.+604    	; 0x768 <__fp_nan>
 50c:	0e f4       	brtc	.+2      	; 0x510 <__addsf3+0x1e>
 50e:	e0 95       	com	r30
 510:	e7 fb       	bst	r30, 7
 512:	24 c1       	rjmp	.+584    	; 0x75c <__fp_inf>

00000514 <__addsf3x>:
 514:	e9 2f       	mov	r30, r25
 516:	4a d1       	rcall	.+660    	; 0x7ac <__fp_split3>
 518:	80 f3       	brcs	.-32     	; 0x4fa <__addsf3+0x8>
 51a:	ba 17       	cp	r27, r26
 51c:	62 07       	cpc	r22, r18
 51e:	73 07       	cpc	r23, r19
 520:	84 07       	cpc	r24, r20
 522:	95 07       	cpc	r25, r21
 524:	18 f0       	brcs	.+6      	; 0x52c <__addsf3x+0x18>
 526:	71 f4       	brne	.+28     	; 0x544 <__addsf3x+0x30>
 528:	9e f5       	brtc	.+102    	; 0x590 <__addsf3x+0x7c>
 52a:	62 c1       	rjmp	.+708    	; 0x7f0 <__fp_zero>
 52c:	0e f4       	brtc	.+2      	; 0x530 <__addsf3x+0x1c>
 52e:	e0 95       	com	r30
 530:	0b 2e       	mov	r0, r27
 532:	ba 2f       	mov	r27, r26
 534:	a0 2d       	mov	r26, r0
 536:	0b 01       	movw	r0, r22
 538:	b9 01       	movw	r22, r18
 53a:	90 01       	movw	r18, r0
 53c:	0c 01       	movw	r0, r24
 53e:	ca 01       	movw	r24, r20
 540:	a0 01       	movw	r20, r0
 542:	11 24       	eor	r1, r1
 544:	ff 27       	eor	r31, r31
 546:	59 1b       	sub	r21, r25
 548:	99 f0       	breq	.+38     	; 0x570 <__addsf3x+0x5c>
 54a:	59 3f       	cpi	r21, 0xF9	; 249
 54c:	50 f4       	brcc	.+20     	; 0x562 <__addsf3x+0x4e>
 54e:	50 3e       	cpi	r21, 0xE0	; 224
 550:	68 f1       	brcs	.+90     	; 0x5ac <__addsf3x+0x98>
 552:	1a 16       	cp	r1, r26
 554:	f0 40       	sbci	r31, 0x00	; 0
 556:	a2 2f       	mov	r26, r18
 558:	23 2f       	mov	r18, r19
 55a:	34 2f       	mov	r19, r20
 55c:	44 27       	eor	r20, r20
 55e:	58 5f       	subi	r21, 0xF8	; 248
 560:	f3 cf       	rjmp	.-26     	; 0x548 <__addsf3x+0x34>
 562:	46 95       	lsr	r20
 564:	37 95       	ror	r19
 566:	27 95       	ror	r18
 568:	a7 95       	ror	r26
 56a:	f0 40       	sbci	r31, 0x00	; 0
 56c:	53 95       	inc	r21
 56e:	c9 f7       	brne	.-14     	; 0x562 <__addsf3x+0x4e>
 570:	7e f4       	brtc	.+30     	; 0x590 <__addsf3x+0x7c>
 572:	1f 16       	cp	r1, r31
 574:	ba 0b       	sbc	r27, r26
 576:	62 0b       	sbc	r22, r18
 578:	73 0b       	sbc	r23, r19
 57a:	84 0b       	sbc	r24, r20
 57c:	ba f0       	brmi	.+46     	; 0x5ac <__addsf3x+0x98>
 57e:	91 50       	subi	r25, 0x01	; 1
 580:	a1 f0       	breq	.+40     	; 0x5aa <__addsf3x+0x96>
 582:	ff 0f       	add	r31, r31
 584:	bb 1f       	adc	r27, r27
 586:	66 1f       	adc	r22, r22
 588:	77 1f       	adc	r23, r23
 58a:	88 1f       	adc	r24, r24
 58c:	c2 f7       	brpl	.-16     	; 0x57e <__addsf3x+0x6a>
 58e:	0e c0       	rjmp	.+28     	; 0x5ac <__addsf3x+0x98>
 590:	ba 0f       	add	r27, r26
 592:	62 1f       	adc	r22, r18
 594:	73 1f       	adc	r23, r19
 596:	84 1f       	adc	r24, r20
 598:	48 f4       	brcc	.+18     	; 0x5ac <__addsf3x+0x98>
 59a:	87 95       	ror	r24
 59c:	77 95       	ror	r23
 59e:	67 95       	ror	r22
 5a0:	b7 95       	ror	r27
 5a2:	f7 95       	ror	r31
 5a4:	9e 3f       	cpi	r25, 0xFE	; 254
 5a6:	08 f0       	brcs	.+2      	; 0x5aa <__addsf3x+0x96>
 5a8:	b3 cf       	rjmp	.-154    	; 0x510 <__addsf3+0x1e>
 5aa:	93 95       	inc	r25
 5ac:	88 0f       	add	r24, r24
 5ae:	08 f0       	brcs	.+2      	; 0x5b2 <__addsf3x+0x9e>
 5b0:	99 27       	eor	r25, r25
 5b2:	ee 0f       	add	r30, r30
 5b4:	97 95       	ror	r25
 5b6:	87 95       	ror	r24
 5b8:	08 95       	ret

000005ba <__divsf3>:
 5ba:	0c d0       	rcall	.+24     	; 0x5d4 <__divsf3x>
 5bc:	e6 c0       	rjmp	.+460    	; 0x78a <__fp_round>
 5be:	de d0       	rcall	.+444    	; 0x77c <__fp_pscB>
 5c0:	40 f0       	brcs	.+16     	; 0x5d2 <__divsf3+0x18>
 5c2:	d5 d0       	rcall	.+426    	; 0x76e <__fp_pscA>
 5c4:	30 f0       	brcs	.+12     	; 0x5d2 <__divsf3+0x18>
 5c6:	21 f4       	brne	.+8      	; 0x5d0 <__divsf3+0x16>
 5c8:	5f 3f       	cpi	r21, 0xFF	; 255
 5ca:	19 f0       	breq	.+6      	; 0x5d2 <__divsf3+0x18>
 5cc:	c7 c0       	rjmp	.+398    	; 0x75c <__fp_inf>
 5ce:	51 11       	cpse	r21, r1
 5d0:	10 c1       	rjmp	.+544    	; 0x7f2 <__fp_szero>
 5d2:	ca c0       	rjmp	.+404    	; 0x768 <__fp_nan>

000005d4 <__divsf3x>:
 5d4:	eb d0       	rcall	.+470    	; 0x7ac <__fp_split3>
 5d6:	98 f3       	brcs	.-26     	; 0x5be <__divsf3+0x4>

000005d8 <__divsf3_pse>:
 5d8:	99 23       	and	r25, r25
 5da:	c9 f3       	breq	.-14     	; 0x5ce <__divsf3+0x14>
 5dc:	55 23       	and	r21, r21
 5de:	b1 f3       	breq	.-20     	; 0x5cc <__divsf3+0x12>
 5e0:	95 1b       	sub	r25, r21
 5e2:	55 0b       	sbc	r21, r21
 5e4:	bb 27       	eor	r27, r27
 5e6:	aa 27       	eor	r26, r26
 5e8:	62 17       	cp	r22, r18
 5ea:	73 07       	cpc	r23, r19
 5ec:	84 07       	cpc	r24, r20
 5ee:	38 f0       	brcs	.+14     	; 0x5fe <__divsf3_pse+0x26>
 5f0:	9f 5f       	subi	r25, 0xFF	; 255
 5f2:	5f 4f       	sbci	r21, 0xFF	; 255
 5f4:	22 0f       	add	r18, r18
 5f6:	33 1f       	adc	r19, r19
 5f8:	44 1f       	adc	r20, r20
 5fa:	aa 1f       	adc	r26, r26
 5fc:	a9 f3       	breq	.-22     	; 0x5e8 <__divsf3_pse+0x10>
 5fe:	33 d0       	rcall	.+102    	; 0x666 <__divsf3_pse+0x8e>
 600:	0e 2e       	mov	r0, r30
 602:	3a f0       	brmi	.+14     	; 0x612 <__divsf3_pse+0x3a>
 604:	e0 e8       	ldi	r30, 0x80	; 128
 606:	30 d0       	rcall	.+96     	; 0x668 <__divsf3_pse+0x90>
 608:	91 50       	subi	r25, 0x01	; 1
 60a:	50 40       	sbci	r21, 0x00	; 0
 60c:	e6 95       	lsr	r30
 60e:	00 1c       	adc	r0, r0
 610:	ca f7       	brpl	.-14     	; 0x604 <__divsf3_pse+0x2c>
 612:	29 d0       	rcall	.+82     	; 0x666 <__divsf3_pse+0x8e>
 614:	fe 2f       	mov	r31, r30
 616:	27 d0       	rcall	.+78     	; 0x666 <__divsf3_pse+0x8e>
 618:	66 0f       	add	r22, r22
 61a:	77 1f       	adc	r23, r23
 61c:	88 1f       	adc	r24, r24
 61e:	bb 1f       	adc	r27, r27
 620:	26 17       	cp	r18, r22
 622:	37 07       	cpc	r19, r23
 624:	48 07       	cpc	r20, r24
 626:	ab 07       	cpc	r26, r27
 628:	b0 e8       	ldi	r27, 0x80	; 128
 62a:	09 f0       	breq	.+2      	; 0x62e <__divsf3_pse+0x56>
 62c:	bb 0b       	sbc	r27, r27
 62e:	80 2d       	mov	r24, r0
 630:	bf 01       	movw	r22, r30
 632:	ff 27       	eor	r31, r31
 634:	93 58       	subi	r25, 0x83	; 131
 636:	5f 4f       	sbci	r21, 0xFF	; 255
 638:	2a f0       	brmi	.+10     	; 0x644 <__divsf3_pse+0x6c>
 63a:	9e 3f       	cpi	r25, 0xFE	; 254
 63c:	51 05       	cpc	r21, r1
 63e:	68 f0       	brcs	.+26     	; 0x65a <__divsf3_pse+0x82>
 640:	8d c0       	rjmp	.+282    	; 0x75c <__fp_inf>
 642:	d7 c0       	rjmp	.+430    	; 0x7f2 <__fp_szero>
 644:	5f 3f       	cpi	r21, 0xFF	; 255
 646:	ec f3       	brlt	.-6      	; 0x642 <__divsf3_pse+0x6a>
 648:	98 3e       	cpi	r25, 0xE8	; 232
 64a:	dc f3       	brlt	.-10     	; 0x642 <__divsf3_pse+0x6a>
 64c:	86 95       	lsr	r24
 64e:	77 95       	ror	r23
 650:	67 95       	ror	r22
 652:	b7 95       	ror	r27
 654:	f7 95       	ror	r31
 656:	9f 5f       	subi	r25, 0xFF	; 255
 658:	c9 f7       	brne	.-14     	; 0x64c <__divsf3_pse+0x74>
 65a:	88 0f       	add	r24, r24
 65c:	91 1d       	adc	r25, r1
 65e:	96 95       	lsr	r25
 660:	87 95       	ror	r24
 662:	97 f9       	bld	r25, 7
 664:	08 95       	ret
 666:	e1 e0       	ldi	r30, 0x01	; 1
 668:	66 0f       	add	r22, r22
 66a:	77 1f       	adc	r23, r23
 66c:	88 1f       	adc	r24, r24
 66e:	bb 1f       	adc	r27, r27
 670:	62 17       	cp	r22, r18
 672:	73 07       	cpc	r23, r19
 674:	84 07       	cpc	r24, r20
 676:	ba 07       	cpc	r27, r26
 678:	20 f0       	brcs	.+8      	; 0x682 <__divsf3_pse+0xaa>
 67a:	62 1b       	sub	r22, r18
 67c:	73 0b       	sbc	r23, r19
 67e:	84 0b       	sbc	r24, r20
 680:	ba 0b       	sbc	r27, r26
 682:	ee 1f       	adc	r30, r30
 684:	88 f7       	brcc	.-30     	; 0x668 <__divsf3_pse+0x90>
 686:	e0 95       	com	r30
 688:	08 95       	ret

0000068a <__fixunssfsi>:
 68a:	98 d0       	rcall	.+304    	; 0x7bc <__fp_splitA>
 68c:	88 f0       	brcs	.+34     	; 0x6b0 <__fixunssfsi+0x26>
 68e:	9f 57       	subi	r25, 0x7F	; 127
 690:	90 f0       	brcs	.+36     	; 0x6b6 <__fixunssfsi+0x2c>
 692:	b9 2f       	mov	r27, r25
 694:	99 27       	eor	r25, r25
 696:	b7 51       	subi	r27, 0x17	; 23
 698:	a0 f0       	brcs	.+40     	; 0x6c2 <__fixunssfsi+0x38>
 69a:	d1 f0       	breq	.+52     	; 0x6d0 <__fixunssfsi+0x46>
 69c:	66 0f       	add	r22, r22
 69e:	77 1f       	adc	r23, r23
 6a0:	88 1f       	adc	r24, r24
 6a2:	99 1f       	adc	r25, r25
 6a4:	1a f0       	brmi	.+6      	; 0x6ac <__fixunssfsi+0x22>
 6a6:	ba 95       	dec	r27
 6a8:	c9 f7       	brne	.-14     	; 0x69c <__fixunssfsi+0x12>
 6aa:	12 c0       	rjmp	.+36     	; 0x6d0 <__fixunssfsi+0x46>
 6ac:	b1 30       	cpi	r27, 0x01	; 1
 6ae:	81 f0       	breq	.+32     	; 0x6d0 <__fixunssfsi+0x46>
 6b0:	9f d0       	rcall	.+318    	; 0x7f0 <__fp_zero>
 6b2:	b1 e0       	ldi	r27, 0x01	; 1
 6b4:	08 95       	ret
 6b6:	9c c0       	rjmp	.+312    	; 0x7f0 <__fp_zero>
 6b8:	67 2f       	mov	r22, r23
 6ba:	78 2f       	mov	r23, r24
 6bc:	88 27       	eor	r24, r24
 6be:	b8 5f       	subi	r27, 0xF8	; 248
 6c0:	39 f0       	breq	.+14     	; 0x6d0 <__fixunssfsi+0x46>
 6c2:	b9 3f       	cpi	r27, 0xF9	; 249
 6c4:	cc f3       	brlt	.-14     	; 0x6b8 <__fixunssfsi+0x2e>
 6c6:	86 95       	lsr	r24
 6c8:	77 95       	ror	r23
 6ca:	67 95       	ror	r22
 6cc:	b3 95       	inc	r27
 6ce:	d9 f7       	brne	.-10     	; 0x6c6 <__fixunssfsi+0x3c>
 6d0:	3e f4       	brtc	.+14     	; 0x6e0 <__fixunssfsi+0x56>
 6d2:	90 95       	com	r25
 6d4:	80 95       	com	r24
 6d6:	70 95       	com	r23
 6d8:	61 95       	neg	r22
 6da:	7f 4f       	sbci	r23, 0xFF	; 255
 6dc:	8f 4f       	sbci	r24, 0xFF	; 255
 6de:	9f 4f       	sbci	r25, 0xFF	; 255
 6e0:	08 95       	ret

000006e2 <__floatunsisf>:
 6e2:	e8 94       	clt
 6e4:	09 c0       	rjmp	.+18     	; 0x6f8 <__floatsisf+0x12>

000006e6 <__floatsisf>:
 6e6:	97 fb       	bst	r25, 7
 6e8:	3e f4       	brtc	.+14     	; 0x6f8 <__floatsisf+0x12>
 6ea:	90 95       	com	r25
 6ec:	80 95       	com	r24
 6ee:	70 95       	com	r23
 6f0:	61 95       	neg	r22
 6f2:	7f 4f       	sbci	r23, 0xFF	; 255
 6f4:	8f 4f       	sbci	r24, 0xFF	; 255
 6f6:	9f 4f       	sbci	r25, 0xFF	; 255
 6f8:	99 23       	and	r25, r25
 6fa:	a9 f0       	breq	.+42     	; 0x726 <__floatsisf+0x40>
 6fc:	f9 2f       	mov	r31, r25
 6fe:	96 e9       	ldi	r25, 0x96	; 150
 700:	bb 27       	eor	r27, r27
 702:	93 95       	inc	r25
 704:	f6 95       	lsr	r31
 706:	87 95       	ror	r24
 708:	77 95       	ror	r23
 70a:	67 95       	ror	r22
 70c:	b7 95       	ror	r27
 70e:	f1 11       	cpse	r31, r1
 710:	f8 cf       	rjmp	.-16     	; 0x702 <__floatsisf+0x1c>
 712:	fa f4       	brpl	.+62     	; 0x752 <__floatsisf+0x6c>
 714:	bb 0f       	add	r27, r27
 716:	11 f4       	brne	.+4      	; 0x71c <__floatsisf+0x36>
 718:	60 ff       	sbrs	r22, 0
 71a:	1b c0       	rjmp	.+54     	; 0x752 <__floatsisf+0x6c>
 71c:	6f 5f       	subi	r22, 0xFF	; 255
 71e:	7f 4f       	sbci	r23, 0xFF	; 255
 720:	8f 4f       	sbci	r24, 0xFF	; 255
 722:	9f 4f       	sbci	r25, 0xFF	; 255
 724:	16 c0       	rjmp	.+44     	; 0x752 <__floatsisf+0x6c>
 726:	88 23       	and	r24, r24
 728:	11 f0       	breq	.+4      	; 0x72e <__floatsisf+0x48>
 72a:	96 e9       	ldi	r25, 0x96	; 150
 72c:	11 c0       	rjmp	.+34     	; 0x750 <__floatsisf+0x6a>
 72e:	77 23       	and	r23, r23
 730:	21 f0       	breq	.+8      	; 0x73a <__floatsisf+0x54>
 732:	9e e8       	ldi	r25, 0x8E	; 142
 734:	87 2f       	mov	r24, r23
 736:	76 2f       	mov	r23, r22
 738:	05 c0       	rjmp	.+10     	; 0x744 <__floatsisf+0x5e>
 73a:	66 23       	and	r22, r22
 73c:	71 f0       	breq	.+28     	; 0x75a <__floatsisf+0x74>
 73e:	96 e8       	ldi	r25, 0x86	; 134
 740:	86 2f       	mov	r24, r22
 742:	70 e0       	ldi	r23, 0x00	; 0
 744:	60 e0       	ldi	r22, 0x00	; 0
 746:	2a f0       	brmi	.+10     	; 0x752 <__floatsisf+0x6c>
 748:	9a 95       	dec	r25
 74a:	66 0f       	add	r22, r22
 74c:	77 1f       	adc	r23, r23
 74e:	88 1f       	adc	r24, r24
 750:	da f7       	brpl	.-10     	; 0x748 <__floatsisf+0x62>
 752:	88 0f       	add	r24, r24
 754:	96 95       	lsr	r25
 756:	87 95       	ror	r24
 758:	97 f9       	bld	r25, 7
 75a:	08 95       	ret

0000075c <__fp_inf>:
 75c:	97 f9       	bld	r25, 7
 75e:	9f 67       	ori	r25, 0x7F	; 127
 760:	80 e8       	ldi	r24, 0x80	; 128
 762:	70 e0       	ldi	r23, 0x00	; 0
 764:	60 e0       	ldi	r22, 0x00	; 0
 766:	08 95       	ret

00000768 <__fp_nan>:
 768:	9f ef       	ldi	r25, 0xFF	; 255
 76a:	80 ec       	ldi	r24, 0xC0	; 192
 76c:	08 95       	ret

0000076e <__fp_pscA>:
 76e:	00 24       	eor	r0, r0
 770:	0a 94       	dec	r0
 772:	16 16       	cp	r1, r22
 774:	17 06       	cpc	r1, r23
 776:	18 06       	cpc	r1, r24
 778:	09 06       	cpc	r0, r25
 77a:	08 95       	ret

0000077c <__fp_pscB>:
 77c:	00 24       	eor	r0, r0
 77e:	0a 94       	dec	r0
 780:	12 16       	cp	r1, r18
 782:	13 06       	cpc	r1, r19
 784:	14 06       	cpc	r1, r20
 786:	05 06       	cpc	r0, r21
 788:	08 95       	ret

0000078a <__fp_round>:
 78a:	09 2e       	mov	r0, r25
 78c:	03 94       	inc	r0
 78e:	00 0c       	add	r0, r0
 790:	11 f4       	brne	.+4      	; 0x796 <__fp_round+0xc>
 792:	88 23       	and	r24, r24
 794:	52 f0       	brmi	.+20     	; 0x7aa <__fp_round+0x20>
 796:	bb 0f       	add	r27, r27
 798:	40 f4       	brcc	.+16     	; 0x7aa <__fp_round+0x20>
 79a:	bf 2b       	or	r27, r31
 79c:	11 f4       	brne	.+4      	; 0x7a2 <__fp_round+0x18>
 79e:	60 ff       	sbrs	r22, 0
 7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fp_round+0x20>
 7a2:	6f 5f       	subi	r22, 0xFF	; 255
 7a4:	7f 4f       	sbci	r23, 0xFF	; 255
 7a6:	8f 4f       	sbci	r24, 0xFF	; 255
 7a8:	9f 4f       	sbci	r25, 0xFF	; 255
 7aa:	08 95       	ret

000007ac <__fp_split3>:
 7ac:	57 fd       	sbrc	r21, 7
 7ae:	90 58       	subi	r25, 0x80	; 128
 7b0:	44 0f       	add	r20, r20
 7b2:	55 1f       	adc	r21, r21
 7b4:	59 f0       	breq	.+22     	; 0x7cc <__fp_splitA+0x10>
 7b6:	5f 3f       	cpi	r21, 0xFF	; 255
 7b8:	71 f0       	breq	.+28     	; 0x7d6 <__fp_splitA+0x1a>
 7ba:	47 95       	ror	r20

000007bc <__fp_splitA>:
 7bc:	88 0f       	add	r24, r24
 7be:	97 fb       	bst	r25, 7
 7c0:	99 1f       	adc	r25, r25
 7c2:	61 f0       	breq	.+24     	; 0x7dc <__fp_splitA+0x20>
 7c4:	9f 3f       	cpi	r25, 0xFF	; 255
 7c6:	79 f0       	breq	.+30     	; 0x7e6 <__fp_splitA+0x2a>
 7c8:	87 95       	ror	r24
 7ca:	08 95       	ret
 7cc:	12 16       	cp	r1, r18
 7ce:	13 06       	cpc	r1, r19
 7d0:	14 06       	cpc	r1, r20
 7d2:	55 1f       	adc	r21, r21
 7d4:	f2 cf       	rjmp	.-28     	; 0x7ba <__fp_split3+0xe>
 7d6:	46 95       	lsr	r20
 7d8:	f1 df       	rcall	.-30     	; 0x7bc <__fp_splitA>
 7da:	08 c0       	rjmp	.+16     	; 0x7ec <__fp_splitA+0x30>
 7dc:	16 16       	cp	r1, r22
 7de:	17 06       	cpc	r1, r23
 7e0:	18 06       	cpc	r1, r24
 7e2:	99 1f       	adc	r25, r25
 7e4:	f1 cf       	rjmp	.-30     	; 0x7c8 <__fp_splitA+0xc>
 7e6:	86 95       	lsr	r24
 7e8:	71 05       	cpc	r23, r1
 7ea:	61 05       	cpc	r22, r1
 7ec:	08 94       	sec
 7ee:	08 95       	ret

000007f0 <__fp_zero>:
 7f0:	e8 94       	clt

000007f2 <__fp_szero>:
 7f2:	bb 27       	eor	r27, r27
 7f4:	66 27       	eor	r22, r22
 7f6:	77 27       	eor	r23, r23
 7f8:	cb 01       	movw	r24, r22
 7fa:	97 f9       	bld	r25, 7
 7fc:	08 95       	ret

000007fe <__mulsf3>:
 7fe:	0b d0       	rcall	.+22     	; 0x816 <__mulsf3x>
 800:	c4 cf       	rjmp	.-120    	; 0x78a <__fp_round>
 802:	b5 df       	rcall	.-150    	; 0x76e <__fp_pscA>
 804:	28 f0       	brcs	.+10     	; 0x810 <__mulsf3+0x12>
 806:	ba df       	rcall	.-140    	; 0x77c <__fp_pscB>
 808:	18 f0       	brcs	.+6      	; 0x810 <__mulsf3+0x12>
 80a:	95 23       	and	r25, r21
 80c:	09 f0       	breq	.+2      	; 0x810 <__mulsf3+0x12>
 80e:	a6 cf       	rjmp	.-180    	; 0x75c <__fp_inf>
 810:	ab cf       	rjmp	.-170    	; 0x768 <__fp_nan>
 812:	11 24       	eor	r1, r1
 814:	ee cf       	rjmp	.-36     	; 0x7f2 <__fp_szero>

00000816 <__mulsf3x>:
 816:	ca df       	rcall	.-108    	; 0x7ac <__fp_split3>
 818:	a0 f3       	brcs	.-24     	; 0x802 <__mulsf3+0x4>

0000081a <__mulsf3_pse>:
 81a:	95 9f       	mul	r25, r21
 81c:	d1 f3       	breq	.-12     	; 0x812 <__mulsf3+0x14>
 81e:	95 0f       	add	r25, r21
 820:	50 e0       	ldi	r21, 0x00	; 0
 822:	55 1f       	adc	r21, r21
 824:	62 9f       	mul	r22, r18
 826:	f0 01       	movw	r30, r0
 828:	72 9f       	mul	r23, r18
 82a:	bb 27       	eor	r27, r27
 82c:	f0 0d       	add	r31, r0
 82e:	b1 1d       	adc	r27, r1
 830:	63 9f       	mul	r22, r19
 832:	aa 27       	eor	r26, r26
 834:	f0 0d       	add	r31, r0
 836:	b1 1d       	adc	r27, r1
 838:	aa 1f       	adc	r26, r26
 83a:	64 9f       	mul	r22, r20
 83c:	66 27       	eor	r22, r22
 83e:	b0 0d       	add	r27, r0
 840:	a1 1d       	adc	r26, r1
 842:	66 1f       	adc	r22, r22
 844:	82 9f       	mul	r24, r18
 846:	22 27       	eor	r18, r18
 848:	b0 0d       	add	r27, r0
 84a:	a1 1d       	adc	r26, r1
 84c:	62 1f       	adc	r22, r18
 84e:	73 9f       	mul	r23, r19
 850:	b0 0d       	add	r27, r0
 852:	a1 1d       	adc	r26, r1
 854:	62 1f       	adc	r22, r18
 856:	83 9f       	mul	r24, r19
 858:	a0 0d       	add	r26, r0
 85a:	61 1d       	adc	r22, r1
 85c:	22 1f       	adc	r18, r18
 85e:	74 9f       	mul	r23, r20
 860:	33 27       	eor	r19, r19
 862:	a0 0d       	add	r26, r0
 864:	61 1d       	adc	r22, r1
 866:	23 1f       	adc	r18, r19
 868:	84 9f       	mul	r24, r20
 86a:	60 0d       	add	r22, r0
 86c:	21 1d       	adc	r18, r1
 86e:	82 2f       	mov	r24, r18
 870:	76 2f       	mov	r23, r22
 872:	6a 2f       	mov	r22, r26
 874:	11 24       	eor	r1, r1
 876:	9f 57       	subi	r25, 0x7F	; 127
 878:	50 40       	sbci	r21, 0x00	; 0
 87a:	8a f0       	brmi	.+34     	; 0x89e <__mulsf3_pse+0x84>
 87c:	e1 f0       	breq	.+56     	; 0x8b6 <__mulsf3_pse+0x9c>
 87e:	88 23       	and	r24, r24
 880:	4a f0       	brmi	.+18     	; 0x894 <__mulsf3_pse+0x7a>
 882:	ee 0f       	add	r30, r30
 884:	ff 1f       	adc	r31, r31
 886:	bb 1f       	adc	r27, r27
 888:	66 1f       	adc	r22, r22
 88a:	77 1f       	adc	r23, r23
 88c:	88 1f       	adc	r24, r24
 88e:	91 50       	subi	r25, 0x01	; 1
 890:	50 40       	sbci	r21, 0x00	; 0
 892:	a9 f7       	brne	.-22     	; 0x87e <__mulsf3_pse+0x64>
 894:	9e 3f       	cpi	r25, 0xFE	; 254
 896:	51 05       	cpc	r21, r1
 898:	70 f0       	brcs	.+28     	; 0x8b6 <__mulsf3_pse+0x9c>
 89a:	60 cf       	rjmp	.-320    	; 0x75c <__fp_inf>
 89c:	aa cf       	rjmp	.-172    	; 0x7f2 <__fp_szero>
 89e:	5f 3f       	cpi	r21, 0xFF	; 255
 8a0:	ec f3       	brlt	.-6      	; 0x89c <__mulsf3_pse+0x82>
 8a2:	98 3e       	cpi	r25, 0xE8	; 232
 8a4:	dc f3       	brlt	.-10     	; 0x89c <__mulsf3_pse+0x82>
 8a6:	86 95       	lsr	r24
 8a8:	77 95       	ror	r23
 8aa:	67 95       	ror	r22
 8ac:	b7 95       	ror	r27
 8ae:	f7 95       	ror	r31
 8b0:	e7 95       	ror	r30
 8b2:	9f 5f       	subi	r25, 0xFF	; 255
 8b4:	c1 f7       	brne	.-16     	; 0x8a6 <__mulsf3_pse+0x8c>
 8b6:	fe 2b       	or	r31, r30
 8b8:	88 0f       	add	r24, r24
 8ba:	91 1d       	adc	r25, r1
 8bc:	96 95       	lsr	r25
 8be:	87 95       	ror	r24
 8c0:	97 f9       	bld	r25, 7
 8c2:	08 95       	ret

000008c4 <_exit>:
 8c4:	f8 94       	cli

000008c6 <__stop_program>:
 8c6:	ff cf       	rjmp	.-2      	; 0x8c6 <__stop_program>
